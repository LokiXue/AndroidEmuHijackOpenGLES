// Generated Code - DO NOT EDIT !!
// generated by 'emugen'
#include <stdio.h>
#include <stdlib.h>
#include "gles2_wrapper_context.h"
#include "ErrorLog.h"

#include "gles2_entry.cpp"
#include <sys/mman.h>
#define VALID_PTR(ptr) (mprotect(ptr,1,PROT_READ|PROT_WRITE)==-1)
#define VALID_PARAMETER(ptr) ((unsigned int)ptr<=0x400000)
#ifndef GLsync
typedef struct __GLsync *GLsync;
#endif


#ifndef GL_TRUE
extern "C" {
	void glActiveTexture(GLenum texture);
	void glAttachShader(GLuint program, GLuint shader);
	void glBindAttribLocation(GLuint program, GLuint index, const GLchar* name);
	void glBindBuffer(GLenum target, GLuint buffer);
	void glBindFramebuffer(GLenum target, GLuint framebuffer);
	void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
	void glBindTexture(GLenum target, GLuint texture);
	void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void glBlendEquation(GLenum mode);
	void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
	void glBlendFunc(GLenum sfactor, GLenum dfactor);
	void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	void glBufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
	void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
	GLenum glCheckFramebufferStatus(GLenum target);
	void glClear(GLbitfield mask);
	void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void glClearDepthf(GLclampf depth);
	void glClearStencil(GLint s);
	void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void glCompileShader(GLuint shader);
	void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data);
	void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data);
	void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	GLuint glCreateProgram();
	GLuint glCreateShader(GLenum type);
	void glCullFace(GLenum mode);
	void glDeleteBuffers(GLsizei n, const GLuint* buffers);
	void glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers);
	void glDeleteProgram(GLuint program);
	void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
	void glDeleteShader(GLuint shader);
	void glDeleteTextures(GLsizei n, const GLuint* textures);
	void glDepthFunc(GLenum func);
	void glDepthMask(GLboolean flag);
	void glDepthRangef(GLclampf zNear, GLclampf zFar);
	void glDetachShader(GLuint program, GLuint shader);
	void glDisable(GLenum cap);
	void glDisableVertexAttribArray(GLuint index);
	void glDrawArrays(GLenum mode, GLint first, GLsizei count);
	void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);
	void glEnable(GLenum cap);
	void glEnableVertexAttribArray(GLuint index);
	void glFinish();
	void glFlush();
	void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void glFrontFace(GLenum mode);
	void glGenBuffers(GLsizei n, GLuint* buffers);
	void glGenerateMipmap(GLenum target);
	void glGenFramebuffers(GLsizei n, GLuint* framebuffers);
	void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
	void glGenTextures(GLsizei n, GLuint* textures);
	void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	void glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders);
	int glGetAttribLocation(GLuint program, const GLchar* name);
	void glGetBooleanv(GLenum pname, GLboolean* params);
	void glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params);
	GLenum glGetError();
	void glGetFloatv(GLenum pname, GLfloat* params);
	void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params);
	void glGetIntegerv(GLenum pname, GLint* params);
	void glGetProgramiv(GLuint program, GLenum pname, GLint* params);
	void glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog);
	void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params);
	void glGetShaderiv(GLuint shader, GLenum pname, GLint* params);
	void glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* infolog);
	void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
	void glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source);
	const GLubyte* glGetString(GLenum name);
	void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params);
	void glGetTexParameteriv(GLenum target, GLenum pname, GLint* params);
	void glGetUniformfv(GLuint program, GLint location, GLfloat* params);
	void glGetUniformiv(GLuint program, GLint location, GLint* params);
	int glGetUniformLocation(GLuint program, const GLchar* name);
	void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params);
	void glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params);
	void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid** pointer);
	void glHint(GLenum target, GLenum mode);
	GLboolean glIsBuffer(GLuint buffer);
	GLboolean glIsEnabled(GLenum cap);
	GLboolean glIsFramebuffer(GLuint framebuffer);
	GLboolean glIsProgram(GLuint program);
	GLboolean glIsRenderbuffer(GLuint renderbuffer);
	GLboolean glIsShader(GLuint shader);
	GLboolean glIsTexture(GLuint texture);
	void glLineWidth(GLfloat width);
	void glLinkProgram(GLuint program);
	void glPixelStorei(GLenum pname, GLint param);
	void glPolygonOffset(GLfloat factor, GLfloat units);
	void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
	void glReleaseShaderCompiler();
	void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	void glSampleCoverage(GLclampf value, GLboolean invert);
	void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
	void glShaderBinary(GLsizei n, const GLuint* shaders, GLenum binaryformat, const GLvoid* binary, GLsizei length);
	void glShaderSource(GLuint shader, GLsizei count, const GLchar*const* string, const GLint* length);
	void glStencilFunc(GLenum func, GLint ref, GLuint mask);
	void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
	void glStencilMask(GLuint mask);
	void glStencilMaskSeparate(GLenum face, GLuint mask);
	void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
	void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
	void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
	void glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params);
	void glTexParameteri(GLenum target, GLenum pname, GLint param);
	void glTexParameteriv(GLenum target, GLenum pname, const GLint* params);
	void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
	void glUniform1f(GLint location, GLfloat x);
	void glUniform1fv(GLint location, GLsizei count, const GLfloat* v);
	void glUniform1i(GLint location, GLint x);
	void glUniform1iv(GLint location, GLsizei count, const GLint* v);
	void glUniform2f(GLint location, GLfloat x, GLfloat y);
	void glUniform2fv(GLint location, GLsizei count, const GLfloat* v);
	void glUniform2i(GLint location, GLint x, GLint y);
	void glUniform2iv(GLint location, GLsizei count, const GLint* v);
	void glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z);
	void glUniform3fv(GLint location, GLsizei count, const GLfloat* v);
	void glUniform3i(GLint location, GLint x, GLint y, GLint z);
	void glUniform3iv(GLint location, GLsizei count, const GLint* v);
	void glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void glUniform4fv(GLint location, GLsizei count, const GLfloat* v);
	void glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w);
	void glUniform4iv(GLint location, GLsizei count, const GLint* v);
	void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUseProgram(GLuint program);
	void glValidateProgram(GLuint program);
	void glVertexAttrib1f(GLuint indx, GLfloat x);
	void glVertexAttrib1fv(GLuint indx, const GLfloat* values);
	void glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y);
	void glVertexAttrib2fv(GLuint indx, const GLfloat* values);
	void glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z);
	void glVertexAttrib3fv(GLuint indx, const GLfloat* values);
	void glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void glVertexAttrib4fv(GLuint indx, const GLfloat* values);
	void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* ptr);
	void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
	void glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image);
	void glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image);
	void glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, GLvoid* binary);
	void glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid* binary, GLint length);
	void* glMapBufferOES(GLenum target, GLenum access);
	GLboolean glUnmapBufferOES(GLenum target);
	void glTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
	void glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);
	void glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);
	void glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);
	void glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	void glBindVertexArrayOES(GLuint array);
	void glDeleteVertexArraysOES(GLsizei n, const GLuint* arrays);
	void glGenVertexArraysOES(GLsizei n, GLuint* arrays);
	GLboolean glIsVertexArrayOES(GLuint array);
	void glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum* attachments);
	void glMultiDrawArraysEXT(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount);
	void glMultiDrawElementsEXT(GLenum mode, const GLsizei* count, GLenum type, const GLvoid*const* indices, GLsizei primcount);
	void glGetPerfMonitorGroupsAMD(GLint* numGroups, GLsizei groupsSize, GLuint* groups);
	void glGetPerfMonitorCountersAMD(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters);
	void glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString);
	void glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString);
	void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid* data);
	void glGenPerfMonitorsAMD(GLsizei n, GLuint* monitors);
	void glDeletePerfMonitorsAMD(GLsizei n, GLuint* monitors);
	void glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* countersList);
	void glBeginPerfMonitorAMD(GLuint monitor);
	void glEndPerfMonitorAMD(GLuint monitor);
	void glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten);
	void glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
	void glDeleteFencesNV(GLsizei n, const GLuint* fences);
	void glGenFencesNV(GLsizei n, GLuint* fences);
	GLboolean glIsFenceNV(GLuint fence);
	GLboolean glTestFenceNV(GLuint fence);
	void glGetFenceivNV(GLuint fence, GLenum pname, GLint* params);
	void glFinishFenceNV(GLuint fence);
	void glSetFenceNV(GLuint fence, GLenum condition);
	void glCoverageMaskNV(GLboolean mask);
	void glCoverageOperationNV(GLenum operation);
	void glGetDriverControlsQCOM(GLint* num, GLsizei size, GLuint* driverControls);
	void glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei* length, GLchar* driverControlString);
	void glEnableDriverControlQCOM(GLuint driverControl);
	void glDisableDriverControlQCOM(GLuint driverControl);
	void glExtGetTexturesQCOM(GLuint* textures, GLint maxTextures, GLint* numTextures);
	void glExtGetBuffersQCOM(GLuint* buffers, GLint maxBuffers, GLint* numBuffers);
	void glExtGetRenderbuffersQCOM(GLuint* renderbuffers, GLint maxRenderbuffers, GLint* numRenderbuffers);
	void glExtGetFramebuffersQCOM(GLuint* framebuffers, GLint maxFramebuffers, GLint* numFramebuffers);
	void glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint* params);
	void glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param);
	void glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid* texels);
	void glExtGetBufferPointervQCOM(GLenum target, GLvoidptr* params);
	void glExtGetShadersQCOM(GLuint* shaders, GLint maxShaders, GLint* numShaders);
	void glExtGetProgramsQCOM(GLuint* programs, GLint maxPrograms, GLint* numPrograms);
	GLboolean glExtIsProgramBinaryQCOM(GLuint program);
	void glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar* source, GLint* length);
	void glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);
	void glEndTilingQCOM(GLbitfield preserveMask);
	void glVertexAttribPointerData(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void* data, GLuint datalen);
	void glVertexAttribPointerOffset(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint offset);
	void glDrawElementsOffset(GLenum mode, GLsizei count, GLenum type, GLuint offset);
	void glDrawElementsData(GLenum mode, GLsizei count, GLenum type, void* data, GLuint datalen);
	void glGetCompressedTextureFormats(int count, GLint* formats);
	void glShaderString(GLuint shader, const GLchar* string, GLsizei len);
	int glFinishRoundTrip();
	void glGenVertexArrays(GLsizei n, GLuint* arrays);
	void glBindVertexArray(GLuint array);
	void glDeleteVertexArrays(GLsizei n, const GLuint* arrays);
	GLboolean glIsVertexArray(GLuint array);
	void* glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	GLboolean glUnmapBuffer(GLenum target);
	void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
	void glMapBufferRangeAEMU(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* mapped);
	void glUnmapBufferAEMU(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* guest_buffer, GLboolean* out_res);
	void glFlushMappedBufferRangeAEMU(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* guest_buffer);
	void glReadPixelsOffsetAEMU(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLuint offset);
	void glCompressedTexImage2DOffsetAEMU(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLuint offset);
	void glCompressedTexSubImage2DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLuint offset);
	void glTexImage2DOffsetAEMU(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLuint offset);
	void glTexSubImage2DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLuint offset);
	void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
	void glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size);
	void glClearBufferiv(GLenum buffer, GLint drawBuffer, const GLint* value);
	void glClearBufferuiv(GLenum buffer, GLint drawBuffer, const GLuint* value);
	void glClearBufferfv(GLenum buffer, GLint drawBuffer, const GLfloat* value);
	void glClearBufferfi(GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil);
	void glGetBufferParameteri64v(GLenum target, GLenum value, GLint64* data);
	void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid** params);
	void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
	GLuint glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName);
	void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar** var3, GLuint* uniformIndices);
	void glGetUniformIndicesAEMU(GLuint program, GLsizei uniformCount, const GLchar* packedUniformNames, GLsizei packedLen, GLuint* uniformIndices);
	void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
	void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
	void glUniform1ui(GLint location, GLuint v0);
	void glUniform2ui(GLint location, GLuint v0, GLuint v1);
	void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
	void glUniform4ui(GLint location, GLint v0, GLuint v1, GLuint v2, GLuint v3);
	void glUniform1uiv(GLint location, GLsizei count, const GLuint* value);
	void glUniform2uiv(GLint location, GLsizei count, const GLuint* value);
	void glUniform3uiv(GLint location, GLsizei count, const GLuint* value);
	void glUniform4uiv(GLint location, GLsizei count, const GLuint* value);
	void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glGetUniformuiv(GLuint program, GLint location, GLuint* params);
	void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
	void glVertexAttribI4i(GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);
	void glVertexAttribI4ui(GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void glVertexAttribI4iv(GLuint index, const GLint* v);
	void glVertexAttribI4uiv(GLuint index, const GLuint* v);
	void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
	void glVertexAttribIPointerOffsetAEMU(GLuint index, GLint size, GLenum type, GLsizei stride, GLuint offset);
	void glVertexAttribIPointerDataAEMU(GLuint index, GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen);
	void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params);
	void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params);
	void glVertexAttribDivisor(GLuint index, GLuint divisor);
	void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
	void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
	void glDrawElementsInstancedDataAEMU(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount, GLsizei datalen);
	void glDrawElementsInstancedOffsetAEMU(GLenum mode, GLsizei count, GLenum type, GLuint offset, GLsizei primcount);
	void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices);
	void glDrawRangeElementsDataAEMU(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices, GLsizei datalen);
	void glDrawRangeElementsOffsetAEMU(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLuint offset);
	GLsync glFenceSync(GLenum condition, GLbitfield flags);
	GLenum glClientWaitSync(GLsync wait_on, GLbitfield flags, GLuint64 timeout);
	void glWaitSync(GLsync wait_on, GLbitfield flags, GLuint64 timeout);
	void glDeleteSync(GLsync to_delete);
	GLboolean glIsSync(GLsync sync);
	void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
	uint64_t glFenceSyncAEMU(GLenum condition, GLbitfield flags);
	GLenum glClientWaitSyncAEMU(uint64_t wait_on, GLbitfield flags, GLuint64 timeout);
	void glWaitSyncAEMU(uint64_t wait_on, GLbitfield flags, GLuint64 timeout);
	void glDeleteSyncAEMU(uint64_t to_delete);
	GLboolean glIsSyncAEMU(uint64_t sync);
	void glGetSyncivAEMU(uint64_t sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
	void glDrawBuffers(GLsizei n, const GLenum* bufs);
	void glReadBuffer(GLenum src);
	void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments);
	void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);
	void glBeginTransformFeedback(GLenum primitiveMode);
	void glEndTransformFeedback();
	void glGenTransformFeedbacks(GLsizei n, GLuint* ids);
	void glDeleteTransformFeedbacks(GLsizei n, const GLuint* ids);
	void glBindTransformFeedback(GLenum target, GLuint id);
	void glPauseTransformFeedback();
	void glResumeTransformFeedback();
	GLboolean glIsTransformFeedback(GLuint id);
	void glTransformFeedbackVaryings(GLuint program, GLsizei count, const char** var3, GLenum bufferMode);
	void glTransformFeedbackVaryingsAEMU(GLuint program, GLsizei count, const char* packedVaryings, GLuint packedVaryingsLen, GLenum bufferMode);
	void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, char* name);
	void glGenSamplers(GLsizei n, GLuint* samplers);
	void glDeleteSamplers(GLsizei n, const GLuint* samplers);
	void glBindSampler(GLuint unit, GLuint sampler);
	void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
	void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
	void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* params);
	void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* params);
	void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params);
	void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params);
	GLboolean glIsSampler(GLuint sampler);
	void glGenQueries(GLsizei n, GLuint* queries);
	void glDeleteQueries(GLsizei n, const GLuint* queries);
	void glBeginQuery(GLenum target, GLuint query);
	void glEndQuery(GLenum target);
	void glGetQueryiv(GLenum target, GLenum pname, GLint* params);
	void glGetQueryObjectuiv(GLuint query, GLenum pname, GLuint* params);
	GLboolean glIsQuery(GLuint query);
	void glProgramParameteri(GLuint program, GLenum pname, GLint value);
	void glProgramBinary(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
	void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
	GLint glGetFragDataLocation(GLuint program, const char* name);
	void glGetInteger64v(GLenum pname, GLint64* data);
	void glGetIntegeri_v(GLenum target, GLuint index, GLint* data);
	void glGetInteger64i_v(GLenum target, GLuint index, GLint64* data);
	void glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* data);
	void glTexImage3DOffsetAEMU(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLuint offset);
	void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* data);
	void glTexSubImage3DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLuint offset);
	void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);
	void glCompressedTexImage3DOffsetAEMU(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLuint offset);
	void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);
	void glCompressedTexSubImage3DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLuint data);
	void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	const GLubyte* glGetStringi(GLenum name, GLuint index);
	void glGetBooleani_v(GLenum target, GLuint index, GLboolean* data);
	void glMemoryBarrier(GLbitfield barriers);
	void glMemoryBarrierByRegion(GLbitfield barriers);
	void glGenProgramPipelines(GLsizei n, GLuint* pipelines);
	void glDeleteProgramPipelines(GLsizei n, const GLuint* pipelines);
	void glBindProgramPipeline(GLuint pipeline);
	void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint* params);
	void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	void glValidateProgramPipeline(GLuint pipeline);
	GLboolean glIsProgramPipeline(GLuint pipeline);
	void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
	void glActiveShaderProgram(GLuint pipeline, GLuint program);
	GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const char** var3);
	GLuint glCreateShaderProgramvAEMU(GLenum type, GLsizei count, const char* packedStrings, GLuint packedLen);
	void glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
	void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void glProgramUniform1i(GLuint program, GLint location, GLint v0);
	void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
	void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
	void glProgramUniform2ui(GLuint program, GLint location, GLint v0, GLuint v1);
	void glProgramUniform3ui(GLuint program, GLint location, GLint v0, GLint v1, GLuint v2);
	void glProgramUniform4ui(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLuint v3);
	void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint* value);
	void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint* value);
	void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint* value);
	void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint* value);
	void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
	void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
	void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params);
	GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const char* name);
	GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const char* name);
	void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, char* name);
	void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	void glDispatchComputeIndirect(GLintptr indirect);
	void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLintptr stride);
	void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
	void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
	void glDrawArraysIndirect(GLenum mode, const void* indirect);
	void glDrawArraysIndirectDataAEMU(GLenum mode, const void* indirect, GLuint datalen);
	void glDrawArraysIndirectOffsetAEMU(GLenum mode, GLuint offset);
	void glDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect);
	void glDrawElementsIndirectDataAEMU(GLenum mode, GLenum type, const void* indirect, GLuint datalen);
	void glDrawElementsIndirectOffsetAEMU(GLenum mode, GLenum type, GLuint offset);
	void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	void glSampleMaski(GLuint maskNumber, GLbitfield mask);
	void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat* val);
	void glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
	void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint* params);
	void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params);
	void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params);
};

#endif


#undef GET_CONTEXT_wrapper
#ifndef GET_CONTEXT_wrapper
static gles2_wrapper_context_t::CONTEXT_ACCESSOR_TYPE *getCurrentContext_wrapper = NULL;
void gles2_wrapper_context_t::setContextAccessor(CONTEXT_ACCESSOR_TYPE *f) { getCurrentContext_wrapper = f; }
#define GET_CONTEXT_wrapper gles2_wrapper_context_t * ctx = getCurrentContext_wrapper() 
#endif

void glActiveTexture(GLenum texture)
{
	RedFinger_glActiveTexture( texture);
}

void glAttachShader(GLuint program, GLuint shader)
{
	RedFinger_glAttachShader( program, shader);
}

void glBindAttribLocation(GLuint program, GLuint index, const GLchar* name)
{
	RedFinger_glBindAttribLocation( program, index, name);
}

void glBindBuffer(GLenum target, GLuint buffer)
{
	RedFinger_glBindBuffer( target, buffer);
}

void glBindFramebuffer(GLenum target, GLuint framebuffer)
{
	RedFinger_glBindFramebuffer( target, framebuffer);
}

void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
	RedFinger_glBindRenderbuffer( target, renderbuffer);
}

void glBindTexture(GLenum target, GLuint texture)
{
	RedFinger_glBindTexture( target, texture);
}

void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
	RedFinger_glBlendColor( red, green, blue, alpha);
}

void glBlendEquation(GLenum mode)
{
	RedFinger_glBlendEquation( mode);
}

void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
	RedFinger_glBlendEquationSeparate( modeRGB, modeAlpha);
}

void glBlendFunc(GLenum sfactor, GLenum dfactor)
{
	RedFinger_glBlendFunc( sfactor, dfactor);
}

void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
	RedFinger_glBlendFuncSeparate( srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void glBufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage)
{
	RedFinger_glBufferData( target, size, data, usage);
}

void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data)
{
	RedFinger_glBufferSubData( target, offset, size, data);
}

GLenum glCheckFramebufferStatus(GLenum target)
{
	return RedFinger_glCheckFramebufferStatus( target);
}

void glClear(GLbitfield mask)
{
	RedFinger_glClear( mask);
}

void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
	RedFinger_glClearColor( red, green, blue, alpha);
}

void glClearDepthf(GLclampf depth)
{
	RedFinger_glClearDepthf( depth);
}

void glClearStencil(GLint s)
{
	RedFinger_glClearStencil( s);
}

void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
	RedFinger_glColorMask( red, green, blue, alpha);
}

void glCompileShader(GLuint shader)
{
	RedFinger_glCompileShader( shader);
}

void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
{
	RedFinger_glCompressedTexImage2D( target, level, internalformat, width, height, border, imageSize, data);
}

void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
{
	RedFinger_glCompressedTexSubImage2D( target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
	RedFinger_glCopyTexImage2D( target, level, internalformat, x, y, width, height, border);
}

void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	RedFinger_glCopyTexSubImage2D( target, level, xoffset, yoffset, x, y, width, height);
}

GLuint glCreateProgram()
{
	return RedFinger_glCreateProgram();
}

GLuint glCreateShader(GLenum type)
{
	return RedFinger_glCreateShader( type);
}

void glCullFace(GLenum mode)
{
	RedFinger_glCullFace( mode);
}

void glDeleteBuffers(GLsizei n, const GLuint* buffers)
{
	RedFinger_glDeleteBuffers( n, buffers);
}

void glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)
{
	RedFinger_glDeleteFramebuffers( n, framebuffers);
}

void glDeleteProgram(GLuint program)
{
	RedFinger_glDeleteProgram( program);
}

void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)
{
	RedFinger_glDeleteRenderbuffers( n, renderbuffers);
}

void glDeleteShader(GLuint shader)
{
	RedFinger_glDeleteShader( shader);
}

void glDeleteTextures(GLsizei n, const GLuint* textures)
{
	RedFinger_glDeleteTextures( n, textures);
}

void glDepthFunc(GLenum func)
{
	RedFinger_glDepthFunc( func);
}

void glDepthMask(GLboolean flag)
{
	RedFinger_glDepthMask( flag);
}

void glDepthRangef(GLclampf zNear, GLclampf zFar)
{
	RedFinger_glDepthRangef( zNear, zFar);
}

void glDetachShader(GLuint program, GLuint shader)
{
	RedFinger_glDetachShader( program, shader);
}

void glDisable(GLenum cap)
{
	RedFinger_glDisable( cap);
}

void glDisableVertexAttribArray(GLuint index)
{
	RedFinger_glDisableVertexAttribArray( index);
}

void glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
	RedFinger_glDrawArrays( mode, first, count);
}

void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices)
{
	RedFinger_glDrawElements( mode, count, type, indices);
}

void glEnable(GLenum cap)
{
	RedFinger_glEnable( cap);
}

void glEnableVertexAttribArray(GLuint index)
{
	RedFinger_glEnableVertexAttribArray( index);
}

void glFinish()
{
	RedFinger_glFinish();
}

void glFlush()
{
	RedFinger_glFlush();
}

void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	RedFinger_glFramebufferRenderbuffer( target, attachment, renderbuffertarget, renderbuffer);
}

void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	RedFinger_glFramebufferTexture2D( target, attachment, textarget, texture, level);
}

void glFrontFace(GLenum mode)
{
	RedFinger_glFrontFace( mode);
}

void glGenBuffers(GLsizei n, GLuint* buffers)
{
	RedFinger_glGenBuffers( n, buffers);
}

void glGenerateMipmap(GLenum target)
{
	RedFinger_glGenerateMipmap( target);
}

void glGenFramebuffers(GLsizei n, GLuint* framebuffers)
{
	RedFinger_glGenFramebuffers( n, framebuffers);
}

void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)
{
	RedFinger_glGenRenderbuffers( n, renderbuffers);
}

void glGenTextures(GLsizei n, GLuint* textures)
{
	RedFinger_glGenTextures( n, textures);
}

void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
{
	RedFinger_glGetActiveAttrib( program, index, bufsize, length, size, type, name);
}

void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
{
	RedFinger_glGetActiveUniform( program, index, bufsize, length, size, type, name);
}

void glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)
{
	RedFinger_glGetAttachedShaders( program, maxcount, count, shaders);
}

int glGetAttribLocation(GLuint program, const GLchar* name)
{
	return RedFinger_glGetAttribLocation( program, name);
}

void glGetBooleanv(GLenum pname, GLboolean* params)
{
	RedFinger_glGetBooleanv( pname, params);
}

void glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)
{
	RedFinger_glGetBufferParameteriv( target, pname, params);
}

GLenum glGetError()
{
	return RedFinger_glGetError();
}

void glGetFloatv(GLenum pname, GLfloat* params)
{
	RedFinger_glGetFloatv( pname, params);
}

void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)
{
	RedFinger_glGetFramebufferAttachmentParameteriv( target, attachment, pname, params);
}

void glGetIntegerv(GLenum pname, GLint* params)
{
	RedFinger_glGetIntegerv( pname, params);
}

void glGetProgramiv(GLuint program, GLenum pname, GLint* params)
{
	RedFinger_glGetProgramiv( program, pname, params);
}

void glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog)
{
	RedFinger_glGetProgramInfoLog( program, bufsize, length, infolog);
}

void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)
{
	RedFinger_glGetRenderbufferParameteriv( target, pname, params);
}

void glGetShaderiv(GLuint shader, GLenum pname, GLint* params)
{
	RedFinger_glGetShaderiv( shader, pname, params);
}

void glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* infolog)
{
	RedFinger_glGetShaderInfoLog( shader, bufsize, length, infolog);
}

void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
{
	RedFinger_glGetShaderPrecisionFormat( shadertype, precisiontype, range, precision);
}

void glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source)
{
	RedFinger_glGetShaderSource( shader, bufsize, length, source);
}

const GLubyte* glGetString(GLenum name)
{
	return RedFinger_glGetString( name);
}

void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params)
{
	RedFinger_glGetTexParameterfv( target, pname, params);
}

void glGetTexParameteriv(GLenum target, GLenum pname, GLint* params)
{
	RedFinger_glGetTexParameteriv( target, pname, params);
}

void glGetUniformfv(GLuint program, GLint location, GLfloat* params)
{
	RedFinger_glGetUniformfv( program, location, params);
}

void glGetUniformiv(GLuint program, GLint location, GLint* params)
{
	RedFinger_glGetUniformiv( program, location, params);
}

int glGetUniformLocation(GLuint program, const GLchar* name)
{
	return RedFinger_glGetUniformLocation( program, name);
}

void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)
{
	RedFinger_glGetVertexAttribfv( index, pname, params);
}

void glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)
{
	RedFinger_glGetVertexAttribiv( index, pname, params);
}

void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid** pointer)
{
	RedFinger_glGetVertexAttribPointerv( index, pname, pointer);
}

void glHint(GLenum target, GLenum mode)
{
	RedFinger_glHint( target, mode);
}

GLboolean glIsBuffer(GLuint buffer)
{
	return RedFinger_glIsBuffer( buffer);
}

GLboolean glIsEnabled(GLenum cap)
{
	return RedFinger_glIsEnabled( cap);
}

GLboolean glIsFramebuffer(GLuint framebuffer)
{
	return RedFinger_glIsFramebuffer( framebuffer);
}

GLboolean glIsProgram(GLuint program)
{
	return RedFinger_glIsProgram( program);
}

GLboolean glIsRenderbuffer(GLuint renderbuffer)
{
	return RedFinger_glIsRenderbuffer( renderbuffer);
}

GLboolean glIsShader(GLuint shader)
{
	return RedFinger_glIsShader( shader);
}

GLboolean glIsTexture(GLuint texture)
{
	return RedFinger_glIsTexture( texture);
}

void glLineWidth(GLfloat width)
{
	RedFinger_glLineWidth( width);
}

void glLinkProgram(GLuint program)
{
	RedFinger_glLinkProgram( program);
}

void glPixelStorei(GLenum pname, GLint param)
{
	RedFinger_glPixelStorei( pname, param);
}

void glPolygonOffset(GLfloat factor, GLfloat units)
{
	RedFinger_glPolygonOffset( factor, units);
}

void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels)
{
	RedFinger_glReadPixels( x, y, width, height, format, type, pixels);
}

void glReleaseShaderCompiler()
{
	RedFinger_glReleaseShaderCompiler();
}

void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
	RedFinger_glRenderbufferStorage( target, internalformat, width, height);
}

void glSampleCoverage(GLclampf value, GLboolean invert)
{
	RedFinger_glSampleCoverage( value, invert);
}

void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
	RedFinger_glScissor( x, y, width, height);
}

void glShaderBinary(GLsizei n, const GLuint* shaders, GLenum binaryformat, const GLvoid* binary, GLsizei length)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glShaderBinary( n, shaders, binaryformat, binary, length);
}

void glShaderSource(GLuint shader, GLsizei count, const GLchar*const* string, const GLint* length)
{
	RedFinger_glShaderSource( shader, count, string, length);
}

void glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
	RedFinger_glStencilFunc( func, ref, mask);
}

void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
	RedFinger_glStencilFuncSeparate( face, func, ref, mask);
}

void glStencilMask(GLuint mask)
{
	RedFinger_glStencilMask( mask);
}

void glStencilMaskSeparate(GLenum face, GLuint mask)
{
	RedFinger_glStencilMaskSeparate( face, mask);
}

void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
	RedFinger_glStencilOp( fail, zfail, zpass);
}

void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
	RedFinger_glStencilOpSeparate( face, fail, zfail, zpass);
}

void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
{
	RedFinger_glTexImage2D( target, level, internalformat, width, height, border, format, type, pixels);
}

void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
	RedFinger_glTexParameterf( target, pname, param);
}

void glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params)
{
	RedFinger_glTexParameterfv( target, pname, params);
}

void glTexParameteri(GLenum target, GLenum pname, GLint param)
{
	RedFinger_glTexParameteri( target, pname, param);
}

void glTexParameteriv(GLenum target, GLenum pname, const GLint* params)
{
	RedFinger_glTexParameteriv( target, pname, params);
}

void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
{
	RedFinger_glTexSubImage2D( target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void glUniform1f(GLint location, GLfloat x)
{
	RedFinger_glUniform1f( location, x);
}

void glUniform1fv(GLint location, GLsizei count, const GLfloat* v)
{
	RedFinger_glUniform1fv( location, count, v);
}

void glUniform1i(GLint location, GLint x)
{
	RedFinger_glUniform1i( location, x);
}

void glUniform1iv(GLint location, GLsizei count, const GLint* v)
{
	RedFinger_glUniform1iv( location, count, v);
}

void glUniform2f(GLint location, GLfloat x, GLfloat y)
{
	RedFinger_glUniform2f( location, x, y);
}

void glUniform2fv(GLint location, GLsizei count, const GLfloat* v)
{
	RedFinger_glUniform2fv( location, count, v);
}

void glUniform2i(GLint location, GLint x, GLint y)
{
	RedFinger_glUniform2i( location, x, y);
}

void glUniform2iv(GLint location, GLsizei count, const GLint* v)
{
	RedFinger_glUniform2iv( location, count, v);
}

void glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)
{
	RedFinger_glUniform3f( location, x, y, z);
}

void glUniform3fv(GLint location, GLsizei count, const GLfloat* v)
{
	RedFinger_glUniform3fv( location, count, v);
}

void glUniform3i(GLint location, GLint x, GLint y, GLint z)
{
	RedFinger_glUniform3i( location, x, y, z);
}

void glUniform3iv(GLint location, GLsizei count, const GLint* v)
{
	RedFinger_glUniform3iv( location, count, v);
}

void glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	RedFinger_glUniform4f( location, x, y, z, w);
}

void glUniform4fv(GLint location, GLsizei count, const GLfloat* v)
{
	RedFinger_glUniform4fv( location, count, v);
}

void glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)
{
	RedFinger_glUniform4i( location, x, y, z, w);
}

void glUniform4iv(GLint location, GLsizei count, const GLint* v)
{
	RedFinger_glUniform4iv( location, count, v);
}

void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix2fv( location, count, transpose, value);
}

void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix3fv( location, count, transpose, value);
}

void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix4fv( location, count, transpose, value);
}

void glUseProgram(GLuint program)
{
	RedFinger_glUseProgram( program);
}

void glValidateProgram(GLuint program)
{
	RedFinger_glValidateProgram( program);
}

void glVertexAttrib1f(GLuint indx, GLfloat x)
{
	RedFinger_glVertexAttrib1f( indx, x);
}

void glVertexAttrib1fv(GLuint indx, const GLfloat* values)
{
	RedFinger_glVertexAttrib1fv( indx, values);
}

void glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)
{
	RedFinger_glVertexAttrib2f( indx, x, y);
}

void glVertexAttrib2fv(GLuint indx, const GLfloat* values)
{
	RedFinger_glVertexAttrib2fv( indx, values);
}

void glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)
{
	RedFinger_glVertexAttrib3f( indx, x, y, z);
}

void glVertexAttrib3fv(GLuint indx, const GLfloat* values)
{
	RedFinger_glVertexAttrib3fv( indx, values);
}

void glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	RedFinger_glVertexAttrib4f( indx, x, y, z, w);
}

void glVertexAttrib4fv(GLuint indx, const GLfloat* values)
{
	RedFinger_glVertexAttrib4fv( indx, values);
}

void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* ptr)
{
	RedFinger_glVertexAttribPointer( indx, size, type, normalized, stride, ptr);
}

void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
	RedFinger_glViewport( x, y, width, height);
}

void glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image)
{
	RedFinger_glEGLImageTargetTexture2DOES( target, image);
}

void glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image)
{
	RedFinger_glEGLImageTargetRenderbufferStorageOES( target, image);
}

void glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, GLvoid* binary)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetProgramBinaryOES( program, bufSize, length, binaryFormat, binary);
}

void glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid* binary, GLint length)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glProgramBinaryOES( program, binaryFormat, binary, length);
}

void* glMapBufferOES(GLenum target, GLenum access)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 return ctx->glMapBufferOES( target, access);
}

GLboolean glUnmapBufferOES(GLenum target)
{
	return RedFinger_glUnmapBufferOES( target);
}

void glTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
{
	RedFinger_glTexImage3DOES( target, level, internalformat, width, height, depth, border, format, type, pixels);
}

void glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
{
	RedFinger_glTexSubImage3DOES( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

void glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	RedFinger_glCopyTexSubImage3DOES( target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
{
	RedFinger_glCompressedTexImage3DOES( target, level, internalformat, width, height, depth, border, imageSize, data);
}

void glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
{
	RedFinger_glCompressedTexSubImage3DOES( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
	RedFinger_glFramebufferTexture3DOES( target, attachment, textarget, texture, level, zoffset);
}

void glBindVertexArrayOES(GLuint array)
{
	RedFinger_glBindVertexArrayOES( array);
}

void glDeleteVertexArraysOES(GLsizei n, const GLuint* arrays)
{
	RedFinger_glDeleteVertexArraysOES( n, arrays);
}

void glGenVertexArraysOES(GLsizei n, GLuint* arrays)
{
	RedFinger_glGenVertexArraysOES( n, arrays);
}

GLboolean glIsVertexArrayOES(GLuint array)
{
	return RedFinger_glIsVertexArrayOES( array);
}

void glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum* attachments)
{
	RedFinger_glDiscardFramebufferEXT( target, numAttachments, attachments);
}

void glMultiDrawArraysEXT(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glMultiDrawArraysEXT( mode, first, count, primcount);
}

void glMultiDrawElementsEXT(GLenum mode, const GLsizei* count, GLenum type, const GLvoid*const* indices, GLsizei primcount)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glMultiDrawElementsEXT( mode, count, type, indices, primcount);
}

void glGetPerfMonitorGroupsAMD(GLint* numGroups, GLsizei groupsSize, GLuint* groups)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetPerfMonitorGroupsAMD( numGroups, groupsSize, groups);
}

void glGetPerfMonitorCountersAMD(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetPerfMonitorCountersAMD( group, numCounters, maxActiveCounters, counterSize, counters);
}

void glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetPerfMonitorGroupStringAMD( group, bufSize, length, groupString);
}

void glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetPerfMonitorCounterStringAMD( group, counter, bufSize, length, counterString);
}

void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid* data)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetPerfMonitorCounterInfoAMD( group, counter, pname, data);
}

void glGenPerfMonitorsAMD(GLsizei n, GLuint* monitors)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGenPerfMonitorsAMD( n, monitors);
}

void glDeletePerfMonitorsAMD(GLsizei n, GLuint* monitors)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glDeletePerfMonitorsAMD( n, monitors);
}

void glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* countersList)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glSelectPerfMonitorCountersAMD( monitor, enable, group, numCounters, countersList);
}

void glBeginPerfMonitorAMD(GLuint monitor)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glBeginPerfMonitorAMD( monitor);
}

void glEndPerfMonitorAMD(GLuint monitor)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glEndPerfMonitorAMD( monitor);
}

void glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetPerfMonitorCounterDataAMD( monitor, pname, dataSize, data, bytesWritten);
}

void glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glRenderbufferStorageMultisampleIMG( target, samples, internalformat, width, height);
}

void glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glFramebufferTexture2DMultisampleIMG( target, attachment, textarget, texture, level, samples);
}

void glDeleteFencesNV(GLsizei n, const GLuint* fences)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glDeleteFencesNV( n, fences);
}

void glGenFencesNV(GLsizei n, GLuint* fences)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGenFencesNV( n, fences);
}

GLboolean glIsFenceNV(GLuint fence)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 return ctx->glIsFenceNV( fence);
}

GLboolean glTestFenceNV(GLuint fence)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 return ctx->glTestFenceNV( fence);
}

void glGetFenceivNV(GLuint fence, GLenum pname, GLint* params)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetFenceivNV( fence, pname, params);
}

void glFinishFenceNV(GLuint fence)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glFinishFenceNV( fence);
}

void glSetFenceNV(GLuint fence, GLenum condition)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glSetFenceNV( fence, condition);
}

void glCoverageMaskNV(GLboolean mask)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glCoverageMaskNV( mask);
}

void glCoverageOperationNV(GLenum operation)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glCoverageOperationNV( operation);
}

void glGetDriverControlsQCOM(GLint* num, GLsizei size, GLuint* driverControls)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetDriverControlsQCOM( num, size, driverControls);
}

void glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei* length, GLchar* driverControlString)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetDriverControlStringQCOM( driverControl, bufSize, length, driverControlString);
}

void glEnableDriverControlQCOM(GLuint driverControl)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glEnableDriverControlQCOM( driverControl);
}

void glDisableDriverControlQCOM(GLuint driverControl)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glDisableDriverControlQCOM( driverControl);
}

void glExtGetTexturesQCOM(GLuint* textures, GLint maxTextures, GLint* numTextures)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetTexturesQCOM( textures, maxTextures, numTextures);
}

void glExtGetBuffersQCOM(GLuint* buffers, GLint maxBuffers, GLint* numBuffers)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetBuffersQCOM( buffers, maxBuffers, numBuffers);
}

void glExtGetRenderbuffersQCOM(GLuint* renderbuffers, GLint maxRenderbuffers, GLint* numRenderbuffers)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetRenderbuffersQCOM( renderbuffers, maxRenderbuffers, numRenderbuffers);
}

void glExtGetFramebuffersQCOM(GLuint* framebuffers, GLint maxFramebuffers, GLint* numFramebuffers)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetFramebuffersQCOM( framebuffers, maxFramebuffers, numFramebuffers);
}

void glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint* params)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetTexLevelParameterivQCOM( texture, face, level, pname, params);
}

void glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtTexObjectStateOverrideiQCOM( target, pname, param);
}

void glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid* texels)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetTexSubImageQCOM( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}

void glExtGetBufferPointervQCOM(GLenum target, GLvoidptr* params)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetBufferPointervQCOM( target, params);
}

void glExtGetShadersQCOM(GLuint* shaders, GLint maxShaders, GLint* numShaders)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetShadersQCOM( shaders, maxShaders, numShaders);
}

void glExtGetProgramsQCOM(GLuint* programs, GLint maxPrograms, GLint* numPrograms)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetProgramsQCOM( programs, maxPrograms, numPrograms);
}

GLboolean glExtIsProgramBinaryQCOM(GLuint program)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 return ctx->glExtIsProgramBinaryQCOM( program);
}

void glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar* source, GLint* length)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glExtGetProgramBinarySourceQCOM( program, shadertype, source, length);
}

void glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glStartTilingQCOM( x, y, width, height, preserveMask);
}

void glEndTilingQCOM(GLbitfield preserveMask)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glEndTilingQCOM( preserveMask);
}

void glVertexAttribPointerData(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void* data, GLuint datalen)
{
	RedFinger_glVertexAttribPointerData( indx, size, type, normalized, stride, data, datalen);
}

void glVertexAttribPointerOffset(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint offset)
{
	RedFinger_glVertexAttribPointerOffset( indx, size, type, normalized, stride, offset);
}

void glDrawElementsOffset(GLenum mode, GLsizei count, GLenum type, GLuint offset)
{
	RedFinger_glDrawElementsOffset( mode, count, type, offset);
}

void glDrawElementsData(GLenum mode, GLsizei count, GLenum type, void* data, GLuint datalen)
{
	RedFinger_glDrawElementsData( mode, count, type, data, datalen);
}

void glGetCompressedTextureFormats(int count, GLint* formats)
{
	RedFinger_glGetCompressedTextureFormats( count, formats);
}

void glShaderString(GLuint shader, const GLchar* string, GLsizei len)
{
	RedFinger_glShaderString( shader, string, len);
}

int glFinishRoundTrip()
{
	return RedFinger_glFinishRoundTrip();
}

void glGenVertexArrays(GLsizei n, GLuint* arrays)
{
	RedFinger_glGenVertexArrays( n, arrays);
}

void glBindVertexArray(GLuint array)
{
	RedFinger_glBindVertexArray( array);
}

void glDeleteVertexArrays(GLsizei n, const GLuint* arrays)
{
	RedFinger_glDeleteVertexArrays( n, arrays);
}

GLboolean glIsVertexArray(GLuint array)
{
	return RedFinger_glIsVertexArray( array);
}

void* glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
	return RedFinger_glMapBufferRange( target, offset, length, access);
}

GLboolean glUnmapBuffer(GLenum target)
{
	return RedFinger_glUnmapBuffer( target);
}

void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
	RedFinger_glFlushMappedBufferRange( target, offset, length);
}

void glMapBufferRangeAEMU(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* mapped)
{
	RedFinger_glMapBufferRangeAEMU( target, offset, length, access, mapped);
}

void glUnmapBufferAEMU(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* guest_buffer, GLboolean* out_res)
{
	RedFinger_glUnmapBufferAEMU( target, offset, length, access, guest_buffer, out_res);
}

void glFlushMappedBufferRangeAEMU(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* guest_buffer)
{
	RedFinger_glFlushMappedBufferRangeAEMU( target, offset, length, access, guest_buffer);
}

void glReadPixelsOffsetAEMU(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLuint offset)
{
	RedFinger_glReadPixelsOffsetAEMU( x, y, width, height, format, type, offset);
}

void glCompressedTexImage2DOffsetAEMU(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLuint offset)
{
	RedFinger_glCompressedTexImage2DOffsetAEMU( target, level, internalformat, width, height, border, imageSize, offset);
}

void glCompressedTexSubImage2DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLuint offset)
{
	RedFinger_glCompressedTexSubImage2DOffsetAEMU( target, level, xoffset, yoffset, width, height, format, imageSize, offset);
}

void glTexImage2DOffsetAEMU(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLuint offset)
{
	RedFinger_glTexImage2DOffsetAEMU( target, level, internalformat, width, height, border, format, type, offset);
}

void glTexSubImage2DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLuint offset)
{
	RedFinger_glTexSubImage2DOffsetAEMU( target, level, xoffset, yoffset, width, height, format, type, offset);
}

void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	RedFinger_glBindBufferRange( target, index, buffer, offset, size);
}

void glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
	RedFinger_glBindBufferBase( target, index, buffer);
}

void glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
	RedFinger_glCopyBufferSubData( readtarget, writetarget, readoffset, writeoffset, size);
}

void glClearBufferiv(GLenum buffer, GLint drawBuffer, const GLint* value)
{
	RedFinger_glClearBufferiv( buffer, drawBuffer, value);
}

void glClearBufferuiv(GLenum buffer, GLint drawBuffer, const GLuint* value)
{
	RedFinger_glClearBufferuiv( buffer, drawBuffer, value);
}

void glClearBufferfv(GLenum buffer, GLint drawBuffer, const GLfloat* value)
{
	RedFinger_glClearBufferfv( buffer, drawBuffer, value);
}

void glClearBufferfi(GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil)
{
	RedFinger_glClearBufferfi( buffer, drawBuffer, depth, stencil);
}

void glGetBufferParameteri64v(GLenum target, GLenum value, GLint64* data)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetBufferParameteri64v( target, value, data);
}

void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid** params)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 ctx->glGetBufferPointerv( target, pname, params);
}

void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
	RedFinger_glUniformBlockBinding( program, uniformBlockIndex, uniformBlockBinding);
}

GLuint glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName)
{
	return RedFinger_glGetUniformBlockIndex( program, uniformBlockName);
}

void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar** var3, GLuint* uniformIndices)
{
	RedFinger_glGetUniformIndices( program, uniformCount, var3, uniformIndices);
}

void glGetUniformIndicesAEMU(GLuint program, GLsizei uniformCount, const GLchar* packedUniformNames, GLsizei packedLen, GLuint* uniformIndices)
{
	RedFinger_glGetUniformIndicesAEMU( program, uniformCount, packedUniformNames, packedLen, uniformIndices);
}

void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)
{
	RedFinger_glGetActiveUniformBlockiv( program, uniformBlockIndex, pname, params);
}

void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)
{
	RedFinger_glGetActiveUniformBlockName( program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

void glUniform1ui(GLint location, GLuint v0)
{
	RedFinger_glUniform1ui( location, v0);
}

void glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
	RedFinger_glUniform2ui( location, v0, v1);
}

void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
	RedFinger_glUniform3ui( location, v0, v1, v2);
}

void glUniform4ui(GLint location, GLint v0, GLuint v1, GLuint v2, GLuint v3)
{
	RedFinger_glUniform4ui( location, v0, v1, v2, v3);
}

void glUniform1uiv(GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glUniform1uiv( location, count, value);
}

void glUniform2uiv(GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glUniform2uiv( location, count, value);
}

void glUniform3uiv(GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glUniform3uiv( location, count, value);
}

void glUniform4uiv(GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glUniform4uiv( location, count, value);
}

void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix2x3fv( location, count, transpose, value);
}

void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix3x2fv( location, count, transpose, value);
}

void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix2x4fv( location, count, transpose, value);
}

void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix4x2fv( location, count, transpose, value);
}

void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix3x4fv( location, count, transpose, value);
}

void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glUniformMatrix4x3fv( location, count, transpose, value);
}

void glGetUniformuiv(GLuint program, GLint location, GLuint* params)
{
	RedFinger_glGetUniformuiv( program, location, params);
}

void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)
{
	RedFinger_glGetActiveUniformsiv( program, uniformCount, uniformIndices, pname, params);
}

void glVertexAttribI4i(GLuint index, GLint v0, GLint v1, GLint v2, GLint v3)
{
	RedFinger_glVertexAttribI4i( index, v0, v1, v2, v3);
}

void glVertexAttribI4ui(GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
	RedFinger_glVertexAttribI4ui( index, v0, v1, v2, v3);
}

void glVertexAttribI4iv(GLuint index, const GLint* v)
{
	RedFinger_glVertexAttribI4iv( index, v);
}

void glVertexAttribI4uiv(GLuint index, const GLuint* v)
{
	RedFinger_glVertexAttribI4uiv( index, v);
}

void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer)
{
	RedFinger_glVertexAttribIPointer( index, size, type, stride, pointer);
}

void glVertexAttribIPointerOffsetAEMU(GLuint index, GLint size, GLenum type, GLsizei stride, GLuint offset)
{
	RedFinger_glVertexAttribIPointerOffsetAEMU( index, size, type, stride, offset);
}

void glVertexAttribIPointerDataAEMU(GLuint index, GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{
	RedFinger_glVertexAttribIPointerDataAEMU( index, size, type, stride, data, datalen);
}

void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params)
{
	RedFinger_glGetVertexAttribIiv( index, pname, params);
}

void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params)
{
	RedFinger_glGetVertexAttribIuiv( index, pname, params);
}

void glVertexAttribDivisor(GLuint index, GLuint divisor)
{
	RedFinger_glVertexAttribDivisor( index, divisor);
}

void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
	RedFinger_glDrawArraysInstanced( mode, first, count, primcount);
}

void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)
{
	RedFinger_glDrawElementsInstanced( mode, count, type, indices, primcount);
}

void glDrawElementsInstancedDataAEMU(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount, GLsizei datalen)
{
	RedFinger_glDrawElementsInstancedDataAEMU( mode, count, type, indices, primcount, datalen);
}

void glDrawElementsInstancedOffsetAEMU(GLenum mode, GLsizei count, GLenum type, GLuint offset, GLsizei primcount)
{
	RedFinger_glDrawElementsInstancedOffsetAEMU( mode, count, type, offset, primcount);
}

void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices)
{
	RedFinger_glDrawRangeElements( mode, start, end, count, type, indices);
}

void glDrawRangeElementsDataAEMU(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices, GLsizei datalen)
{
	RedFinger_glDrawRangeElementsDataAEMU( mode, start, end, count, type, indices, datalen);
}

void glDrawRangeElementsOffsetAEMU(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLuint offset)
{
	RedFinger_glDrawRangeElementsOffsetAEMU( mode, start, end, count, type, offset);
}

GLsync glFenceSync(GLenum condition, GLbitfield flags)
{
	return RedFinger_glFenceSync( condition, flags);
}

GLenum glClientWaitSync(GLsync wait_on, GLbitfield flags, GLuint64 timeout)
{
	return RedFinger_glClientWaitSync( wait_on, flags, timeout);
}

void glWaitSync(GLsync wait_on, GLbitfield flags, GLuint64 timeout)
{
	RedFinger_glWaitSync( wait_on, flags, timeout);
}

void glDeleteSync(GLsync to_delete)
{
	RedFinger_glDeleteSync( to_delete);
}

GLboolean glIsSync(GLsync sync)
{
	return RedFinger_glIsSync( sync);
}

void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
{
	RedFinger_glGetSynciv( sync, pname, bufSize, length, values);
}

uint64_t glFenceSyncAEMU(GLenum condition, GLbitfield flags)
{
	return RedFinger_glFenceSyncAEMU( condition, flags);
}

GLenum glClientWaitSyncAEMU(uint64_t wait_on, GLbitfield flags, GLuint64 timeout)
{
	return RedFinger_glClientWaitSyncAEMU( wait_on, flags, timeout);
}

void glWaitSyncAEMU(uint64_t wait_on, GLbitfield flags, GLuint64 timeout)
{
	RedFinger_glWaitSyncAEMU( wait_on, flags, timeout);
}

void glDeleteSyncAEMU(uint64_t to_delete)
{
	RedFinger_glDeleteSyncAEMU( to_delete);
}

GLboolean glIsSyncAEMU(uint64_t sync)
{
	return RedFinger_glIsSyncAEMU( sync);
}

void glGetSyncivAEMU(uint64_t sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
{
	RedFinger_glGetSyncivAEMU( sync, pname, bufSize, length, values);
}

void glDrawBuffers(GLsizei n, const GLenum* bufs)
{
	RedFinger_glDrawBuffers( n, bufs);
}

void glReadBuffer(GLenum src)
{
	RedFinger_glReadBuffer( src);
}

void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
	RedFinger_glBlitFramebuffer( srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments)
{
	RedFinger_glInvalidateFramebuffer( target, numAttachments, attachments);
}

void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	RedFinger_glInvalidateSubFramebuffer( target, numAttachments, attachments, x, y, width, height);
}

void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
	RedFinger_glFramebufferTextureLayer( target, attachment, texture, level, layer);
}

void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	RedFinger_glRenderbufferStorageMultisample( target, samples, internalformat, width, height);
}

void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	RedFinger_glTexStorage2D( target, levels, internalformat, width, height);
}

void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)
{
	RedFinger_glGetInternalformativ( target, internalformat, pname, bufSize, params);
}

void glBeginTransformFeedback(GLenum primitiveMode)
{
	RedFinger_glBeginTransformFeedback( primitiveMode);
}

void glEndTransformFeedback()
{
	RedFinger_glEndTransformFeedback();
}

void glGenTransformFeedbacks(GLsizei n, GLuint* ids)
{
	RedFinger_glGenTransformFeedbacks( n, ids);
}

void glDeleteTransformFeedbacks(GLsizei n, const GLuint* ids)
{
	RedFinger_glDeleteTransformFeedbacks( n, ids);
}

void glBindTransformFeedback(GLenum target, GLuint id)
{
	RedFinger_glBindTransformFeedback( target, id);
}

void glPauseTransformFeedback()
{
	RedFinger_glPauseTransformFeedback();
}

void glResumeTransformFeedback()
{
	RedFinger_glResumeTransformFeedback();
}

GLboolean glIsTransformFeedback(GLuint id)
{
	return RedFinger_glIsTransformFeedback( id);
}

void glTransformFeedbackVaryings(GLuint program, GLsizei count, const char** var3, GLenum bufferMode)
{
	RedFinger_glTransformFeedbackVaryings( program, count, var3, bufferMode);
}

void glTransformFeedbackVaryingsAEMU(GLuint program, GLsizei count, const char* packedVaryings, GLuint packedVaryingsLen, GLenum bufferMode)
{
	RedFinger_glTransformFeedbackVaryingsAEMU( program, count, packedVaryings, packedVaryingsLen, bufferMode);
}

void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, char* name)
{
	RedFinger_glGetTransformFeedbackVarying( program, index, bufSize, length, size, type, name);
}

void glGenSamplers(GLsizei n, GLuint* samplers)
{
	RedFinger_glGenSamplers( n, samplers);
}

void glDeleteSamplers(GLsizei n, const GLuint* samplers)
{
	RedFinger_glDeleteSamplers( n, samplers);
}

void glBindSampler(GLuint unit, GLuint sampler)
{
	RedFinger_glBindSampler( unit, sampler);
}

void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
	RedFinger_glSamplerParameterf( sampler, pname, param);
}

void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
	RedFinger_glSamplerParameteri( sampler, pname, param);
}

void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* params)
{
	RedFinger_glSamplerParameterfv( sampler, pname, params);
}

void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* params)
{
	RedFinger_glSamplerParameteriv( sampler, pname, params);
}

void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params)
{
	RedFinger_glGetSamplerParameterfv( sampler, pname, params);
}

void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params)
{
	RedFinger_glGetSamplerParameteriv( sampler, pname, params);
}

GLboolean glIsSampler(GLuint sampler)
{
	return RedFinger_glIsSampler( sampler);
}

void glGenQueries(GLsizei n, GLuint* queries)
{
	RedFinger_glGenQueries( n, queries);
}

void glDeleteQueries(GLsizei n, const GLuint* queries)
{
	RedFinger_glDeleteQueries( n, queries);
}

void glBeginQuery(GLenum target, GLuint query)
{
	RedFinger_glBeginQuery( target, query);
}

void glEndQuery(GLenum target)
{
	RedFinger_glEndQuery( target);
}

void glGetQueryiv(GLenum target, GLenum pname, GLint* params)
{
	RedFinger_glGetQueryiv( target, pname, params);
}

void glGetQueryObjectuiv(GLuint query, GLenum pname, GLuint* params)
{
	RedFinger_glGetQueryObjectuiv( query, pname, params);
}

GLboolean glIsQuery(GLuint query)
{
	return RedFinger_glIsQuery( query);
}

void glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
	RedFinger_glProgramParameteri( program, pname, value);
}

void glProgramBinary(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length)
{
	RedFinger_glProgramBinary( program, binaryFormat, binary, length);
}

void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary)
{
	RedFinger_glGetProgramBinary( program, bufSize, length, binaryFormat, binary);
}

GLint glGetFragDataLocation(GLuint program, const char* name)
{
	return RedFinger_glGetFragDataLocation( program, name);
}

void glGetInteger64v(GLenum pname, GLint64* data)
{
	RedFinger_glGetInteger64v( pname, data);
}

void glGetIntegeri_v(GLenum target, GLuint index, GLint* data)
{
	RedFinger_glGetIntegeri_v( target, index, data);
}

void glGetInteger64i_v(GLenum target, GLuint index, GLint64* data)
{
	RedFinger_glGetInteger64i_v( target, index, data);
}

void glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* data)
{
	RedFinger_glTexImage3D( target, level, internalFormat, width, height, depth, border, format, type, data);
}

void glTexImage3DOffsetAEMU(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLuint offset)
{
	RedFinger_glTexImage3DOffsetAEMU( target, level, internalFormat, width, height, depth, border, format, type, offset);
}

void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	RedFinger_glTexStorage3D( target, levels, internalformat, width, height, depth);
}

void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* data)
{
	RedFinger_glTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

void glTexSubImage3DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLuint offset)
{
	RedFinger_glTexSubImage3DOffsetAEMU( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, offset);
}

void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
{
	RedFinger_glCompressedTexImage3D( target, level, internalformat, width, height, depth, border, imageSize, data);
}

void glCompressedTexImage3DOffsetAEMU(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLuint offset)
{
	RedFinger_glCompressedTexImage3DOffsetAEMU( target, level, internalformat, width, height, depth, border, imageSize, offset);
}

void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
{
	RedFinger_glCompressedTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void glCompressedTexSubImage3DOffsetAEMU(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLuint data)
{
	RedFinger_glCompressedTexSubImage3DOffsetAEMU( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	RedFinger_glCopyTexSubImage3D( target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

const GLubyte* glGetStringi(GLenum name, GLuint index)
{
	ALOGD("run function:%s,%d\n",__func__,__LINE__);
	GET_CONTEXT_wrapper; 
	 return ctx->glGetStringi( name, index);
}

void glGetBooleani_v(GLenum target, GLuint index, GLboolean* data)
{
	RedFinger_glGetBooleani_v( target, index, data);
}

void glMemoryBarrier(GLbitfield barriers)
{
	RedFinger_glMemoryBarrier( barriers);
}

void glMemoryBarrierByRegion(GLbitfield barriers)
{
	RedFinger_glMemoryBarrierByRegion( barriers);
}

void glGenProgramPipelines(GLsizei n, GLuint* pipelines)
{
	RedFinger_glGenProgramPipelines( n, pipelines);
}

void glDeleteProgramPipelines(GLsizei n, const GLuint* pipelines)
{
	RedFinger_glDeleteProgramPipelines( n, pipelines);
}

void glBindProgramPipeline(GLuint pipeline)
{
	RedFinger_glBindProgramPipeline( pipeline);
}

void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint* params)
{
	RedFinger_glGetProgramPipelineiv( pipeline, pname, params);
}

void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
{
	RedFinger_glGetProgramPipelineInfoLog( pipeline, bufSize, length, infoLog);
}

void glValidateProgramPipeline(GLuint pipeline)
{
	RedFinger_glValidateProgramPipeline( pipeline);
}

GLboolean glIsProgramPipeline(GLuint pipeline)
{
	return RedFinger_glIsProgramPipeline( pipeline);
}

void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
	RedFinger_glUseProgramStages( pipeline, stages, program);
}

void glActiveShaderProgram(GLuint pipeline, GLuint program)
{
	RedFinger_glActiveShaderProgram( pipeline, program);
}

GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const char** var3)
{
// by RedFinger tag:FuncInAEMUFuncs
	GET_CONTEXT_wrapper; 
	 return ctx->glCreateShaderProgramv( type, count, var3);
}

GLuint glCreateShaderProgramvAEMU(GLenum type, GLsizei count, const char* packedStrings, GLuint packedLen)
{
	return RedFinger_glCreateShaderProgramvAEMU( type, count, packedStrings, packedLen);
}

void glProgramUniform1f(GLuint program, GLint location, GLfloat v0)
{
	RedFinger_glProgramUniform1f( program, location, v0);
}

void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
	RedFinger_glProgramUniform2f( program, location, v0, v1);
}

void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	RedFinger_glProgramUniform3f( program, location, v0, v1, v2);
}

void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	RedFinger_glProgramUniform4f( program, location, v0, v1, v2, v3);
}

void glProgramUniform1i(GLuint program, GLint location, GLint v0)
{
	RedFinger_glProgramUniform1i( program, location, v0);
}

void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
{
	RedFinger_glProgramUniform2i( program, location, v0, v1);
}

void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
	RedFinger_glProgramUniform3i( program, location, v0, v1, v2);
}

void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	RedFinger_glProgramUniform4i( program, location, v0, v1, v2, v3);
}

void glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
	RedFinger_glProgramUniform1ui( program, location, v0);
}

void glProgramUniform2ui(GLuint program, GLint location, GLint v0, GLuint v1)
{
	RedFinger_glProgramUniform2ui( program, location, v0, v1);
}

void glProgramUniform3ui(GLuint program, GLint location, GLint v0, GLint v1, GLuint v2)
{
	RedFinger_glProgramUniform3ui( program, location, v0, v1, v2);
}

void glProgramUniform4ui(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLuint v3)
{
	RedFinger_glProgramUniform4ui( program, location, v0, v1, v2, v3);
}

void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	RedFinger_glProgramUniform1fv( program, location, count, value);
}

void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	RedFinger_glProgramUniform2fv( program, location, count, value);
}

void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	RedFinger_glProgramUniform3fv( program, location, count, value);
}

void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	RedFinger_glProgramUniform4fv( program, location, count, value);
}

void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	RedFinger_glProgramUniform1iv( program, location, count, value);
}

void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	RedFinger_glProgramUniform2iv( program, location, count, value);
}

void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	RedFinger_glProgramUniform3iv( program, location, count, value);
}

void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	RedFinger_glProgramUniform4iv( program, location, count, value);
}

void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glProgramUniform1uiv( program, location, count, value);
}

void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glProgramUniform2uiv( program, location, count, value);
}

void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glProgramUniform3uiv( program, location, count, value);
}

void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	RedFinger_glProgramUniform4uiv( program, location, count, value);
}

void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix2fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix3fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix4fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix2x3fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix3x2fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix2x4fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix4x2fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix3x4fv( program, location, count, transpose, value);
}

void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	RedFinger_glProgramUniformMatrix4x3fv( program, location, count, transpose, value);
}

void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint* params)
{
	RedFinger_glGetProgramInterfaceiv( program, programInterface, pname, params);
}

void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params)
{
	RedFinger_glGetProgramResourceiv( program, programInterface, index, propCount, props, bufSize, length, params);
}

GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const char* name)
{
	return RedFinger_glGetProgramResourceIndex( program, programInterface, name);
}

GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const char* name)
{
	return RedFinger_glGetProgramResourceLocation( program, programInterface, name);
}

void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, char* name)
{
	RedFinger_glGetProgramResourceName( program, programInterface, index, bufSize, length, name);
}

void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
	RedFinger_glBindImageTexture( unit, texture, level, layered, layer, access, format);
}

void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
	RedFinger_glDispatchCompute( num_groups_x, num_groups_y, num_groups_z);
}

void glDispatchComputeIndirect(GLintptr indirect)
{
	RedFinger_glDispatchComputeIndirect( indirect);
}

void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLintptr stride)
{
	RedFinger_glBindVertexBuffer( bindingindex, buffer, offset, stride);
}

void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
	RedFinger_glVertexAttribBinding( attribindex, bindingindex);
}

void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	RedFinger_glVertexAttribFormat( attribindex, size, type, normalized, relativeoffset);
}

void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	RedFinger_glVertexAttribIFormat( attribindex, size, type, relativeoffset);
}

void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
	RedFinger_glVertexBindingDivisor( bindingindex, divisor);
}

void glDrawArraysIndirect(GLenum mode, const void* indirect)
{
	RedFinger_glDrawArraysIndirect( mode, indirect);
}

void glDrawArraysIndirectDataAEMU(GLenum mode, const void* indirect, GLuint datalen)
{
	RedFinger_glDrawArraysIndirectDataAEMU( mode, indirect, datalen);
}

void glDrawArraysIndirectOffsetAEMU(GLenum mode, GLuint offset)
{
	RedFinger_glDrawArraysIndirectOffsetAEMU( mode, offset);
}

void glDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect)
{
	RedFinger_glDrawElementsIndirect( mode, type, indirect);
}

void glDrawElementsIndirectDataAEMU(GLenum mode, GLenum type, const void* indirect, GLuint datalen)
{
	RedFinger_glDrawElementsIndirectDataAEMU( mode, type, indirect, datalen);
}

void glDrawElementsIndirectOffsetAEMU(GLenum mode, GLenum type, GLuint offset)
{
	RedFinger_glDrawElementsIndirectOffsetAEMU( mode, type, offset);
}

void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	RedFinger_glTexStorage2DMultisample( target, samples, internalformat, width, height, fixedsamplelocations);
}

void glSampleMaski(GLuint maskNumber, GLbitfield mask)
{
	RedFinger_glSampleMaski( maskNumber, mask);
}

void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat* val)
{
	RedFinger_glGetMultisamplefv( pname, index, val);
}

void glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
	RedFinger_glFramebufferParameteri( target, pname, param);
}

void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint* params)
{
	RedFinger_glGetFramebufferParameteriv( target, pname, params);
}

void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params)
{
	RedFinger_glGetTexLevelParameterfv( target, level, pname, params);
}

void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params)
{
	RedFinger_glGetTexLevelParameteriv( target, level, pname, params);
}

