// Generated Code - DO NOT EDIT !!
// generated by 'emugen'


#include <string.h>
#include "gles_opcodes.h"

#include "gles_dec.h"


#include <stdio.h>

typedef unsigned int tsize_t; // Target "size_t", which is 32-bit for now. It may or may not be the same as host's size_t when emugen is compiled.

static unsigned int GETDWORD(unsigned char *ptr)
{
    return *(unsigned char *)(ptr+0)
        |(*(unsigned char *)(ptr+1)<<8)
        |(*(unsigned char *)(ptr+2)<<16)
        |(*(unsigned char *)(ptr+3)<<24);
}
static unsigned short GETWORD(unsigned char *ptr)
{
    return *(unsigned char *)(ptr+0)
        |(*(unsigned char *)(ptr+1)<<8);
}
static unsigned char GETBYTE(unsigned char *ptr)
{
    return *(unsigned char *)(ptr+0);
}
static khronos_float_t GETFLOAT(unsigned char *ptr)
{
    khronos_float_t tmp;
    memcpy(&tmp,ptr,sizeof(khronos_float_t));
    return tmp;
}
size_t gles_decoder_context_t::decode(void *buf, size_t len, IOStream *stream)
{
                           
	size_t pos = 0;
	if (len < 8) return pos; 
	unsigned char *ptr = (unsigned char *)buf;
	bool unknownOpcode = false;  
#ifdef CHECK_GL_ERROR 
	char lastCall[256] = {0}; 
#endif 
	while ((len - pos >= 8) && !unknownOpcode) {   
		int opcode = GETDWORD(ptr);   
		unsigned int packetLen = GETDWORD(ptr + 4);
		if (len - pos < packetLen)  return pos; 
		switch(opcode) {
			case OP_glActiveTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glActiveTexture(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glActiveTexture((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glActiveTexture");
#endif
			break;
			case OP_glAttachShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAttachShader(%u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glAttachShader((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAttachShader");
#endif
			break;
			case OP_glBindAttribLocation:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindAttribLocation(%u %u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (const GLchar*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glBindAttribLocation((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (const GLchar*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindAttribLocation");
#endif
			break;
			case OP_glBindBuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindBuffer(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindBuffer((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindBuffer");
#endif
			break;
			case OP_glBindFramebuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindFramebuffer(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindFramebuffer((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindFramebuffer");
#endif
			break;
			case OP_glBindRenderbuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindRenderbuffer(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindRenderbuffer((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindRenderbuffer");
#endif
			break;
			case OP_glBindTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindTexture(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindTexture((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindTexture");
#endif
			break;
			case OP_glBlendColor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendColor(%f %f %f %f )\n", stream,(GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBlendColor((GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendColor");
#endif
			break;
			case OP_glBlendEquation:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquation(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glBlendEquation((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquation");
#endif
			break;
			case OP_glBlendEquationSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquationSeparate(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
#endif
			this->glBlendEquationSeparate((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquationSeparate");
#endif
			break;
			case OP_glBlendFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendFunc(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
#endif
			this->glBlendFunc((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendFunc");
#endif
			break;
			case OP_glBlendFuncSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendFuncSeparate(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBlendFuncSeparate((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendFuncSeparate");
#endif
			break;
			case OP_glBufferData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBufferData(0x%08x %p %p(%u) 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizeiptr)GETDWORD(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glBufferData((GLenum)GETDWORD(ptr + 8), (GLsizeiptr)GETDWORD(ptr + 8 + 4), *((unsigned int *)(ptr + 8 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBufferData");
#endif
			break;
			case OP_glBufferSubData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBufferSubData(0x%08x %p %p %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBufferSubData((GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBufferSubData");
#endif
			break;
			case OP_glCheckFramebufferStatus:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCheckFramebufferStatus(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glCheckFramebufferStatus((GLenum)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCheckFramebufferStatus");
#endif
			break;
			case OP_glClear:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClear(0x%08x )\n", stream,(GLbitfield)GETDWORD(ptr + 8));
#endif
			this->glClear((GLbitfield)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClear");
#endif
			break;
			case OP_glClearColor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearColor(%f %f %f %f )\n", stream,(GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearColor((GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4), (GLclampf)GETFLOAT(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearColor");
#endif
			break;
			case OP_glClearDepthf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthf(%f )\n", stream,(GLclampf)GETFLOAT(ptr + 8));
#endif
			this->glClearDepthf((GLclampf)GETFLOAT(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthf");
#endif
			break;
			case OP_glClearStencil:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearStencil(%d )\n", stream,(GLint)GETDWORD(ptr + 8));
#endif
			this->glClearStencil((GLint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearStencil");
#endif
			break;
			case OP_glColorMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorMask(%d %d %d %d )\n", stream,(GLboolean)GETBYTE(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 1), (GLboolean)GETBYTE(ptr + 8 + 1 + 1), (GLboolean)GETBYTE(ptr + 8 + 1 + 1 + 1));
#endif
			this->glColorMask((GLboolean)GETBYTE(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 1), (GLboolean)GETBYTE(ptr + 8 + 1 + 1), (GLboolean)GETBYTE(ptr + 8 + 1 + 1 + 1));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorMask");
#endif
			break;
			case OP_glCompileShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompileShader(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glCompileShader((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompileShader");
#endif
			break;
			case OP_glCompressedTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage2D(0x%08x %d 0x%08x %d %d %d %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage2D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage2D");
#endif
			break;
			case OP_glCompressedTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage2D(0x%08x %d %d %d %d %d 0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage2D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage2D");
#endif
			break;
			case OP_glCopyTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexImage2D(0x%08x %d 0x%08x %d %d %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexImage2D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexImage2D");
#endif
			break;
			case OP_glCopyTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexSubImage2D(0x%08x %d %d %d %d %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexSubImage2D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexSubImage2D");
#endif
			break;
			case OP_glCreateProgram:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCreateProgram()\n", stream);
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glCreateProgram();
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCreateProgram");
#endif
			break;
			case OP_glCreateShader:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCreateShader(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glCreateShader((GLenum)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCreateShader");
#endif
			break;
			case OP_glCullFace:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCullFace(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glCullFace((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCullFace");
#endif
			break;
			case OP_glDeleteBuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteBuffers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteBuffers((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteBuffers");
#endif
			break;
			case OP_glDeleteFramebuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteFramebuffers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteFramebuffers((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteFramebuffers");
#endif
			break;
			case OP_glDeleteProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteProgram(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glDeleteProgram((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteProgram");
#endif
			break;
			case OP_glDeleteRenderbuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteRenderbuffers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteRenderbuffers((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteRenderbuffers");
#endif
			break;
			case OP_glDeleteShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteShader(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glDeleteShader((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteShader");
#endif
			break;
			case OP_glDeleteTextures:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteTextures(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteTextures((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteTextures");
#endif
			break;
			case OP_glDepthFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthFunc(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glDepthFunc((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthFunc");
#endif
			break;
			case OP_glDepthMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthMask(%d )\n", stream,(GLboolean)GETBYTE(ptr + 8));
#endif
			this->glDepthMask((GLboolean)GETBYTE(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthMask");
#endif
			break;
			case OP_glDepthRangef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangef(%f %f )\n", stream,(GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4));
#endif
			this->glDepthRangef((GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangef");
#endif
			break;
			case OP_glDetachShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDetachShader(%u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glDetachShader((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDetachShader");
#endif
			break;
			case OP_glDisable:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisable(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glDisable((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisable");
#endif
			break;
			case OP_glDisableVertexAttribArray:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisableVertexAttribArray(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glDisableVertexAttribArray((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisableVertexAttribArray");
#endif
			break;
			case OP_glDrawArrays:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawArrays(0x%08x %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glDrawArrays((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawArrays");
#endif
			break;
			case OP_glDrawElements:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElements(0x%08x %d 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glDrawElements((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElements");
#endif
			break;
			case OP_glEnable:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnable(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glEnable((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnable");
#endif
			break;
			case OP_glEnableVertexAttribArray:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnableVertexAttribArray(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glEnableVertexAttribArray((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnableVertexAttribArray");
#endif
			break;
			case OP_glFinish:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinish()\n", stream);
#endif
			this->glFinish();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinish");
#endif
			break;
			case OP_glFlush:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFlush()\n", stream);
#endif
			this->glFlush();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFlush");
#endif
			break;
			case OP_glFramebufferRenderbuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferRenderbuffer(0x%08x 0x%08x 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glFramebufferRenderbuffer((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferRenderbuffer");
#endif
			break;
			case OP_glFramebufferTexture2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture2D(0x%08x 0x%08x 0x%08x %u %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture2D((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture2D");
#endif
			break;
			case OP_glFrontFace:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrontFace(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glFrontFace((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrontFace");
#endif
			break;
			case OP_glGenBuffers:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenBuffers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenBuffers((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenBuffers");
#endif
			break;
			case OP_glGenerateMipmap:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenerateMipmap(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glGenerateMipmap((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenerateMipmap");
#endif
			break;
			case OP_glGenFramebuffers:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenFramebuffers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenFramebuffers((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenFramebuffers");
#endif
			break;
			case OP_glGenRenderbuffers:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenRenderbuffers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenRenderbuffers((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenRenderbuffers");
#endif
			break;
			case OP_glGenTextures:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenTextures(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenTextures((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenTextures");
#endif
			break;
			case OP_glGetActiveAttrib:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			size_t tmpPtr5Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr5Size;
			size_t tmpPtr6Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr6Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
			unsigned char *tmpPtr5 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size];
			memset(tmpPtr5, 0, 4);
			unsigned char *tmpPtr6 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size + tmpPtr5Size];
			memset(tmpPtr6, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetActiveAttrib(%u %u %d %p(%u) %p(%u) %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLenum*)(tmpPtr5), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLchar*)(tmpPtr6), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glGetActiveAttrib((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), tmpPtr3Size == 0 ? NULL : (GLsizei*)(tmpPtr3), tmpPtr4Size == 0 ? NULL : (GLint*)(tmpPtr4), tmpPtr5Size == 0 ? NULL : (GLenum*)(tmpPtr5), tmpPtr6Size == 0 ? NULL : (GLchar*)(tmpPtr6));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetActiveAttrib");
#endif
			break;
			case OP_glGetActiveUniform:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			size_t tmpPtr5Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr5Size;
			size_t tmpPtr6Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr6Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
			unsigned char *tmpPtr5 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size];
			memset(tmpPtr5, 0, 4);
			unsigned char *tmpPtr6 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size + tmpPtr5Size];
			memset(tmpPtr6, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetActiveUniform(%u %u %d %p(%u) %p(%u) %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLenum*)(tmpPtr5), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLchar*)(tmpPtr6), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glGetActiveUniform((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), tmpPtr3Size == 0 ? NULL : (GLsizei*)(tmpPtr3), tmpPtr4Size == 0 ? NULL : (GLint*)(tmpPtr4), tmpPtr5Size == 0 ? NULL : (GLenum*)(tmpPtr5), tmpPtr6Size == 0 ? NULL : (GLchar*)(tmpPtr6));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetActiveUniform");
#endif
			break;
			case OP_glGetAttachedShaders:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetAttachedShaders(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLuint*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetAttachedShaders((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLuint*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetAttachedShaders");
#endif
			break;
			case OP_glGetAttribLocation:
			{
			size_t totalTmpSize = sizeof(int);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetAttribLocation(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			*(int *)(&tmpBuf[0]) = 			this->glGetAttribLocation((GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetAttribLocation");
#endif
			break;
			case OP_glGetBooleanv:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBooleanv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLboolean*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetBooleanv((GLenum)GETDWORD(ptr + 8), (GLboolean*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBooleanv");
#endif
			break;
			case OP_glGetBufferParameteriv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBufferParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetBufferParameteriv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBufferParameteriv");
#endif
			break;
			case OP_glGetError:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetError()\n", stream);
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glGetError();
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetError");
#endif
			break;
			case OP_glGetFloatv:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFloatv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfloat*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetFloatv((GLenum)GETDWORD(ptr + 8), (GLfloat*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFloatv");
#endif
			break;
			case OP_glGetFramebufferAttachmentParameteriv:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFramebufferAttachmentParameteriv(0x%08x 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetFramebufferAttachmentParameteriv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFramebufferAttachmentParameteriv");
#endif
			break;
			case OP_glGetIntegerv:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetIntegerv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetIntegerv((GLenum)GETDWORD(ptr + 8), (GLint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetIntegerv");
#endif
			break;
			case OP_glGetProgramiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramiv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetProgramiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramiv");
#endif
			break;
			case OP_glGetProgramInfoLog:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramInfoLog(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetProgramInfoLog((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramInfoLog");
#endif
			break;
			case OP_glGetRenderbufferParameteriv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetRenderbufferParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetRenderbufferParameteriv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetRenderbufferParameteriv");
#endif
			break;
			case OP_glGetShaderiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderiv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetShaderiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderiv");
#endif
			break;
			case OP_glGetShaderInfoLog:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderInfoLog(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetShaderInfoLog((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderInfoLog");
#endif
			break;
			case OP_glGetShaderPrecisionFormat:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderPrecisionFormat(0x%08x 0x%08x %p(%u) %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetShaderPrecisionFormat((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), (GLint*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderPrecisionFormat");
#endif
			break;
			case OP_glGetShaderSource:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderSource(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetShaderSource((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderSource");
#endif
			break;
			case OP_glGetString:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetString(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glGetString((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetString");
#endif
			break;
			case OP_glGetTexParameterfv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameterfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameterfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameterfv");
#endif
			break;
			case OP_glGetTexParameteriv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameteriv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameteriv");
#endif
			break;
			case OP_glGetUniformfv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformfv(%u %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetUniformfv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformfv");
#endif
			break;
			case OP_glGetUniformiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformiv(%u %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetUniformiv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformiv");
#endif
			break;
			case OP_glGetUniformLocation:
			{
			size_t totalTmpSize = sizeof(int);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformLocation(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			*(int *)(&tmpBuf[0]) = 			this->glGetUniformLocation((GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformLocation");
#endif
			break;
			case OP_glGetVertexAttribfv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribfv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribfv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribfv");
#endif
			break;
			case OP_glGetVertexAttribiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribiv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribiv");
#endif
			break;
			case OP_glGetVertexAttribPointerv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribPointerv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribPointerv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribPointerv");
#endif
			break;
			case OP_glHint:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glHint(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
#endif
			this->glHint((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glHint");
#endif
			break;
			case OP_glIsBuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsBuffer(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsBuffer((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsBuffer");
#endif
			break;
			case OP_glIsEnabled:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsEnabled(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsEnabled((GLenum)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsEnabled");
#endif
			break;
			case OP_glIsFramebuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsFramebuffer(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsFramebuffer((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsFramebuffer");
#endif
			break;
			case OP_glIsProgram:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsProgram(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsProgram((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsProgram");
#endif
			break;
			case OP_glIsRenderbuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsRenderbuffer(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsRenderbuffer((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsRenderbuffer");
#endif
			break;
			case OP_glIsShader:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsShader(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsShader((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsShader");
#endif
			break;
			case OP_glIsTexture:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsTexture(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsTexture((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsTexture");
#endif
			break;
			case OP_glLineWidth:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLineWidth(%f )\n", stream,(GLfloat)GETFLOAT(ptr + 8));
#endif
			this->glLineWidth((GLfloat)GETFLOAT(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLineWidth");
#endif
			break;
			case OP_glLinkProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLinkProgram(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glLinkProgram((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLinkProgram");
#endif
			break;
			case OP_glPixelStorei:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPixelStorei(0x%08x %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4));
#endif
			this->glPixelStorei((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPixelStorei");
#endif
			break;
			case OP_glPolygonOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPolygonOffset(%f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
#endif
			this->glPolygonOffset((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPolygonOffset");
#endif
			break;
			case OP_glReadPixels:
			{
			size_t tmpPtr6Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr6Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr6 = &tmpBuf[0];
			memset(tmpPtr6, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glReadPixels(%d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr6), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glReadPixels((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr6));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glReadPixels");
#endif
			break;
			case OP_glReleaseShaderCompiler:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glReleaseShaderCompiler()\n", stream);
#endif
			this->glReleaseShaderCompiler();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glReleaseShaderCompiler");
#endif
			break;
			case OP_glRenderbufferStorage:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorage(0x%08x 0x%08x %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorage((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorage");
#endif
			break;
			case OP_glSampleCoverage:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleCoverage(%f %d )\n", stream,(GLclampf)GETFLOAT(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4));
#endif
			this->glSampleCoverage((GLclampf)GETFLOAT(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleCoverage");
#endif
			break;
			case OP_glScissor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScissor(%d %d %d %d )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glScissor((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScissor");
#endif
			break;
			case OP_glShaderBinary:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShaderBinary(%d %p(%u) 0x%08x %p(%u) %d )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (const GLvoid*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4)));
#endif
			this->glShaderBinary((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (const GLvoid*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShaderBinary");
#endif
			break;
			case OP_glShaderSource:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShaderSource(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLchar*const*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glShaderSource((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLchar*const*)(ptr + 8 + 4 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShaderSource");
#endif
			break;
			case OP_glStencilFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilFunc(0x%08x %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glStencilFunc((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilFunc");
#endif
			break;
			case OP_glStencilFuncSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilFuncSeparate(0x%08x 0x%08x %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glStencilFuncSeparate((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilFuncSeparate");
#endif
			break;
			case OP_glStencilMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilMask(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glStencilMask((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilMask");
#endif
			break;
			case OP_glStencilMaskSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilMaskSeparate(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glStencilMaskSeparate((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilMaskSeparate");
#endif
			break;
			case OP_glStencilOp:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilOp(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glStencilOp((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilOp");
#endif
			break;
			case OP_glStencilOpSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilOpSeparate(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glStencilOpSeparate((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilOpSeparate");
#endif
			break;
			case OP_glTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage2D(0x%08x %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage2D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage2D");
#endif
			break;
			case OP_glTexParameterf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterf(0x%08x 0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterf((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterf");
#endif
			break;
			case OP_glTexParameterfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterfv");
#endif
			break;
			case OP_glTexParameteri:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameteri(0x%08x 0x%08x %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexParameteri((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameteri");
#endif
			break;
			case OP_glTexParameteriv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexParameteriv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameteriv");
#endif
			break;
			case OP_glTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage2D(0x%08x %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage2D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage2D");
#endif
			break;
			case OP_glUniform1f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1f(%d %f )\n", stream,(GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
#endif
			this->glUniform1f((GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1f");
#endif
			break;
			case OP_glUniform1fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1fv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform1fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1fv");
#endif
			break;
			case OP_glUniform1i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1i(%d %d )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4));
#endif
			this->glUniform1i((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1i");
#endif
			break;
			case OP_glUniform1iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1iv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform1iv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1iv");
#endif
			break;
			case OP_glUniform2f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2f(%d %f %f )\n", stream,(GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glUniform2f((GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2f");
#endif
			break;
			case OP_glUniform2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2fv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform2fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2fv");
#endif
			break;
			case OP_glUniform2i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2i(%d %d %d )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform2i((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2i");
#endif
			break;
			case OP_glUniform2iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2iv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform2iv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2iv");
#endif
			break;
			case OP_glUniform3f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3f(%d %f %f %f )\n", stream,(GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
#endif
			this->glUniform3f((GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3f");
#endif
			break;
			case OP_glUniform3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3fv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform3fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3fv");
#endif
			break;
			case OP_glUniform3i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3i(%d %d %d %d )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glUniform3i((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3i");
#endif
			break;
			case OP_glUniform3iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3iv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform3iv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3iv");
#endif
			break;
			case OP_glUniform4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4f(%d %f %f %f %f )\n", stream,(GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glUniform4f((GLint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4f");
#endif
			break;
			case OP_glUniform4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4fv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform4fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4fv");
#endif
			break;
			case OP_glUniform4i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4i(%d %d %d %d %d )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glUniform4i((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4i");
#endif
			break;
			case OP_glUniform4iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4iv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform4iv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4iv");
#endif
			break;
			case OP_glUniformMatrix2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix2fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix2fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix2fv");
#endif
			break;
			case OP_glUniformMatrix3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix3fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix3fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix3fv");
#endif
			break;
			case OP_glUniformMatrix4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix4fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix4fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix4fv");
#endif
			break;
			case OP_glUseProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUseProgram(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glUseProgram((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUseProgram");
#endif
			break;
			case OP_glValidateProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glValidateProgram(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glValidateProgram((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glValidateProgram");
#endif
			break;
			case OP_glVertexAttrib1f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib1f(%u %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
#endif
			this->glVertexAttrib1f((GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib1f");
#endif
			break;
			case OP_glVertexAttrib1fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib1fv(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttrib1fv((GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib1fv");
#endif
			break;
			case OP_glVertexAttrib2f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib2f(%u %f %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glVertexAttrib2f((GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib2f");
#endif
			break;
			case OP_glVertexAttrib2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib2fv(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttrib2fv((GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib2fv");
#endif
			break;
			case OP_glVertexAttrib3f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib3f(%u %f %f %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
#endif
			this->glVertexAttrib3f((GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib3f");
#endif
			break;
			case OP_glVertexAttrib3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib3fv(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttrib3fv((GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib3fv");
#endif
			break;
			case OP_glVertexAttrib4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib4f(%u %f %f %f %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glVertexAttrib4f((GLuint)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib4f");
#endif
			break;
			case OP_glVertexAttrib4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib4fv(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttrib4fv((GLuint)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib4fv");
#endif
			break;
			case OP_glVertexAttribPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribPointer(%u %d 0x%08x %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4));
#endif
			this->glVertexAttribPointer((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribPointer");
#endif
			break;
			case OP_glViewport:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glViewport(%d %d %d %d )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glViewport((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glViewport");
#endif
			break;
			case OP_glEGLImageTargetTexture2DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEGLImageTargetTexture2DOES(0x%08x %p )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLeglImageOES)GETDWORD(ptr + 8 + 4));
#endif
			this->glEGLImageTargetTexture2DOES((GLenum)GETDWORD(ptr + 8), (GLeglImageOES)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEGLImageTargetTexture2DOES");
#endif
			break;
			case OP_glEGLImageTargetRenderbufferStorageOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEGLImageTargetRenderbufferStorageOES(0x%08x %p )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLeglImageOES)GETDWORD(ptr + 8 + 4));
#endif
			this->glEGLImageTargetRenderbufferStorageOES((GLenum)GETDWORD(ptr + 8), (GLeglImageOES)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEGLImageTargetRenderbufferStorageOES");
#endif
			break;
			case OP_glGetProgramBinaryOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramBinaryOES(%u %d %p(%u) %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLenum*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4))));
#endif
			this->glGetProgramBinaryOES((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), (GLenum*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramBinaryOES");
#endif
			break;
			case OP_glProgramBinaryOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramBinaryOES(%u 0x%08x %p(%u) %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glProgramBinaryOES((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramBinaryOES");
#endif
			break;
			case OP_glMapBufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMapBufferOES(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
#endif
			this->glMapBufferOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMapBufferOES");
#endif
			break;
			case OP_glUnmapBufferOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUnmapBufferOES(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glUnmapBufferOES((GLenum)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUnmapBufferOES");
#endif
			break;
			case OP_glTexImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage3DOES(0x%08x %d 0x%08x %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage3DOES((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage3DOES");
#endif
			break;
			case OP_glTexSubImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage3DOES(0x%08x %d %d %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage3DOES((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage3DOES");
#endif
			break;
			case OP_glCopyTexSubImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexSubImage3DOES(0x%08x %d %d %d %d %d %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexSubImage3DOES((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexSubImage3DOES");
#endif
			break;
			case OP_glCompressedTexImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage3DOES(0x%08x %d 0x%08x %d %d %d %d %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage3DOES((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage3DOES");
#endif
			break;
			case OP_glCompressedTexSubImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage3DOES(0x%08x %d %d %d %d %d %d %d 0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage3DOES((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage3DOES");
#endif
			break;
			case OP_glFramebufferTexture3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture3DOES(0x%08x 0x%08x 0x%08x %u %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture3DOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture3DOES");
#endif
			break;
			case OP_glBindVertexArrayOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindVertexArrayOES(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glBindVertexArrayOES((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindVertexArrayOES");
#endif
			break;
			case OP_glDeleteVertexArraysOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteVertexArraysOES(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteVertexArraysOES((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteVertexArraysOES");
#endif
			break;
			case OP_glGenVertexArraysOES:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenVertexArraysOES(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenVertexArraysOES((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenVertexArraysOES");
#endif
			break;
			case OP_glIsVertexArrayOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsVertexArrayOES(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsVertexArrayOES((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsVertexArrayOES");
#endif
			break;
			case OP_glDiscardFramebufferEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDiscardFramebufferEXT(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glDiscardFramebufferEXT((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDiscardFramebufferEXT");
#endif
			break;
			case OP_glMultiDrawArraysEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawArraysEXT(0x%08x %p(%u) %p(%u) %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (const GLsizei*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4))));
#endif
			this->glMultiDrawArraysEXT((GLenum)GETDWORD(ptr + 8), (const GLint*)(ptr + 8 + 4 + 4), (const GLsizei*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4))));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawArraysEXT");
#endif
			break;
			case OP_glMultiDrawElementsEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawElementsEXT(0x%08x %p(%u) 0x%08x %p(%u) %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (const GLvoid*const*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4)));
#endif
			this->glMultiDrawElementsEXT((GLenum)GETDWORD(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (const GLvoid*const*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawElementsEXT");
#endif
			break;
			case OP_glGetPerfMonitorGroupsAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorGroupsAMD(%p(%u) %d %p(%u) )\n", stream,(GLint*)(ptr + 8 + 4), GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4 + (tsize_t)GETDWORD(ptr +8)), (GLuint*)(ptr + 8 + 4 + (tsize_t)GETDWORD(ptr +8) + 4 + 4), GETDWORD(ptr + 8 + 4 + (tsize_t)GETDWORD(ptr +8) + 4));
#endif
			this->glGetPerfMonitorGroupsAMD((GLint*)(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + (tsize_t)GETDWORD(ptr +8)), (GLuint*)(ptr + 8 + 4 + (tsize_t)GETDWORD(ptr +8) + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorGroupsAMD");
#endif
			break;
			case OP_glGetPerfMonitorCountersAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCountersAMD(%u %p(%u) %p(%u) %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4))), (GLuint*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)) + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)) + 4));
#endif
			this->glGetPerfMonitorCountersAMD((GLuint)GETDWORD(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4))), (GLuint*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)) + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCountersAMD");
#endif
			break;
			case OP_glGetPerfMonitorGroupStringAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorGroupStringAMD(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glGetPerfMonitorGroupStringAMD((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorGroupStringAMD");
#endif
			break;
			case OP_glGetPerfMonitorCounterStringAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCounterStringAMD(%u %u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glGetPerfMonitorCounterStringAMD((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCounterStringAMD");
#endif
			break;
			case OP_glGetPerfMonitorCounterInfoAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCounterInfoAMD(%u %u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetPerfMonitorCounterInfoAMD((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCounterInfoAMD");
#endif
			break;
			case OP_glGenPerfMonitorsAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenPerfMonitorsAMD(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenPerfMonitorsAMD((GLsizei)GETDWORD(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenPerfMonitorsAMD");
#endif
			break;
			case OP_glDeletePerfMonitorsAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeletePerfMonitorsAMD(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeletePerfMonitorsAMD((GLsizei)GETDWORD(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeletePerfMonitorsAMD");
#endif
			break;
			case OP_glSelectPerfMonitorCountersAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSelectPerfMonitorCountersAMD(%u %d %u %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 1), (GLint)GETDWORD(ptr + 8 + 4 + 1 + 4), (GLuint*)(ptr + 8 + 4 + 1 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 1 + 4 + 4));
#endif
			this->glSelectPerfMonitorCountersAMD((GLuint)GETDWORD(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 1), (GLint)GETDWORD(ptr + 8 + 4 + 1 + 4), (GLuint*)(ptr + 8 + 4 + 1 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSelectPerfMonitorCountersAMD");
#endif
			break;
			case OP_glBeginPerfMonitorAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBeginPerfMonitorAMD(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glBeginPerfMonitorAMD((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBeginPerfMonitorAMD");
#endif
			break;
			case OP_glEndPerfMonitorAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEndPerfMonitorAMD(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glEndPerfMonitorAMD((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEndPerfMonitorAMD");
#endif
			break;
			case OP_glGetPerfMonitorCounterDataAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCounterDataAMD(%u 0x%08x %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glGetPerfMonitorCounterDataAMD((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCounterDataAMD");
#endif
			break;
			case OP_glRenderbufferStorageMultisampleIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorageMultisampleIMG(0x%08x %d 0x%08x %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorageMultisampleIMG((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorageMultisampleIMG");
#endif
			break;
			case OP_glFramebufferTexture2DMultisampleIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture2DMultisampleIMG(0x%08x 0x%08x 0x%08x %u %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture2DMultisampleIMG((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture2DMultisampleIMG");
#endif
			break;
			case OP_glDeleteFencesNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteFencesNV(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteFencesNV((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteFencesNV");
#endif
			break;
			case OP_glGenFencesNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenFencesNV(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenFencesNV((GLsizei)GETDWORD(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenFencesNV");
#endif
			break;
			case OP_glIsFenceNV:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsFenceNV(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsFenceNV((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsFenceNV");
#endif
			break;
			case OP_glTestFenceNV:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTestFenceNV(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glTestFenceNV((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTestFenceNV");
#endif
			break;
			case OP_glGetFenceivNV:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFenceivNV(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetFenceivNV((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFenceivNV");
#endif
			break;
			case OP_glFinishFenceNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinishFenceNV(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glFinishFenceNV((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinishFenceNV");
#endif
			break;
			case OP_glSetFenceNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSetFenceNV(%u 0x%08x )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
#endif
			this->glSetFenceNV((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSetFenceNV");
#endif
			break;
			case OP_glCoverageMaskNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCoverageMaskNV(%d )\n", stream,(GLboolean)GETBYTE(ptr + 8));
#endif
			this->glCoverageMaskNV((GLboolean)GETBYTE(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCoverageMaskNV");
#endif
			break;
			case OP_glCoverageOperationNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCoverageOperationNV(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glCoverageOperationNV((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCoverageOperationNV");
#endif
			break;
			case OP_glGetDriverControlsQCOM:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetDriverControlsQCOM(%p(%u) %d %p(%u) )\n", stream,(GLint*)(tmpPtr0), GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetDriverControlsQCOM((GLint*)(tmpPtr0), (GLsizei)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetDriverControlsQCOM");
#endif
			break;
			case OP_glGetDriverControlStringQCOM:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetDriverControlStringQCOM(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetDriverControlStringQCOM((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetDriverControlStringQCOM");
#endif
			break;
			case OP_glEnableDriverControlQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnableDriverControlQCOM(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glEnableDriverControlQCOM((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnableDriverControlQCOM");
#endif
			break;
			case OP_glDisableDriverControlQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisableDriverControlQCOM(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glDisableDriverControlQCOM((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisableDriverControlQCOM");
#endif
			break;
			case OP_glExtGetTexturesQCOM:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexturesQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glExtGetTexturesQCOM((GLuint*)(tmpPtr0), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexturesQCOM");
#endif
			break;
			case OP_glExtGetBuffersQCOM:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetBuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glExtGetBuffersQCOM((GLuint*)(tmpPtr0), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetBuffersQCOM");
#endif
			break;
			case OP_glExtGetRenderbuffersQCOM:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetRenderbuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glExtGetRenderbuffersQCOM((GLuint*)(tmpPtr0), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetRenderbuffersQCOM");
#endif
			break;
			case OP_glExtGetFramebuffersQCOM:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetFramebuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glExtGetFramebuffersQCOM((GLuint*)(tmpPtr0), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetFramebuffersQCOM");
#endif
			break;
			case OP_glExtGetTexLevelParameterivQCOM:
			{
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr4 = &tmpBuf[0];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexLevelParameterivQCOM(%u 0x%08x %d 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glExtGetTexLevelParameterivQCOM((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexLevelParameterivQCOM");
#endif
			break;
			case OP_glExtTexObjectStateOverrideiQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtTexObjectStateOverrideiQCOM(0x%08x 0x%08x %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glExtTexObjectStateOverrideiQCOM((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtTexObjectStateOverrideiQCOM");
#endif
			break;
			case OP_glExtGetTexSubImageQCOM:
			{
			size_t tmpPtr10Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr10Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr10 = &tmpBuf[0];
			memset(tmpPtr10, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexSubImageQCOM(0x%08x %d %d %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr10), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glExtGetTexSubImageQCOM((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr10));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexSubImageQCOM");
#endif
			break;
			case OP_glExtGetBufferPointervQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetBufferPointervQCOM(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLvoidptr*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glExtGetBufferPointervQCOM((GLenum)GETDWORD(ptr + 8), (GLvoidptr*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetBufferPointervQCOM");
#endif
			break;
			case OP_glExtGetShadersQCOM:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetShadersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glExtGetShadersQCOM((GLuint*)(tmpPtr0), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetShadersQCOM");
#endif
			break;
			case OP_glExtGetProgramsQCOM:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetProgramsQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glExtGetProgramsQCOM((GLuint*)(tmpPtr0), (GLint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetProgramsQCOM");
#endif
			break;
			case OP_glExtIsProgramBinaryQCOM:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtIsProgramBinaryQCOM(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glExtIsProgramBinaryQCOM((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtIsProgramBinaryQCOM");
#endif
			break;
			case OP_glExtGetProgramBinarySourceQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetProgramBinarySourceQCOM(%u 0x%08x %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glExtGetProgramBinarySourceQCOM((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetProgramBinarySourceQCOM");
#endif
			break;
			case OP_glStartTilingQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStartTilingQCOM(%u %u %u %u 0x%08x )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glStartTilingQCOM((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStartTilingQCOM");
#endif
			break;
			case OP_glEndTilingQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEndTilingQCOM(0x%08x )\n", stream,(GLbitfield)GETDWORD(ptr + 8));
#endif
			this->glEndTilingQCOM((GLbitfield)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEndTilingQCOM");
#endif
			break;
			case OP_glVertexAttribPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribPointerData(%u %d 0x%08x %d %d %p(%u) %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (void*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 1 + 4)));
#endif
			this->glVertexAttribPointerData((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (void*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 1 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribPointerData");
#endif
			break;
			case OP_glVertexAttribPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribPointerOffset(%u %d 0x%08x %d %d %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4));
#endif
			this->glVertexAttribPointerOffset((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribPointerOffset");
#endif
			break;
			case OP_glDrawElementsOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsOffset(0x%08x %d 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glDrawElementsOffset((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsOffset");
#endif
			break;
			case OP_glDrawElementsData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsData(0x%08x %d 0x%08x %p(%u) %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glDrawElementsData((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsData");
#endif
			break;
			case OP_glGetCompressedTextureFormats:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetCompressedTextureFormats(%d %p(%u) )\n", stream,(int)GETDWORD(ptr + 8), (GLint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetCompressedTextureFormats((int)GETDWORD(ptr + 8), (GLint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetCompressedTextureFormats");
#endif
			break;
			case OP_glShaderString:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShaderString(%u %p(%u) %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)));
#endif
			this->glShaderString((GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShaderString");
#endif
			break;
			case OP_glFinishRoundTrip:
			{
			size_t totalTmpSize = sizeof(int);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinishRoundTrip()\n", stream);
#endif
			*(int *)(&tmpBuf[0]) = 			this->glFinishRoundTrip();
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinishRoundTrip");
#endif
			break;
			case OP_glGenVertexArrays:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenVertexArrays(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenVertexArrays((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenVertexArrays");
#endif
			break;
			case OP_glBindVertexArray:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindVertexArray(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glBindVertexArray((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindVertexArray");
#endif
			break;
			case OP_glDeleteVertexArrays:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteVertexArrays(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteVertexArrays((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteVertexArrays");
#endif
			break;
			case OP_glIsVertexArray:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsVertexArray(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsVertexArray((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsVertexArray");
#endif
			break;
			case OP_glMapBufferRange:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMapBufferRange(0x%08x %p %p 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glMapBufferRange((GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMapBufferRange");
#endif
			break;
			case OP_glUnmapBuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUnmapBuffer(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glUnmapBuffer((GLenum)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUnmapBuffer");
#endif
			break;
			case OP_glFlushMappedBufferRange:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFlushMappedBufferRange(0x%08x %p %p )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glFlushMappedBufferRange((GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFlushMappedBufferRange");
#endif
			break;
			case OP_glMapBufferRangeAEMU:
			{
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr4 = &tmpBuf[0];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMapBufferRangeAEMU(0x%08x %p %p 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glMapBufferRangeAEMU((GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4), tmpPtr4Size == 0 ? NULL : (void*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMapBufferRangeAEMU");
#endif
			break;
			case OP_glUnmapBufferAEMU:
			{
			size_t tmpPtr5Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4));
			size_t totalTmpSize = tmpPtr5Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr5 = &tmpBuf[0];
			memset(tmpPtr5, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUnmapBufferAEMU(0x%08x %p %p 0x%08x %p(%u) %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLboolean*)(tmpPtr5), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4)));
#endif
			this->glUnmapBufferAEMU((GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4)) == 0 ? NULL : (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLboolean*)(tmpPtr5));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUnmapBufferAEMU");
#endif
			break;
			case OP_glFlushMappedBufferRangeAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFlushMappedBufferRangeAEMU(0x%08x %p %p 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glFlushMappedBufferRangeAEMU((GLenum)GETDWORD(ptr + 8), (GLintptr)GETDWORD(ptr + 8 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4)) == 0 ? NULL : (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFlushMappedBufferRangeAEMU");
#endif
			break;
			case OP_glReadPixelsOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glReadPixelsOffsetAEMU(%d %d %d %d 0x%08x 0x%08x %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glReadPixelsOffsetAEMU((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glReadPixelsOffsetAEMU");
#endif
			break;
			case OP_glCompressedTexImage2DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage2DOffsetAEMU(0x%08x %d 0x%08x %d %d %d %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage2DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage2DOffsetAEMU");
#endif
			break;
			case OP_glCompressedTexSubImage2DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage2DOffsetAEMU(0x%08x %d %d %d %d %d 0x%08x %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage2DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage2DOffsetAEMU");
#endif
			break;
			case OP_glTexImage2DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage2DOffsetAEMU(0x%08x %d %d %d %d %d 0x%08x 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage2DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage2DOffsetAEMU");
#endif
			break;
			case OP_glTexSubImage2DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage2DOffsetAEMU(0x%08x %d %d %d %d %d 0x%08x 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage2DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage2DOffsetAEMU");
#endif
			break;
			case OP_glBindBufferRange:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindBufferRange(0x%08x %u %u %p %p )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glBindBufferRange((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindBufferRange");
#endif
			break;
			case OP_glBindBufferBase:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindBufferBase(0x%08x %u %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glBindBufferBase((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindBufferBase");
#endif
			break;
			case OP_glCopyBufferSubData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyBufferSubData(0x%08x 0x%08x %p %p %p )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glCopyBufferSubData((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizeiptr)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyBufferSubData");
#endif
			break;
			case OP_glClearBufferiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearBufferiv(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glClearBufferiv((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearBufferiv");
#endif
			break;
			case OP_glClearBufferuiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearBufferuiv(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glClearBufferuiv((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearBufferuiv");
#endif
			break;
			case OP_glClearBufferfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearBufferfv(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glClearBufferfv((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearBufferfv");
#endif
			break;
			case OP_glClearBufferfi:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearBufferfi(0x%08x %d %f %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearBufferfi((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearBufferfi");
#endif
			break;
			case OP_glGetBufferParameteri64v:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBufferParameteri64v(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint64*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetBufferParameteri64v((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint64*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBufferParameteri64v");
#endif
			break;
			case OP_glGetBufferPointerv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBufferPointerv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetBufferPointerv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBufferPointerv");
#endif
			break;
			case OP_glUniformBlockBinding:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformBlockBinding(%u %u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniformBlockBinding((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformBlockBinding");
#endif
			break;
			case OP_glGetUniformBlockIndex:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformBlockIndex(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glGetUniformBlockIndex((GLuint)GETDWORD(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformBlockIndex");
#endif
			break;
			case OP_glGetUniformIndices:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformIndices(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLchar**)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLuint*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glGetUniformIndices((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLchar**)(ptr + 8 + 4 + 4 + 4), (GLuint*)(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformIndices");
#endif
			break;
			case OP_glGetUniformIndicesAEMU:
			{
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4);
			size_t totalTmpSize = tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr4 = &tmpBuf[0];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformIndicesAEMU(%u %d %p(%u) %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLchar*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLuint*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
#endif
			this->glGetUniformIndicesAEMU((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLchar*)(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLuint*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformIndicesAEMU");
#endif
			break;
			case OP_glGetActiveUniformBlockiv:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetActiveUniformBlockiv(%u %u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetActiveUniformBlockiv((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetActiveUniformBlockiv");
#endif
			break;
			case OP_glGetActiveUniformBlockName:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetActiveUniformBlockName(%u %u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLchar*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glGetActiveUniformBlockName((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), tmpPtr3Size == 0 ? NULL : (GLsizei*)(tmpPtr3), tmpPtr4Size == 0 ? NULL : (GLchar*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetActiveUniformBlockName");
#endif
			break;
			case OP_glUniform1ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1ui(%d %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glUniform1ui((GLint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1ui");
#endif
			break;
			case OP_glUniform2ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2ui(%d %u %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform2ui((GLint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2ui");
#endif
			break;
			case OP_glUniform3ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3ui(%d %u %u %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glUniform3ui((GLint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3ui");
#endif
			break;
			case OP_glUniform4ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4ui(%d %d %u %u %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glUniform4ui((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4ui");
#endif
			break;
			case OP_glUniform1uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1uiv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform1uiv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1uiv");
#endif
			break;
			case OP_glUniform2uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2uiv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform2uiv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2uiv");
#endif
			break;
			case OP_glUniform3uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3uiv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform3uiv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3uiv");
#endif
			break;
			case OP_glUniform4uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4uiv(%d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUniform4uiv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4uiv");
#endif
			break;
			case OP_glUniformMatrix2x3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix2x3fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix2x3fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix2x3fv");
#endif
			break;
			case OP_glUniformMatrix3x2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix3x2fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix3x2fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix3x2fv");
#endif
			break;
			case OP_glUniformMatrix2x4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix2x4fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix2x4fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix2x4fv");
#endif
			break;
			case OP_glUniformMatrix4x2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix4x2fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix4x2fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix4x2fv");
#endif
			break;
			case OP_glUniformMatrix3x4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix3x4fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix3x4fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix3x4fv");
#endif
			break;
			case OP_glUniformMatrix4x3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix4x3fv(%d %d %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix4x3fv((GLint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix4x3fv");
#endif
			break;
			case OP_glGetUniformuiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformuiv(%u %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetUniformuiv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformuiv");
#endif
			break;
			case OP_glGetActiveUniformsiv:
			{
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4);
			size_t totalTmpSize = tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr4 = &tmpBuf[0];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetActiveUniformsiv(%u %d %p(%u) 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLint*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
#endif
			this->glGetActiveUniformsiv((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLint*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetActiveUniformsiv");
#endif
			break;
			case OP_glVertexAttribI4i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribI4i(%u %d %d %d %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glVertexAttribI4i((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribI4i");
#endif
			break;
			case OP_glVertexAttribI4ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribI4ui(%u %u %u %u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glVertexAttribI4ui((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribI4ui");
#endif
			break;
			case OP_glVertexAttribI4iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribI4iv(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttribI4iv((GLuint)GETDWORD(ptr + 8), (const GLint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribI4iv");
#endif
			break;
			case OP_glVertexAttribI4uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribI4uiv(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttribI4uiv((GLuint)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribI4uiv");
#endif
			break;
			case OP_glVertexAttribIPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribIPointer(%u %d 0x%08x %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glVertexAttribIPointer((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribIPointer");
#endif
			break;
			case OP_glVertexAttribIPointerOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribIPointerOffsetAEMU(%u %d 0x%08x %d %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glVertexAttribIPointerOffsetAEMU((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribIPointerOffsetAEMU");
#endif
			break;
			case OP_glVertexAttribIPointerDataAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribIPointerDataAEMU(%u %d 0x%08x %d %p(%u) %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4)));
#endif
			this->glVertexAttribIPointerDataAEMU((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribIPointerDataAEMU");
#endif
			break;
			case OP_glGetVertexAttribIiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribIiv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribIiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribIiv");
#endif
			break;
			case OP_glGetVertexAttribIuiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribIuiv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribIuiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribIuiv");
#endif
			break;
			case OP_glVertexAttribDivisor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribDivisor(%u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttribDivisor((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribDivisor");
#endif
			break;
			case OP_glDrawArraysInstanced:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawArraysInstanced(0x%08x %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glDrawArraysInstanced((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawArraysInstanced");
#endif
			break;
			case OP_glDrawElementsInstanced:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsInstanced(0x%08x %d 0x%08x %p(%u) %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (const void*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glDrawElementsInstanced((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (const void*)(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsInstanced");
#endif
			break;
			case OP_glDrawElementsInstancedDataAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsInstancedDataAEMU(0x%08x %d 0x%08x %p(%u) %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (const void*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4));
#endif
			this->glDrawElementsInstancedDataAEMU((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (const void*)(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsInstancedDataAEMU");
#endif
			break;
			case OP_glDrawElementsInstancedOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsInstancedOffsetAEMU(0x%08x %d 0x%08x %u %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glDrawElementsInstancedOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsInstancedOffsetAEMU");
#endif
			break;
			case OP_glDrawRangeElements:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawRangeElements(0x%08x %u %u %d 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glDrawRangeElements((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawRangeElements");
#endif
			break;
			case OP_glDrawRangeElementsDataAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawRangeElementsDataAEMU(0x%08x %u %u %d 0x%08x %p(%u) %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4 + 4)));
#endif
			this->glDrawRangeElementsDataAEMU((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawRangeElementsDataAEMU");
#endif
			break;
			case OP_glDrawRangeElementsOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawRangeElementsOffsetAEMU(0x%08x %u %u %d 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glDrawRangeElementsOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawRangeElementsOffsetAEMU");
#endif
			break;
			case OP_glFenceSync:
			{
			size_t totalTmpSize = sizeof(GLsync);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFenceSync(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4));
#endif
			*(GLsync *)(&tmpBuf[0]) = 			this->glFenceSync((GLenum)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFenceSync");
#endif
			break;
			case OP_glClientWaitSync:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClientWaitSync(0x%x 0x%08x %lld )\n", stream,(GLsync)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4), (GLuint64)GETDWORD(ptr + 8 + 4 + 4));
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glClientWaitSync((GLsync)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4), (GLuint64)GETDWORD(ptr + 8 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClientWaitSync");
#endif
			break;
			case OP_glWaitSync:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWaitSync(0x%x 0x%08x %lld )\n", stream,(GLsync)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4), (GLuint64)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glWaitSync((GLsync)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4), (GLuint64)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWaitSync");
#endif
			break;
			case OP_glDeleteSync:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteSync(0x%x )\n", stream,(GLsync)GETDWORD(ptr + 8));
#endif
			this->glDeleteSync((GLsync)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteSync");
#endif
			break;
			case OP_glIsSync:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsSync(0x%x )\n", stream,(GLsync)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsSync((GLsync)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsSync");
#endif
			break;
			case OP_glGetSynciv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetSynciv(0x%x 0x%08x %d %p(%u) %p(%u) )\n", stream,(GLsync)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glGetSynciv((GLsync)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetSynciv");
#endif
			break;
			case OP_glFenceSyncAEMU:
			{
			size_t totalTmpSize = sizeof(uint64_t);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFenceSyncAEMU(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4));
#endif
			*(uint64_t *)(&tmpBuf[0]) = 			this->glFenceSyncAEMU((GLenum)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFenceSyncAEMU");
#endif
			break;
			case OP_glClientWaitSyncAEMU:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClientWaitSyncAEMU(%lld 0x%08x %lld )\n", stream,(uint64_t)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 8), (GLuint64)GETDWORD(ptr + 8 + 8 + 4));
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glClientWaitSyncAEMU((uint64_t)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 8), (GLuint64)GETDWORD(ptr + 8 + 8 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClientWaitSyncAEMU");
#endif
			break;
			case OP_glWaitSyncAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWaitSyncAEMU(%lld 0x%08x %lld )\n", stream,(uint64_t)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 8), (GLuint64)GETDWORD(ptr + 8 + 8 + 4));
#endif
			this->glWaitSyncAEMU((uint64_t)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 8), (GLuint64)GETDWORD(ptr + 8 + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWaitSyncAEMU");
#endif
			break;
			case OP_glDeleteSyncAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteSyncAEMU(%lld )\n", stream,(uint64_t)GETDWORD(ptr + 8));
#endif
			this->glDeleteSyncAEMU((uint64_t)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteSyncAEMU");
#endif
			break;
			case OP_glIsSyncAEMU:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsSyncAEMU(%lld )\n", stream,(uint64_t)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsSyncAEMU((uint64_t)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsSyncAEMU");
#endif
			break;
			case OP_glGetSyncivAEMU:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetSyncivAEMU(%lld 0x%08x %d %p(%u) %p(%u) )\n", stream,(uint64_t)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 8), (GLsizei)GETDWORD(ptr + 8 + 8 + 4), (GLsizei*)(tmpPtr3), GETDWORD(ptr + 8 + 8 + 4 + 4), (GLint*)(tmpPtr4), GETDWORD(ptr + 8 + 8 + 4 + 4 + 4));
#endif
			this->glGetSyncivAEMU((uint64_t)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 8), (GLsizei)GETDWORD(ptr + 8 + 8 + 4), tmpPtr3Size == 0 ? NULL : (GLsizei*)(tmpPtr3), (GLint*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetSyncivAEMU");
#endif
			break;
			case OP_glDrawBuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawBuffers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLenum*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDrawBuffers((GLsizei)GETDWORD(ptr + 8), (const GLenum*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawBuffers");
#endif
			break;
			case OP_glReadBuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glReadBuffer(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glReadBuffer((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glReadBuffer");
#endif
			break;
			case OP_glBlitFramebuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlitFramebuffer(%d %d %d %d %d %d %d %d 0x%08x 0x%08x )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glBlitFramebuffer((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLbitfield)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlitFramebuffer");
#endif
			break;
			case OP_glInvalidateFramebuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glInvalidateFramebuffer(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glInvalidateFramebuffer((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glInvalidateFramebuffer");
#endif
			break;
			case OP_glInvalidateSubFramebuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glInvalidateSubFramebuffer(0x%08x %d %p(%u) %d %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4 + 4 + 4));
#endif
			this->glInvalidateSubFramebuffer((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glInvalidateSubFramebuffer");
#endif
			break;
			case OP_glFramebufferTextureLayer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTextureLayer(0x%08x 0x%08x %u %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTextureLayer((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTextureLayer");
#endif
			break;
			case OP_glRenderbufferStorageMultisample:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorageMultisample(0x%08x %d 0x%08x %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorageMultisample((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorageMultisample");
#endif
			break;
			case OP_glTexStorage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexStorage2D(0x%08x %d 0x%08x %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glTexStorage2D((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexStorage2D");
#endif
			break;
			case OP_glGetInternalformativ:
			{
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr4 = &tmpBuf[0];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetInternalformativ(0x%08x 0x%08x 0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glGetInternalformativ((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetInternalformativ");
#endif
			break;
			case OP_glBeginTransformFeedback:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBeginTransformFeedback(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glBeginTransformFeedback((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBeginTransformFeedback");
#endif
			break;
			case OP_glEndTransformFeedback:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEndTransformFeedback()\n", stream);
#endif
			this->glEndTransformFeedback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEndTransformFeedback");
#endif
			break;
			case OP_glGenTransformFeedbacks:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenTransformFeedbacks(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenTransformFeedbacks((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenTransformFeedbacks");
#endif
			break;
			case OP_glDeleteTransformFeedbacks:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteTransformFeedbacks(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteTransformFeedbacks((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteTransformFeedbacks");
#endif
			break;
			case OP_glBindTransformFeedback:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindTransformFeedback(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindTransformFeedback((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindTransformFeedback");
#endif
			break;
			case OP_glPauseTransformFeedback:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPauseTransformFeedback()\n", stream);
#endif
			this->glPauseTransformFeedback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPauseTransformFeedback");
#endif
			break;
			case OP_glResumeTransformFeedback:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glResumeTransformFeedback()\n", stream);
#endif
			this->glResumeTransformFeedback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glResumeTransformFeedback");
#endif
			break;
			case OP_glIsTransformFeedback:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsTransformFeedback(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsTransformFeedback((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsTransformFeedback");
#endif
			break;
			case OP_glTransformFeedbackVaryings:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTransformFeedbackVaryings(%u %d %p(%u) 0x%08x )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char**)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glTransformFeedbackVaryings((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char**)(ptr + 8 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTransformFeedbackVaryings");
#endif
			break;
			case OP_glTransformFeedbackVaryingsAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTransformFeedbackVaryingsAEMU(%u %d %p(%u) %u 0x%08x )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
#endif
			this->glTransformFeedbackVaryingsAEMU((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4) + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTransformFeedbackVaryingsAEMU");
#endif
			break;
			case OP_glGetTransformFeedbackVarying:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			size_t tmpPtr5Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr5Size;
			size_t tmpPtr6Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr6Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
			unsigned char *tmpPtr5 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size];
			memset(tmpPtr5, 0, 4);
			unsigned char *tmpPtr6 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size + tmpPtr5Size];
			memset(tmpPtr6, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTransformFeedbackVarying(%u %u %d %p(%u) %p(%u) %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLenum*)(tmpPtr5), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (char*)(tmpPtr6), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glGetTransformFeedbackVarying((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), tmpPtr3Size == 0 ? NULL : (GLsizei*)(tmpPtr3), (GLsizei*)(tmpPtr4), tmpPtr5Size == 0 ? NULL : (GLenum*)(tmpPtr5), tmpPtr6Size == 0 ? NULL : (char*)(tmpPtr6));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTransformFeedbackVarying");
#endif
			break;
			case OP_glGenSamplers:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenSamplers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenSamplers((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenSamplers");
#endif
			break;
			case OP_glDeleteSamplers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteSamplers(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteSamplers((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteSamplers");
#endif
			break;
			case OP_glBindSampler:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindSampler(%u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindSampler((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindSampler");
#endif
			break;
			case OP_glSamplerParameterf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSamplerParameterf(%u 0x%08x %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glSamplerParameterf((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSamplerParameterf");
#endif
			break;
			case OP_glSamplerParameteri:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSamplerParameteri(%u 0x%08x %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glSamplerParameteri((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSamplerParameteri");
#endif
			break;
			case OP_glSamplerParameterfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSamplerParameterfv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glSamplerParameterfv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSamplerParameterfv");
#endif
			break;
			case OP_glSamplerParameteriv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSamplerParameteriv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glSamplerParameteriv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSamplerParameteriv");
#endif
			break;
			case OP_glGetSamplerParameterfv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetSamplerParameterfv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetSamplerParameterfv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetSamplerParameterfv");
#endif
			break;
			case OP_glGetSamplerParameteriv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetSamplerParameteriv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetSamplerParameteriv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetSamplerParameteriv");
#endif
			break;
			case OP_glIsSampler:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsSampler(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsSampler((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsSampler");
#endif
			break;
			case OP_glGenQueries:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenQueries(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenQueries((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenQueries");
#endif
			break;
			case OP_glDeleteQueries:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteQueries(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteQueries((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteQueries");
#endif
			break;
			case OP_glBeginQuery:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBeginQuery(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBeginQuery((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBeginQuery");
#endif
			break;
			case OP_glEndQuery:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEndQuery(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glEndQuery((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEndQuery");
#endif
			break;
			case OP_glGetQueryiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetQueryiv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetQueryiv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetQueryiv");
#endif
			break;
			case OP_glGetQueryObjectuiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetQueryObjectuiv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetQueryObjectuiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetQueryObjectuiv");
#endif
			break;
			case OP_glIsQuery:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsQuery(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsQuery((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsQuery");
#endif
			break;
			case OP_glProgramParameteri:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramParameteri(%u 0x%08x %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glProgramParameteri((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramParameteri");
#endif
			break;
			case OP_glProgramBinary:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramBinary(%u 0x%08x %p(%u) %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const void*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glProgramBinary((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const void*)(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramBinary");
#endif
			break;
			case OP_glGetProgramBinary:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr2Size + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramBinary(%u %d %p(%u) %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLenum*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glGetProgramBinary((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLenum*)(tmpPtr3), (void*)(tmpPtr4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramBinary");
#endif
			break;
			case OP_glGetFragDataLocation:
			{
			size_t totalTmpSize = sizeof(GLint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFragDataLocation(%u %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (const char*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			*(GLint *)(&tmpBuf[0]) = 			this->glGetFragDataLocation((GLuint)GETDWORD(ptr + 8), (const char*)(ptr + 8 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFragDataLocation");
#endif
			break;
			case OP_glGetInteger64v:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 8);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetInteger64v(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint64*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetInteger64v((GLenum)GETDWORD(ptr + 8), (GLint64*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetInteger64v");
#endif
			break;
			case OP_glGetIntegeri_v:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetIntegeri_v(0x%08x %u %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetIntegeri_v((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetIntegeri_v");
#endif
			break;
			case OP_glGetInteger64i_v:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 8);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetInteger64i_v(0x%08x %u %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLint64*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetInteger64i_v((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLint64*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetInteger64i_v");
#endif
			break;
			case OP_glTexImage3D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage3D(0x%08x %d %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage3D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage3D");
#endif
			break;
			case OP_glTexImage3DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage3DOffsetAEMU(0x%08x %d %d %d %d %d %d 0x%08x 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage3DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage3DOffsetAEMU");
#endif
			break;
			case OP_glTexStorage3D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexStorage3D(0x%08x %d 0x%08x %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexStorage3D((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexStorage3D");
#endif
			break;
			case OP_glTexSubImage3D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage3D(0x%08x %d %d %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage3D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage3D");
#endif
			break;
			case OP_glTexSubImage3DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage3DOffsetAEMU(0x%08x %d %d %d %d %d %d %d 0x%08x 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage3DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage3DOffsetAEMU");
#endif
			break;
			case OP_glCompressedTexImage3D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage3D(0x%08x %d 0x%08x %d %d %d %d %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage3D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage3D");
#endif
			break;
			case OP_glCompressedTexImage3DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage3DOffsetAEMU(0x%08x %d 0x%08x %d %d %d %d %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage3DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage3DOffsetAEMU");
#endif
			break;
			case OP_glCompressedTexSubImage3D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage3D(0x%08x %d %d %d %d %d %d %d 0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage3D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage3D");
#endif
			break;
			case OP_glCompressedTexSubImage3DOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage3DOffsetAEMU(0x%08x %d %d %d %d %d %d %d 0x%08x %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage3DOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage3DOffsetAEMU");
#endif
			break;
			case OP_glCopyTexSubImage3D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexSubImage3D(0x%08x %d %d %d %d %d %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexSubImage3D((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexSubImage3D");
#endif
			break;
			case OP_glGetStringi:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetStringi(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glGetStringi((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetStringi");
#endif
			break;
			case OP_glGetBooleani_v:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBooleani_v(0x%08x %u %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLboolean*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetBooleani_v((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLboolean*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBooleani_v");
#endif
			break;
			case OP_glMemoryBarrier:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMemoryBarrier(0x%08x )\n", stream,(GLbitfield)GETDWORD(ptr + 8));
#endif
			this->glMemoryBarrier((GLbitfield)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMemoryBarrier");
#endif
			break;
			case OP_glMemoryBarrierByRegion:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMemoryBarrierByRegion(0x%08x )\n", stream,(GLbitfield)GETDWORD(ptr + 8));
#endif
			this->glMemoryBarrierByRegion((GLbitfield)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMemoryBarrierByRegion");
#endif
			break;
			case OP_glGenProgramPipelines:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenProgramPipelines(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenProgramPipelines((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenProgramPipelines");
#endif
			break;
			case OP_glDeleteProgramPipelines:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteProgramPipelines(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteProgramPipelines((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteProgramPipelines");
#endif
			break;
			case OP_glBindProgramPipeline:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindProgramPipeline(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glBindProgramPipeline((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindProgramPipeline");
#endif
			break;
			case OP_glGetProgramPipelineiv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramPipelineiv(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetProgramPipelineiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramPipelineiv");
#endif
			break;
			case OP_glGetProgramPipelineInfoLog:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramPipelineInfoLog(%u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLsizei*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetProgramPipelineInfoLog((GLuint)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramPipelineInfoLog");
#endif
			break;
			case OP_glValidateProgramPipeline:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glValidateProgramPipeline(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glValidateProgramPipeline((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glValidateProgramPipeline");
#endif
			break;
			case OP_glIsProgramPipeline:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsProgramPipeline(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsProgramPipeline((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsProgramPipeline");
#endif
			break;
			case OP_glUseProgramStages:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUseProgramStages(%u 0x%08x %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glUseProgramStages((GLuint)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUseProgramStages");
#endif
			break;
			case OP_glActiveShaderProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glActiveShaderProgram(%u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glActiveShaderProgram((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glActiveShaderProgram");
#endif
			break;
			case OP_glCreateShaderProgramv:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCreateShaderProgramv(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char**)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glCreateShaderProgramv((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char**)(ptr + 8 + 4 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCreateShaderProgramv");
#endif
			break;
			case OP_glCreateShaderProgramvAEMU:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCreateShaderProgramvAEMU(0x%08x %d %p(%u) %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glCreateShaderProgramvAEMU((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCreateShaderProgramvAEMU");
#endif
			break;
			case OP_glProgramUniform1f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform1f(%u %d %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glProgramUniform1f((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform1f");
#endif
			break;
			case OP_glProgramUniform2f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform2f(%u %d %f %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform2f((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform2f");
#endif
			break;
			case OP_glProgramUniform3f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform3f(%u %d %f %f %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glProgramUniform3f((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform3f");
#endif
			break;
			case OP_glProgramUniform4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform4f(%u %d %f %f %f %f )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glProgramUniform4f((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform4f");
#endif
			break;
			case OP_glProgramUniform1i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform1i(%u %d %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glProgramUniform1i((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform1i");
#endif
			break;
			case OP_glProgramUniform2i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform2i(%u %d %d %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform2i((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform2i");
#endif
			break;
			case OP_glProgramUniform3i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform3i(%u %d %d %d %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glProgramUniform3i((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform3i");
#endif
			break;
			case OP_glProgramUniform4i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform4i(%u %d %d %d %d %d )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glProgramUniform4i((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform4i");
#endif
			break;
			case OP_glProgramUniform1ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform1ui(%u %d %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glProgramUniform1ui((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform1ui");
#endif
			break;
			case OP_glProgramUniform2ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform2ui(%u %d %d %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform2ui((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform2ui");
#endif
			break;
			case OP_glProgramUniform3ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform3ui(%u %d %d %d %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glProgramUniform3ui((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform3ui");
#endif
			break;
			case OP_glProgramUniform4ui:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform4ui(%u %d %d %d %d %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glProgramUniform4ui((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform4ui");
#endif
			break;
			case OP_glProgramUniform1fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform1fv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform1fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform1fv");
#endif
			break;
			case OP_glProgramUniform2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform2fv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform2fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform2fv");
#endif
			break;
			case OP_glProgramUniform3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform3fv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform3fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform3fv");
#endif
			break;
			case OP_glProgramUniform4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform4fv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform4fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform4fv");
#endif
			break;
			case OP_glProgramUniform1iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform1iv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform1iv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform1iv");
#endif
			break;
			case OP_glProgramUniform2iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform2iv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform2iv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform2iv");
#endif
			break;
			case OP_glProgramUniform3iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform3iv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform3iv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform3iv");
#endif
			break;
			case OP_glProgramUniform4iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform4iv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform4iv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform4iv");
#endif
			break;
			case OP_glProgramUniform1uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform1uiv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform1uiv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform1uiv");
#endif
			break;
			case OP_glProgramUniform2uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform2uiv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform2uiv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform2uiv");
#endif
			break;
			case OP_glProgramUniform3uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform3uiv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform3uiv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform3uiv");
#endif
			break;
			case OP_glProgramUniform4uiv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniform4uiv(%u %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glProgramUniform4uiv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLuint*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniform4uiv");
#endif
			break;
			case OP_glProgramUniformMatrix2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix2fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix2fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix2fv");
#endif
			break;
			case OP_glProgramUniformMatrix3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix3fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix3fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix3fv");
#endif
			break;
			case OP_glProgramUniformMatrix4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix4fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix4fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix4fv");
#endif
			break;
			case OP_glProgramUniformMatrix2x3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix2x3fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix2x3fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix2x3fv");
#endif
			break;
			case OP_glProgramUniformMatrix3x2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix3x2fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix3x2fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix3x2fv");
#endif
			break;
			case OP_glProgramUniformMatrix2x4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix2x4fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix2x4fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix2x4fv");
#endif
			break;
			case OP_glProgramUniformMatrix4x2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix4x2fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix4x2fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix4x2fv");
#endif
			break;
			case OP_glProgramUniformMatrix3x4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix3x4fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix3x4fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix3x4fv");
#endif
			break;
			case OP_glProgramUniformMatrix4x3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramUniformMatrix4x3fv(%u %d %d %d %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glProgramUniformMatrix4x3fv((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramUniformMatrix4x3fv");
#endif
			break;
			case OP_glGetProgramInterfaceiv:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramInterfaceiv(%u 0x%08x 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetProgramInterfaceiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramInterfaceiv");
#endif
			break;
			case OP_glGetProgramResourceiv:
			{
			size_t tmpPtr6Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4) + 4);
			size_t totalTmpSize = tmpPtr6Size;
			size_t tmpPtr7Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4) + 4 + 4);
			totalTmpSize += tmpPtr7Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr6 = &tmpBuf[0];
			memset(tmpPtr6, 0, 4);
			unsigned char *tmpPtr7 = &tmpBuf[0 + tmpPtr6Size];
			memset(tmpPtr7, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramResourceiv(%u 0x%08x %u %d %p(%u) %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4)), (GLsizei*)(tmpPtr6), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4) + 4), (GLint*)(tmpPtr7), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4) + 4 + 4));
#endif
			this->glGetProgramResourceiv((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4)), tmpPtr6Size == 0 ? NULL : (GLsizei*)(tmpPtr6), (GLint*)(tmpPtr7));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramResourceiv");
#endif
			break;
			case OP_glGetProgramResourceIndex:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramResourceIndex(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glGetProgramResourceIndex((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramResourceIndex");
#endif
			break;
			case OP_glGetProgramResourceLocation:
			{
			size_t totalTmpSize = sizeof(GLint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramResourceLocation(%u 0x%08x %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			*(GLint *)(&tmpBuf[0]) = 			this->glGetProgramResourceLocation((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const char*)(ptr + 8 + 4 + 4 + 4));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramResourceLocation");
#endif
			break;
			case OP_glGetProgramResourceName:
			{
			size_t tmpPtr4Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr4Size;
			size_t tmpPtr5Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr5Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr4 = &tmpBuf[0];
			memset(tmpPtr4, 0, 4);
			unsigned char *tmpPtr5 = &tmpBuf[0 + tmpPtr4Size];
			memset(tmpPtr5, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramResourceName(%u 0x%08x %u %d %p(%u) %p(%u) )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei*)(tmpPtr4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (char*)(tmpPtr5), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glGetProgramResourceName((GLuint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), tmpPtr4Size == 0 ? NULL : (GLsizei*)(tmpPtr4), (char*)(tmpPtr5));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramResourceName");
#endif
			break;
			case OP_glBindImageTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindImageTexture(%u %u %d %d %d 0x%08x 0x%08x )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4));
#endif
			this->glBindImageTexture((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindImageTexture");
#endif
			break;
			case OP_glDispatchCompute:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDispatchCompute(%u %u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glDispatchCompute((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDispatchCompute");
#endif
			break;
			case OP_glDispatchComputeIndirect:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDispatchComputeIndirect(%p )\n", stream,(GLintptr)GETDWORD(ptr + 8));
#endif
			this->glDispatchComputeIndirect((GLintptr)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDispatchComputeIndirect");
#endif
			break;
			case OP_glBindVertexBuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindVertexBuffer(%u %u %p %p )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBindVertexBuffer((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4), (GLintptr)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindVertexBuffer");
#endif
			break;
			case OP_glVertexAttribBinding:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribBinding(%u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexAttribBinding((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribBinding");
#endif
			break;
			case OP_glVertexAttribFormat:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribFormat(%u %d 0x%08x %d %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
#endif
			this->glVertexAttribFormat((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 1));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribFormat");
#endif
			break;
			case OP_glVertexAttribIFormat:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribIFormat(%u %d 0x%08x %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glVertexAttribIFormat((GLuint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribIFormat");
#endif
			break;
			case OP_glVertexBindingDivisor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexBindingDivisor(%u %u )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glVertexBindingDivisor((GLuint)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexBindingDivisor");
#endif
			break;
			case OP_glDrawArraysIndirect:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawArraysIndirect(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const void*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDrawArraysIndirect((GLenum)GETDWORD(ptr + 8), (const void*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawArraysIndirect");
#endif
			break;
			case OP_glDrawArraysIndirectDataAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawArraysIndirectDataAEMU(0x%08x %p(%u) %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (const void*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)));
#endif
			this->glDrawArraysIndirectDataAEMU((GLenum)GETDWORD(ptr + 8), (const void*)(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawArraysIndirectDataAEMU");
#endif
			break;
			case OP_glDrawArraysIndirectOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawArraysIndirectOffsetAEMU(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glDrawArraysIndirectOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawArraysIndirectOffsetAEMU");
#endif
			break;
			case OP_glDrawElementsIndirect:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsIndirect(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const void*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glDrawElementsIndirect((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const void*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsIndirect");
#endif
			break;
			case OP_glDrawElementsIndirectDataAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsIndirectDataAEMU(0x%08x 0x%08x %p(%u) %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const void*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glDrawElementsIndirectDataAEMU((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const void*)(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsIndirectDataAEMU");
#endif
			break;
			case OP_glDrawElementsIndirectOffsetAEMU:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsIndirectOffsetAEMU(0x%08x 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glDrawElementsIndirectOffsetAEMU((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsIndirectOffsetAEMU");
#endif
			break;
			case OP_glTexStorage2DMultisample:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexStorage2DMultisample(0x%08x %d 0x%08x %d %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexStorage2DMultisample((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLboolean)GETBYTE(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexStorage2DMultisample");
#endif
			break;
			case OP_glSampleMaski:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleMaski(%u 0x%08x )\n", stream,(GLuint)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4));
#endif
			this->glSampleMaski((GLuint)GETDWORD(ptr + 8), (GLbitfield)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleMaski");
#endif
			break;
			case OP_glGetMultisamplefv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetMultisamplefv(0x%08x %u %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetMultisamplefv((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetMultisamplefv");
#endif
			break;
			case OP_glFramebufferParameteri:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferParameteri(0x%08x 0x%08x %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glFramebufferParameteri((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferParameteri");
#endif
			break;
			case OP_glGetFramebufferParameteriv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFramebufferParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetFramebufferParameteriv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFramebufferParameteriv");
#endif
			break;
			case OP_glGetTexLevelParameterfv:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexLevelParameterfv(0x%08x %d 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLfloat*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetTexLevelParameterfv((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLfloat*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexLevelParameterfv");
#endif
			break;
			case OP_glGetTexLevelParameteriv:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexLevelParameteriv(0x%08x %d 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetTexLevelParameteriv((GLenum)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexLevelParameteriv");
#endif
			break;
			case OP_glAlphaFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAlphaFunc(0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4));
#endif
			this->glAlphaFunc((GLenum)GETDWORD(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAlphaFunc");
#endif
			break;
			case OP_glClipPlanef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanef(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glClipPlanef((GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanef");
#endif
			break;
			case OP_glColor4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4f(%f %f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColor4f((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4f");
#endif
			break;
			case OP_glFogf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogf(0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
#endif
			this->glFogf((GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogf");
#endif
			break;
			case OP_glFogfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogfv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glFogfv((GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogfv");
#endif
			break;
			case OP_glFrustumf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumf(%f %f %f %f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumf((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumf");
#endif
			break;
			case OP_glGetClipPlanef:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanef(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfloat*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetClipPlanef((GLenum)GETDWORD(ptr + 8), (GLfloat*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanef");
#endif
			break;
			case OP_glGetLightfv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetLightfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetLightfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetLightfv");
#endif
			break;
			case OP_glGetMaterialfv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetMaterialfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetMaterialfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetMaterialfv");
#endif
			break;
			case OP_glGetTexEnvfv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnvfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnvfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnvfv");
#endif
			break;
			case OP_glLightModelf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelf(0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
#endif
			this->glLightModelf((GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelf");
#endif
			break;
			case OP_glLightModelfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelfv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glLightModelfv((GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelfv");
#endif
			break;
			case OP_glLightf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightf(0x%08x 0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glLightf((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightf");
#endif
			break;
			case OP_glLightfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glLightfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightfv");
#endif
			break;
			case OP_glLoadMatrixf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadMatrixf(%p(%u) )\n", stream,(const GLfloat*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glLoadMatrixf((const GLfloat*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadMatrixf");
#endif
			break;
			case OP_glMaterialf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialf(0x%08x 0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glMaterialf((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialf");
#endif
			break;
			case OP_glMaterialfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glMaterialfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialfv");
#endif
			break;
			case OP_glMultMatrixf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultMatrixf(%p(%u) )\n", stream,(const GLfloat*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glMultMatrixf((const GLfloat*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultMatrixf");
#endif
			break;
			case OP_glMultiTexCoord4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiTexCoord4f(0x%08x %f %f %f %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glMultiTexCoord4f((GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiTexCoord4f");
#endif
			break;
			case OP_glNormal3f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormal3f(%f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glNormal3f((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormal3f");
#endif
			break;
			case OP_glOrthof:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthof(%f %f %f %f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthof((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthof");
#endif
			break;
			case OP_glPointParameterf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterf(0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
#endif
			this->glPointParameterf((GLenum)GETDWORD(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterf");
#endif
			break;
			case OP_glPointParameterfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterfv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glPointParameterfv((GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterfv");
#endif
			break;
			case OP_glPointSize:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSize(%f )\n", stream,(GLfloat)GETFLOAT(ptr + 8));
#endif
			this->glPointSize((GLfloat)GETFLOAT(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSize");
#endif
			break;
			case OP_glRotatef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRotatef(%f %f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRotatef((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRotatef");
#endif
			break;
			case OP_glScalef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScalef(%f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glScalef((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScalef");
#endif
			break;
			case OP_glTexEnvf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvf(0x%08x 0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvf((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvf");
#endif
			break;
			case OP_glTexEnvfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvfv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvfv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvfv");
#endif
			break;
			case OP_glTranslatef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTranslatef(%f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glTranslatef((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTranslatef");
#endif
			break;
			case OP_glAlphaFuncx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAlphaFuncx(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
#endif
			this->glAlphaFuncx((GLenum)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAlphaFuncx");
#endif
			break;
			case OP_glClearColorx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearColorx(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearColorx((GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearColorx");
#endif
			break;
			case OP_glClearDepthx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthx(0x%08x )\n", stream,(GLclampx)GETDWORD(ptr + 8));
#endif
			this->glClearDepthx((GLclampx)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthx");
#endif
			break;
			case OP_glClientActiveTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClientActiveTexture(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glClientActiveTexture((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClientActiveTexture");
#endif
			break;
			case OP_glColor4ub:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4ub(0x%02x 0x%02x 0x%02x 0x%02x )\n", stream,(GLubyte)GETDWORD(ptr + 8), (GLubyte)GETDWORD(ptr + 8 + 1), (GLubyte)GETDWORD(ptr + 8 + 1 + 1), (GLubyte)GETDWORD(ptr + 8 + 1 + 1 + 1));
#endif
			this->glColor4ub((GLubyte)GETDWORD(ptr + 8), (GLubyte)GETDWORD(ptr + 8 + 1), (GLubyte)GETDWORD(ptr + 8 + 1 + 1), (GLubyte)GETDWORD(ptr + 8 + 1 + 1 + 1));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4ub");
#endif
			break;
			case OP_glColor4x:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4x(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColor4x((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4x");
#endif
			break;
			case OP_glColorPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorPointer(%d 0x%08x %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColorPointer((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorPointer");
#endif
			break;
			case OP_glDepthRangex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangex(0x%08x 0x%08x )\n", stream,(GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
#endif
			this->glDepthRangex((GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangex");
#endif
			break;
			case OP_glDisableClientState:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisableClientState(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glDisableClientState((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisableClientState");
#endif
			break;
			case OP_glEnableClientState:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnableClientState(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glEnableClientState((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnableClientState");
#endif
			break;
			case OP_glFogx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogx(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glFogx((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogx");
#endif
			break;
			case OP_glFogxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogxv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glFogxv((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogxv");
#endif
			break;
			case OP_glFrustumx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumx(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumx((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumx");
#endif
			break;
			case OP_glClipPlanex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanex(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glClipPlanex((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanex");
#endif
			break;
			case OP_glGetFixedv:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFixedv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetFixedv((GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFixedv");
#endif
			break;
			case OP_glGetLightxv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetLightxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetLightxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetLightxv");
#endif
			break;
			case OP_glGetMaterialxv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetMaterialxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetMaterialxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetMaterialxv");
#endif
			break;
			case OP_glGetPointerv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPointerv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLvoid**)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetPointerv((GLenum)GETDWORD(ptr + 8), (GLvoid**)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPointerv");
#endif
			break;
			case OP_glGetTexEnviv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnviv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnviv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnviv");
#endif
			break;
			case OP_glGetTexEnvxv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnvxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnvxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnvxv");
#endif
			break;
			case OP_glGetTexParameterxv:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameterxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameterxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameterxv");
#endif
			break;
			case OP_glLightModelx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelx(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glLightModelx((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelx");
#endif
			break;
			case OP_glLightModelxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelxv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glLightModelxv((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelxv");
#endif
			break;
			case OP_glLightx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightx(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glLightx((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightx");
#endif
			break;
			case OP_glLightxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glLightxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightxv");
#endif
			break;
			case OP_glLineWidthx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLineWidthx(0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8));
#endif
			this->glLineWidthx((GLfixed)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLineWidthx");
#endif
			break;
			case OP_glLoadIdentity:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadIdentity()\n", stream);
#endif
			this->glLoadIdentity();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadIdentity");
#endif
			break;
			case OP_glLoadMatrixx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadMatrixx(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glLoadMatrixx((const GLfixed*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadMatrixx");
#endif
			break;
			case OP_glLogicOp:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLogicOp(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glLogicOp((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLogicOp");
#endif
			break;
			case OP_glMaterialx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialx(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glMaterialx((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialx");
#endif
			break;
			case OP_glMaterialxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glMaterialxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialxv");
#endif
			break;
			case OP_glMatrixMode:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixMode(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glMatrixMode((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixMode");
#endif
			break;
			case OP_glMultMatrixx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultMatrixx(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glMultMatrixx((const GLfixed*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultMatrixx");
#endif
			break;
			case OP_glMultiTexCoord4x:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiTexCoord4x(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glMultiTexCoord4x((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiTexCoord4x");
#endif
			break;
			case OP_glNormal3x:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormal3x(0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glNormal3x((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormal3x");
#endif
			break;
			case OP_glNormalPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormalPointer(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glNormalPointer((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormalPointer");
#endif
			break;
			case OP_glOrthox:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthox(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthox((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthox");
#endif
			break;
			case OP_glPointParameterx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterx(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glPointParameterx((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterx");
#endif
			break;
			case OP_glPointParameterxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterxv(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glPointParameterxv((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterxv");
#endif
			break;
			case OP_glPointSizex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizex(0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8));
#endif
			this->glPointSizex((GLfixed)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizex");
#endif
			break;
			case OP_glPolygonOffsetx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPolygonOffsetx(0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glPolygonOffsetx((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPolygonOffsetx");
#endif
			break;
			case OP_glPopMatrix:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPopMatrix()\n", stream);
#endif
			this->glPopMatrix();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPopMatrix");
#endif
			break;
			case OP_glPushMatrix:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPushMatrix()\n", stream);
#endif
			this->glPushMatrix();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPushMatrix");
#endif
			break;
			case OP_glRotatex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRotatex(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRotatex((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRotatex");
#endif
			break;
			case OP_glSampleCoveragex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleCoveragex(0x%08x %d )\n", stream,(GLclampx)GETDWORD(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4));
#endif
			this->glSampleCoveragex((GLclampx)GETDWORD(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleCoveragex");
#endif
			break;
			case OP_glScalex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScalex(0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glScalex((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScalex");
#endif
			break;
			case OP_glShadeModel:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShadeModel(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glShadeModel((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShadeModel");
#endif
			break;
			case OP_glTexCoordPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexCoordPointer(%d 0x%08x %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glTexCoordPointer((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexCoordPointer");
#endif
			break;
			case OP_glTexEnvi:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvi(0x%08x 0x%08x %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvi((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvi");
#endif
			break;
			case OP_glTexEnvx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvx(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvx((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvx");
#endif
			break;
			case OP_glTexEnviv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnviv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexEnviv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnviv");
#endif
			break;
			case OP_glTexEnvxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvxv");
#endif
			break;
			case OP_glTexParameterx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterx(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterx((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterx");
#endif
			break;
			case OP_glTexParameterxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterxv(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterxv((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterxv");
#endif
			break;
			case OP_glTranslatex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTranslatex(0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTranslatex((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTranslatex");
#endif
			break;
			case OP_glVertexPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexPointer(%d 0x%08x %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glVertexPointer((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexPointer");
#endif
			break;
			case OP_glPointSizePointerOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizePointerOES(0x%08x %d %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glPointSizePointerOES((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizePointerOES");
#endif
			break;
			case OP_glVertexPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexPointerOffset(%d 0x%08x %d %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glVertexPointerOffset((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexPointerOffset");
#endif
			break;
			case OP_glColorPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorPointerOffset(%d 0x%08x %d %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColorPointerOffset((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorPointerOffset");
#endif
			break;
			case OP_glNormalPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormalPointerOffset(0x%08x %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glNormalPointerOffset((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormalPointerOffset");
#endif
			break;
			case OP_glPointSizePointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizePointerOffset(0x%08x %d %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glPointSizePointerOffset((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizePointerOffset");
#endif
			break;
			case OP_glTexCoordPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexCoordPointerOffset(%d 0x%08x %d %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glTexCoordPointerOffset((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexCoordPointerOffset");
#endif
			break;
			case OP_glWeightPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWeightPointerOffset(%d 0x%08x %d %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glWeightPointerOffset((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWeightPointerOffset");
#endif
			break;
			case OP_glMatrixIndexPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixIndexPointerOffset(%d 0x%08x %d %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glMatrixIndexPointerOffset((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixIndexPointerOffset");
#endif
			break;
			case OP_glVertexPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glVertexPointerData((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexPointerData");
#endif
			break;
			case OP_glColorPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glColorPointerData((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorPointerData");
#endif
			break;
			case OP_glNormalPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormalPointerData(0x%08x %d %p(%u) %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glNormalPointerData((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormalPointerData");
#endif
			break;
			case OP_glTexCoordPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexCoordPointerData(%d %d 0x%08x %d %p(%u) %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4)));
#endif
			this->glTexCoordPointerData((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexCoordPointerData");
#endif
			break;
			case OP_glPointSizePointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizePointerData(0x%08x %d %p(%u) %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
#endif
			this->glPointSizePointerData((GLenum)GETDWORD(ptr + 8), (GLsizei)GETDWORD(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizePointerData");
#endif
			break;
			case OP_glWeightPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWeightPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glWeightPointerData((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWeightPointerData");
#endif
			break;
			case OP_glMatrixIndexPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixIndexPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
#endif
			this->glMatrixIndexPointerData((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixIndexPointerData");
#endif
			break;
			case OP_glBlendEquationSeparateOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquationSeparateOES(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
#endif
			this->glBlendEquationSeparateOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquationSeparateOES");
#endif
			break;
			case OP_glBlendFuncSeparateOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendFuncSeparateOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBlendFuncSeparateOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendFuncSeparateOES");
#endif
			break;
			case OP_glBlendEquationOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquationOES(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glBlendEquationOES((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquationOES");
#endif
			break;
			case OP_glDrawTexsOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexsOES(%d %d %d %d %d )\n", stream,(GLshort)GETDWORD(ptr + 8), (GLshort)GETDWORD(ptr + 8 + 2), (GLshort)GETDWORD(ptr + 8 + 2 + 2), (GLshort)GETDWORD(ptr + 8 + 2 + 2 + 2), (GLshort)GETDWORD(ptr + 8 + 2 + 2 + 2 + 2));
#endif
			this->glDrawTexsOES((GLshort)GETDWORD(ptr + 8), (GLshort)GETDWORD(ptr + 8 + 2), (GLshort)GETDWORD(ptr + 8 + 2 + 2), (GLshort)GETDWORD(ptr + 8 + 2 + 2 + 2), (GLshort)GETDWORD(ptr + 8 + 2 + 2 + 2 + 2));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexsOES");
#endif
			break;
			case OP_glDrawTexiOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexiOES(%d %d %d %d %d )\n", stream,(GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glDrawTexiOES((GLint)GETDWORD(ptr + 8), (GLint)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexiOES");
#endif
			break;
			case OP_glDrawTexxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexxOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glDrawTexxOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexxOES");
#endif
			break;
			case OP_glDrawTexsvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexsvOES(%p(%u) )\n", stream,(const GLshort*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glDrawTexsvOES((const GLshort*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexsvOES");
#endif
			break;
			case OP_glDrawTexivOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexivOES(%p(%u) )\n", stream,(const GLint*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glDrawTexivOES((const GLint*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexivOES");
#endif
			break;
			case OP_glDrawTexxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexxvOES(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glDrawTexxvOES((const GLfixed*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexxvOES");
#endif
			break;
			case OP_glDrawTexfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexfOES(%f %f %f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glDrawTexfOES((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexfOES");
#endif
			break;
			case OP_glDrawTexfvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexfvOES(%p(%u) )\n", stream,(const GLfloat*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glDrawTexfvOES((const GLfloat*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexfvOES");
#endif
			break;
			case OP_glAlphaFuncxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAlphaFuncxOES(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
#endif
			this->glAlphaFuncxOES((GLenum)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAlphaFuncxOES");
#endif
			break;
			case OP_glClearColorxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearColorxOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearColorxOES((GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4), (GLclampx)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearColorxOES");
#endif
			break;
			case OP_glClearDepthxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthxOES(0x%08x )\n", stream,(GLclampx)GETDWORD(ptr + 8));
#endif
			this->glClearDepthxOES((GLclampx)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthxOES");
#endif
			break;
			case OP_glClipPlanexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanexOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glClipPlanexOES((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanexOES");
#endif
			break;
			case OP_glClipPlanexIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanexIMG(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glClipPlanexIMG((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanexIMG");
#endif
			break;
			case OP_glColor4xOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4xOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColor4xOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4xOES");
#endif
			break;
			case OP_glDepthRangexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangexOES(0x%08x 0x%08x )\n", stream,(GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
#endif
			this->glDepthRangexOES((GLclampx)GETDWORD(ptr + 8), (GLclampx)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangexOES");
#endif
			break;
			case OP_glFogxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogxOES(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glFogxOES((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogxOES");
#endif
			break;
			case OP_glFogxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogxvOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glFogxvOES((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogxvOES");
#endif
			break;
			case OP_glFrustumxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumxOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumxOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumxOES");
#endif
			break;
			case OP_glGetClipPlanexOES:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanexOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetClipPlanexOES((GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanexOES");
#endif
			break;
			case OP_glGetClipPlanex:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanex(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetClipPlanex((GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanex");
#endif
			break;
			case OP_glGetFixedvOES:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFixedvOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetFixedvOES((GLenum)GETDWORD(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFixedvOES");
#endif
			break;
			case OP_glGetLightxvOES:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetLightxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetLightxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetLightxvOES");
#endif
			break;
			case OP_glGetMaterialxvOES:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetMaterialxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetMaterialxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetMaterialxvOES");
#endif
			break;
			case OP_glGetTexEnvxvOES:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnvxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnvxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnvxvOES");
#endif
			break;
			case OP_glGetTexParameterxvOES:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameterxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameterxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameterxvOES");
#endif
			break;
			case OP_glLightModelxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelxOES(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glLightModelxOES((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelxOES");
#endif
			break;
			case OP_glLightModelxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelxvOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glLightModelxvOES((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelxvOES");
#endif
			break;
			case OP_glLightxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightxOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glLightxOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightxOES");
#endif
			break;
			case OP_glLightxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glLightxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightxvOES");
#endif
			break;
			case OP_glLineWidthxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLineWidthxOES(0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8));
#endif
			this->glLineWidthxOES((GLfixed)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLineWidthxOES");
#endif
			break;
			case OP_glLoadMatrixxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadMatrixxOES(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glLoadMatrixxOES((const GLfixed*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadMatrixxOES");
#endif
			break;
			case OP_glMaterialxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialxOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glMaterialxOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialxOES");
#endif
			break;
			case OP_glMaterialxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glMaterialxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialxvOES");
#endif
			break;
			case OP_glMultMatrixxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultMatrixxOES(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), GETDWORD(ptr + 8));
#endif
			this->glMultMatrixxOES((const GLfixed*)(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultMatrixxOES");
#endif
			break;
			case OP_glMultiTexCoord4xOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiTexCoord4xOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glMultiTexCoord4xOES((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiTexCoord4xOES");
#endif
			break;
			case OP_glNormal3xOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormal3xOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glNormal3xOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormal3xOES");
#endif
			break;
			case OP_glOrthoxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthoxOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthoxOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthoxOES");
#endif
			break;
			case OP_glPointParameterxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterxOES(0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glPointParameterxOES((GLenum)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterxOES");
#endif
			break;
			case OP_glPointParameterxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterxvOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glPointParameterxvOES((GLenum)GETDWORD(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterxvOES");
#endif
			break;
			case OP_glPointSizexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizexOES(0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8));
#endif
			this->glPointSizexOES((GLfixed)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizexOES");
#endif
			break;
			case OP_glPolygonOffsetxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPolygonOffsetxOES(0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
#endif
			this->glPolygonOffsetxOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPolygonOffsetxOES");
#endif
			break;
			case OP_glRotatexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRotatexOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRotatexOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRotatexOES");
#endif
			break;
			case OP_glSampleCoveragexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleCoveragexOES(0x%08x %d )\n", stream,(GLclampx)GETDWORD(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4));
#endif
			this->glSampleCoveragexOES((GLclampx)GETDWORD(ptr + 8), (GLboolean)GETBYTE(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleCoveragexOES");
#endif
			break;
			case OP_glScalexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScalexOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glScalexOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScalexOES");
#endif
			break;
			case OP_glTexEnvxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvxOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvxOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvxOES");
#endif
			break;
			case OP_glTexEnvxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvxvOES");
#endif
			break;
			case OP_glTexParameterxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterxOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterxOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterxOES");
#endif
			break;
			case OP_glTexParameterxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterxvOES");
#endif
			break;
			case OP_glTranslatexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTranslatexOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTranslatexOES((GLfixed)GETDWORD(ptr + 8), (GLfixed)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTranslatexOES");
#endif
			break;
			case OP_glIsRenderbufferOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsRenderbufferOES(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsRenderbufferOES((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsRenderbufferOES");
#endif
			break;
			case OP_glBindRenderbufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindRenderbufferOES(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindRenderbufferOES((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindRenderbufferOES");
#endif
			break;
			case OP_glDeleteRenderbuffersOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteRenderbuffersOES(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteRenderbuffersOES((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteRenderbuffersOES");
#endif
			break;
			case OP_glGenRenderbuffersOES:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenRenderbuffersOES(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenRenderbuffersOES((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenRenderbuffersOES");
#endif
			break;
			case OP_glRenderbufferStorageOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorageOES(0x%08x 0x%08x %d %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorageOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorageOES");
#endif
			break;
			case OP_glGetRenderbufferParameterivOES:
			{
			size_t tmpPtr2Size = (size_t)GETDWORD(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetRenderbufferParameterivOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetRenderbufferParameterivOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetRenderbufferParameterivOES");
#endif
			break;
			case OP_glIsFramebufferOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsFramebufferOES(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsFramebufferOES((GLuint)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsFramebufferOES");
#endif
			break;
			case OP_glBindFramebufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindFramebufferOES(0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
#endif
			this->glBindFramebufferOES((GLenum)GETDWORD(ptr + 8), (GLuint)GETDWORD(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindFramebufferOES");
#endif
			break;
			case OP_glDeleteFramebuffersOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteFramebuffersOES(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glDeleteFramebuffersOES((GLsizei)GETDWORD(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteFramebuffersOES");
#endif
			break;
			case OP_glGenFramebuffersOES:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenFramebuffersOES(%d %p(%u) )\n", stream,(GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGenFramebuffersOES((GLsizei)GETDWORD(ptr + 8), (GLuint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenFramebuffersOES");
#endif
			break;
			case OP_glCheckFramebufferStatusOES:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCheckFramebufferStatusOES(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glCheckFramebufferStatusOES((GLenum)GETDWORD(ptr + 8));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCheckFramebufferStatusOES");
#endif
			break;
			case OP_glFramebufferRenderbufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferRenderbufferOES(0x%08x 0x%08x 0x%08x %u )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glFramebufferRenderbufferOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferRenderbufferOES");
#endif
			break;
			case OP_glFramebufferTexture2DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture2DOES(0x%08x 0x%08x 0x%08x %u %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture2DOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLuint)GETDWORD(ptr + 8 + 4 + 4 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture2DOES");
#endif
			break;
			case OP_glGetFramebufferAttachmentParameterivOES:
			{
			size_t tmpPtr3Size = (size_t)GETDWORD(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFramebufferAttachmentParameterivOES(0x%08x 0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetFramebufferAttachmentParameterivOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFramebufferAttachmentParameterivOES");
#endif
			break;
			case OP_glGenerateMipmapOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenerateMipmapOES(0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8));
#endif
			this->glGenerateMipmapOES((GLenum)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenerateMipmapOES");
#endif
			break;
			case OP_glGetBufferPointervOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBufferPointervOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetBufferPointervOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBufferPointervOES");
#endif
			break;
			case OP_glCurrentPaletteMatrixOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCurrentPaletteMatrixOES(%u )\n", stream,(GLuint)GETDWORD(ptr + 8));
#endif
			this->glCurrentPaletteMatrixOES((GLuint)GETDWORD(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCurrentPaletteMatrixOES");
#endif
			break;
			case OP_glLoadPaletteFromModelViewMatrixOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadPaletteFromModelViewMatrixOES()\n", stream);
#endif
			this->glLoadPaletteFromModelViewMatrixOES();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadPaletteFromModelViewMatrixOES");
#endif
			break;
			case OP_glMatrixIndexPointerOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixIndexPointerOES(%d 0x%08x %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glMatrixIndexPointerOES((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixIndexPointerOES");
#endif
			break;
			case OP_glWeightPointerOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWeightPointerOES(%d 0x%08x %d %p(%u) )\n", stream,(GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + 4));
#endif
			this->glWeightPointerOES((GLint)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWeightPointerOES");
#endif
			break;
			case OP_glQueryMatrixxOES:
			{
			size_t tmpPtr0Size = (size_t)GETDWORD(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			totalTmpSize += tmpPtr1Size;
			totalTmpSize += sizeof(GLbitfield);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr1 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glQueryMatrixxOES(%p(%u) %p(%u) )\n", stream,(GLfixed*)(tmpPtr0), GETDWORD(ptr + 8), (GLint*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			*(GLbitfield *)(&tmpBuf[0 + tmpPtr0Size + tmpPtr1Size]) = 			this->glQueryMatrixxOES((GLfixed*)(tmpPtr0), (GLint*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glQueryMatrixxOES");
#endif
			break;
			case OP_glDepthRangefOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangefOES(%f %f )\n", stream,(GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4));
#endif
			this->glDepthRangefOES((GLclampf)GETFLOAT(ptr + 8), (GLclampf)GETFLOAT(ptr + 8 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangefOES");
#endif
			break;
			case OP_glFrustumfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumfOES(%f %f %f %f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumfOES((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumfOES");
#endif
			break;
			case OP_glOrthofOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthofOES(%f %f %f %f %f %f )\n", stream,(GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthofOES((GLfloat)GETFLOAT(ptr + 8), (GLfloat)GETFLOAT(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthofOES");
#endif
			break;
			case OP_glClipPlanefOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanefOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glClipPlanefOES((GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanefOES");
#endif
			break;
			case OP_glClipPlanefIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanefIMG(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4));
#endif
			this->glClipPlanefIMG((GLenum)GETDWORD(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanefIMG");
#endif
			break;
			case OP_glGetClipPlanefOES:
			{
			size_t tmpPtr1Size = (size_t)GETDWORD(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanefOES(0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLfloat*)(tmpPtr1), GETDWORD(ptr + 8 + 4));
#endif
			this->glGetClipPlanefOES((GLenum)GETDWORD(ptr + 8), (GLfloat*)(tmpPtr1));
			stream->writeback();
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanefOES");
#endif
			break;
			case OP_glClearDepthfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthfOES(%f )\n", stream,(GLclampf)GETFLOAT(ptr + 8));
#endif
			this->glClearDepthfOES((GLclampf)GETFLOAT(ptr + 8));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthfOES");
#endif
			break;
			case OP_glTexGenfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenfOES(0x%08x 0x%08x %f )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
#endif
			this->glTexGenfOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat)GETFLOAT(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenfOES");
#endif
			break;
			case OP_glTexGenfvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenfvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexGenfvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenfvOES");
#endif
			break;
			case OP_glTexGeniOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGeniOES(0x%08x 0x%08x %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexGeniOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGeniOES");
#endif
			break;
			case OP_glTexGenivOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenivOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexGenivOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenivOES");
#endif
			break;
			case OP_glTexGenxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenxOES(0x%08x 0x%08x 0x%08x )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexGenxOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed)GETDWORD(ptr + 8 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenxOES");
#endif
			break;
			case OP_glTexGenxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glTexGenxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenxvOES");
#endif
			break;
			case OP_glGetTexGenfvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexGenfvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexGenfvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexGenfvOES");
#endif
			break;
			case OP_glGetTexGenivOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexGenivOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexGenivOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexGenivOES");
#endif
			break;
			case OP_glGetTexGenxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexGenxvOES(0x%08x 0x%08x %p(%u) )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(ptr + 8 + 4 + 4 + 4), GETDWORD(ptr + 8 + 4 + 4));
#endif
			this->glGetTexGenxvOES((GLenum)GETDWORD(ptr + 8), (GLenum)GETDWORD(ptr + 8 + 4), (GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexGenxvOES");
#endif
			break;
			case OP_glMultiDrawArraysSUN:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawArraysSUN(0x%08x %p(%u) %p(%u) %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4))));
#endif
			this->glMultiDrawArraysSUN((GLenum)GETDWORD(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4))));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawArraysSUN");
#endif
			break;
			case OP_glMultiDrawElementsSUN:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawElementsSUN(0x%08x %p(%u) 0x%08x %p(%u) %d )\n", stream,(GLenum)GETDWORD(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), GETDWORD(ptr + 8 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4), GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4)));
#endif
			this->glMultiDrawElementsSUN((GLenum)GETDWORD(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), (GLenum)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4), (GLsizei)GETDWORD(ptr + 8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4 + 4 + (tsize_t)GETDWORD(ptr +8 + 4) + 4)));
			pos += GETDWORD(ptr + 4);
			ptr += GETDWORD(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawElementsSUN");
#endif
			break;
			default:
				unknownOpcode = true;
		} //switch
#ifdef CHECK_GL_ERROR
	int err = lastCall[0] ? this->glGetError() : GL_NO_ERROR;
	if (err) fprintf(stderr, "gles Error: 0x%X in %s\n", err, lastCall);
#endif
	} // while
	return pos;
}
