// Generated Code - DO NOT EDIT !!
// generated by 'emugen'


#include <string.h>
#include "gles1_opcodes.h"

#include "gles1_enc.h"


#include <stdio.h>
static void enc_unsupported()
{
	ALOGE("Function is unsupported\n");
}

void glActiveTexture_enc(void *self , GLenum texture)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glActiveTexture; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &texture, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glAttachShader_enc(void *self , GLuint program, GLuint shader)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glAttachShader; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &shader, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindAttribLocation_enc(void *self , GLuint program, GLuint index, const GLchar* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_name =  (strlen(name) + 1);
	 const size_t packetSize = 8 + 4 + 4 +  (strlen(name) + 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindAttribLocation; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	memcpy(ptr, name, __size_name);ptr += __size_name;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glBindBuffer_enc(void *self , GLenum target, GLuint buffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindBuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &buffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindFramebuffer_enc(void *self , GLenum target, GLuint framebuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindFramebuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &framebuffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindRenderbuffer_enc(void *self , GLenum target, GLuint renderbuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindRenderbuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &renderbuffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindTexture_enc(void *self , GLenum target, GLuint texture)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindTexture; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &texture, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlendColor_enc(void *self , GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendColor; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 4); ptr += 4;
		memcpy(ptr, &green, 4); ptr += 4;
		memcpy(ptr, &blue, 4); ptr += 4;
		memcpy(ptr, &alpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlendEquation_enc(void *self , GLenum mode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendEquation; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlendEquationSeparate_enc(void *self , GLenum modeRGB, GLenum modeAlpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendEquationSeparate; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &modeRGB, 4); ptr += 4;
		memcpy(ptr, &modeAlpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlendFunc_enc(void *self , GLenum sfactor, GLenum dfactor)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendFunc; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sfactor, 4); ptr += 4;
		memcpy(ptr, &dfactor, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlendFuncSeparate_enc(void *self , GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendFuncSeparate; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &srcRGB, 4); ptr += 4;
		memcpy(ptr, &dstRGB, 4); ptr += 4;
		memcpy(ptr, &srcAlpha, 4); ptr += 4;
		memcpy(ptr, &dstAlpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBufferData_enc(void *self , GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  size : 0);
	 const size_t packetSize = 8 + 4 + 4 + ((data != NULL) ?  size : 0) + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBufferData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
		memcpy(ptr, &usage, 4); ptr += 4;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glBufferSubData_enc(void *self , GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  size : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + ((data != NULL) ?  size : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBufferSubData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

GLenum glCheckFramebufferStatus_enc(void *self , GLenum target)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCheckFramebufferStatus; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;

	GLenum retval;
	stream->readback(&retval, 4);
	return retval;
}

void glClear_enc(void *self , GLbitfield mask)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClear; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mask, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearColor_enc(void *self , GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearColor; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 4); ptr += 4;
		memcpy(ptr, &green, 4); ptr += 4;
		memcpy(ptr, &blue, 4); ptr += 4;
		memcpy(ptr, &alpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearDepthf_enc(void *self , GLclampf depth)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearDepthf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &depth, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearStencil_enc(void *self , GLint s)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearStencil; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &s, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glColorMask_enc(void *self , GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 1 + 1 + 1 + 1 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glColorMask; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 1); ptr += 1;
		memcpy(ptr, &green, 1); ptr += 1;
		memcpy(ptr, &blue, 1); ptr += 1;
		memcpy(ptr, &alpha, 1); ptr += 1;
//by RedFinger emugen
	stream->flush();
}

void glCompileShader_enc(void *self , GLuint shader)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompileShader; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shader, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCompressedTexImage2D_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  imageSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  imageSize : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexImage2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glCompressedTexSubImage2D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  imageSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  imageSize : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexSubImage2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glCopyTexImage2D_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCopyTexImage2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCopyTexSubImage2D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCopyTexSubImage2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

GLuint glCreateProgram_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCreateProgram; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;


	GLuint retval;
	stream->readback(&retval, 4);
	return retval;
}

GLuint glCreateShader_enc(void *self , GLenum type)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCreateShader; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &type, 4); ptr += 4;

	GLuint retval;
	stream->readback(&retval, 4);
	return retval;
}

void glCullFace_enc(void *self , GLenum mode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCullFace; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDeleteBuffers_enc(void *self , GLsizei n, const GLuint* buffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_buffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteBuffers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_buffers; ptr += 4;
	memcpy(ptr, buffers, __size_buffers);ptr += __size_buffers;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDeleteFramebuffers_enc(void *self , GLsizei n, const GLuint* framebuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_framebuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteFramebuffers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_framebuffers; ptr += 4;
	memcpy(ptr, framebuffers, __size_framebuffers);ptr += __size_framebuffers;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDeleteProgram_enc(void *self , GLuint program)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteProgram; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDeleteRenderbuffers_enc(void *self , GLsizei n, const GLuint* renderbuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_renderbuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteRenderbuffers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_renderbuffers; ptr += 4;
	memcpy(ptr, renderbuffers, __size_renderbuffers);ptr += __size_renderbuffers;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDeleteShader_enc(void *self , GLuint shader)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteShader; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shader, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDeleteTextures_enc(void *self , GLsizei n, const GLuint* textures)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_textures =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteTextures; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_textures; ptr += 4;
	memcpy(ptr, textures, __size_textures);ptr += __size_textures;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDepthFunc_enc(void *self , GLenum func)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDepthFunc; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &func, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDepthMask_enc(void *self , GLboolean flag)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 1 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDepthMask; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &flag, 1); ptr += 1;
//by RedFinger emugen
	stream->flush();
}

void glDepthRangef_enc(void *self , GLclampf zNear, GLclampf zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDepthRangef; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDetachShader_enc(void *self , GLuint program, GLuint shader)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDetachShader; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &shader, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDisable_enc(void *self , GLenum cap)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDisable; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &cap, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDisableVertexAttribArray_enc(void *self , GLuint index)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDisableVertexAttribArray; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawArrays_enc(void *self , GLenum mode, GLint first, GLsizei count)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawArrays; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &first, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glEnable_enc(void *self , GLenum cap)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glEnable; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &cap, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glEnableVertexAttribArray_enc(void *self , GLuint index)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glEnableVertexAttribArray; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFinish_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFinish; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glFlush_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFlush; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glFramebufferRenderbuffer_enc(void *self , GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFramebufferRenderbuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &renderbuffertarget, 4); ptr += 4;
		memcpy(ptr, &renderbuffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFramebufferTexture2D_enc(void *self , GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFramebufferTexture2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &textarget, 4); ptr += 4;
		memcpy(ptr, &texture, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFrontFace_enc(void *self , GLenum mode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFrontFace; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGenBuffers_enc(void *self , GLsizei n, GLuint* buffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_buffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenBuffers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_buffers; ptr += 4;
	stream->readback(buffers, __size_buffers);
}

void glGenerateMipmap_enc(void *self , GLenum target)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenerateMipmap; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGenFramebuffers_enc(void *self , GLsizei n, GLuint* framebuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_framebuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenFramebuffers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_framebuffers; ptr += 4;
	stream->readback(framebuffers, __size_framebuffers);
}

void glGenRenderbuffers_enc(void *self , GLsizei n, GLuint* renderbuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_renderbuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenRenderbuffers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_renderbuffers; ptr += 4;
	stream->readback(renderbuffers, __size_renderbuffers);
}

void glGenTextures_enc(void *self , GLsizei n, GLuint* textures)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_textures =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenTextures; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_textures; ptr += 4;
	stream->readback(textures, __size_textures);
}

void glGetActiveAttrib_enc(void *self , GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_size = ((size != NULL) ?  (sizeof(GLint)) : 0);
	const unsigned int __size_type = ((type != NULL) ?  (sizeof(GLenum)) : 0);
	const unsigned int __size_name = ((name != NULL) ?  bufsize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) + ((size != NULL) ?  (sizeof(GLint)) : 0) + ((type != NULL) ?  (sizeof(GLenum)) : 0) + ((name != NULL) ?  bufsize : 0) + 4 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetActiveAttrib; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &bufsize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_size; ptr += 4;
	*(unsigned int *)(ptr) = __size_type; ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	if (size != NULL) stream->readback(size, __size_size);
	if (type != NULL) stream->readback(type, __size_type);
	if (name != NULL) stream->readback(name, __size_name);
}

void glGetActiveUniform_enc(void *self , GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_size = ((size != NULL) ?  (sizeof(GLint)) : 0);
	const unsigned int __size_type = ((type != NULL) ?  (sizeof(GLenum)) : 0);
	const unsigned int __size_name = ((name != NULL) ?  bufsize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) + ((size != NULL) ?  (sizeof(GLint)) : 0) + ((type != NULL) ?  (sizeof(GLenum)) : 0) + ((name != NULL) ?  bufsize : 0) + 4 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetActiveUniform; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &bufsize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_size; ptr += 4;
	*(unsigned int *)(ptr) = __size_type; ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	if (size != NULL) stream->readback(size, __size_size);
	if (type != NULL) stream->readback(type, __size_type);
	if (name != NULL) stream->readback(name, __size_name);
}

void glGetAttachedShaders_enc(void *self , GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_count = ((count != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_shaders =  (maxcount*sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 + ((count != NULL) ?  (sizeof(GLsizei)) : 0) +  (maxcount*sizeof(GLuint)) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetAttachedShaders; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &maxcount, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_count; ptr += 4;
	*(unsigned int *)(ptr) = __size_shaders; ptr += 4;
	if (count != NULL) stream->readback(count, __size_count);
	stream->readback(shaders, __size_shaders);
}

int glGetAttribLocation_enc(void *self , GLuint program, const GLchar* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_name =  (strlen(name) + 1);
	 const size_t packetSize = 8 + 4 +  (strlen(name) + 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetAttribLocation; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	memcpy(ptr, name, __size_name);ptr += __size_name;

	int retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGetBooleanv_enc(void *self , GLenum pname, GLboolean* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLboolean));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLboolean)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetBooleanv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetBufferParameteriv_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetBufferParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

GLenum glGetError_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetError; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;


	GLenum retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGetFloatv_enc(void *self , GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetFloatv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetFramebufferAttachmentParameteriv_enc(void *self , GLenum target, GLenum attachment, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetFramebufferAttachmentParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetIntegerv_enc(void *self , GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetIntegerv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetProgramiv_enc(void *self , GLuint program, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetProgramInfoLog_enc(void *self , GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  sizeof(GLsizei) : 0);
	const unsigned int __size_infolog =  bufsize;
	 const size_t packetSize = 8 + 4 + 4 + ((length != NULL) ?  sizeof(GLsizei) : 0) +  bufsize + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramInfoLog; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &bufsize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_infolog; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(infolog, __size_infolog);
}

void glGetRenderbufferParameteriv_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  sizeof(GLint);
	 const size_t packetSize = 8 + 4 + 4 +  sizeof(GLint) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetRenderbufferParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetShaderiv_enc(void *self , GLuint shader, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  sizeof(GLint);
	 const size_t packetSize = 8 + 4 + 4 +  sizeof(GLint) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetShaderiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shader, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetShaderInfoLog_enc(void *self , GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* infolog)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_infolog =  bufsize;
	 const size_t packetSize = 8 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) +  bufsize + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetShaderInfoLog; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shader, 4); ptr += 4;
		memcpy(ptr, &bufsize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_infolog; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(infolog, __size_infolog);
}

void glGetShaderPrecisionFormat_enc(void *self , GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_range =  (2 * sizeof(GLint));
	const unsigned int __size_precision =  (sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (2 * sizeof(GLint)) +  (sizeof(GLint)) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetShaderPrecisionFormat; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shadertype, 4); ptr += 4;
		memcpy(ptr, &precisiontype, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_range; ptr += 4;
	*(unsigned int *)(ptr) = __size_precision; ptr += 4;
	stream->readback(range, __size_range);
	stream->readback(precision, __size_precision);
}

void glGetShaderSource_enc(void *self , GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_source =  bufsize;
	 const size_t packetSize = 8 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) +  bufsize + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetShaderSource; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shader, 4); ptr += 4;
		memcpy(ptr, &bufsize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_source; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(source, __size_source);
}

void glGetTexParameterfv_enc(void *self , GLenum target, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexParameterfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexParameteriv_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetUniformfv_enc(void *self , GLuint program, GLint location, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  glSizeof(glesv2_enc::uniformType(self, program, location));
	 const size_t packetSize = 8 + 4 + 4 +  glSizeof(glesv2_enc::uniformType(self, program, location)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetUniformfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetUniformiv_enc(void *self , GLuint program, GLint location, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  glSizeof(glesv2_enc::uniformType(self, program, location));
	 const size_t packetSize = 8 + 4 + 4 +  glSizeof(glesv2_enc::uniformType(self, program, location)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetUniformiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

int glGetUniformLocation_enc(void *self , GLuint program, const GLchar* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_name =  (strlen(name) + 1);
	 const size_t packetSize = 8 + 4 +  (strlen(name) + 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetUniformLocation; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	memcpy(ptr, name, __size_name);ptr += __size_name;

	int retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGetVertexAttribfv_enc(void *self , GLuint index, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetVertexAttribfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetVertexAttribiv_enc(void *self , GLuint index, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetVertexAttribiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glHint_enc(void *self , GLenum target, GLenum mode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glHint; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &mode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

GLboolean glIsBuffer_enc(void *self , GLuint buffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsBuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &buffer, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsEnabled_enc(void *self , GLenum cap)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsEnabled; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &cap, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsFramebuffer_enc(void *self , GLuint framebuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsFramebuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &framebuffer, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsProgram_enc(void *self , GLuint program)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsProgram; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsRenderbuffer_enc(void *self , GLuint renderbuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsRenderbuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &renderbuffer, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsShader_enc(void *self , GLuint shader)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsShader; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shader, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

GLboolean glIsTexture_enc(void *self , GLuint texture)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsTexture; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &texture, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glLineWidth_enc(void *self , GLfloat width)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLineWidth; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &width, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLinkProgram_enc(void *self , GLuint program)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLinkProgram; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPixelStorei_enc(void *self , GLenum pname, GLint param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPixelStorei; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPolygonOffset_enc(void *self , GLfloat factor, GLfloat units)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPolygonOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &factor, 4); ptr += 4;
		memcpy(ptr, &units, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glReadPixels_enc(void *self , GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels =  glesv1_enc::pixelDataSize(self, width, height, format, type, 1);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 +  glesv1_enc::pixelDataSize(self, width, height, format, type, 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glReadPixels; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_pixels; ptr += 4;
	stream->readback(pixels, __size_pixels);
}

void glReleaseShaderCompiler_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glReleaseShaderCompiler; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glRenderbufferStorage_enc(void *self , GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glRenderbufferStorage; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glSampleCoverage_enc(void *self , GLclampf value, GLboolean invert)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 1 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSampleCoverage; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &value, 4); ptr += 4;
		memcpy(ptr, &invert, 1); ptr += 1;
//by RedFinger emugen
	stream->flush();
}

void glScissor_enc(void *self , GLint x, GLint y, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glScissor; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glStencilFunc_enc(void *self , GLenum func, GLint ref, GLuint mask)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glStencilFunc; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &func, 4); ptr += 4;
		memcpy(ptr, &ref, 4); ptr += 4;
		memcpy(ptr, &mask, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glStencilFuncSeparate_enc(void *self , GLenum face, GLenum func, GLint ref, GLuint mask)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glStencilFuncSeparate; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &func, 4); ptr += 4;
		memcpy(ptr, &ref, 4); ptr += 4;
		memcpy(ptr, &mask, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glStencilMask_enc(void *self , GLuint mask)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glStencilMask; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mask, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glStencilMaskSeparate_enc(void *self , GLenum face, GLuint mask)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glStencilMaskSeparate; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &mask, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glStencilOp_enc(void *self , GLenum fail, GLenum zfail, GLenum zpass)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glStencilOp; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &fail, 4); ptr += 4;
		memcpy(ptr, &zfail, 4); ptr += 4;
		memcpy(ptr, &zpass, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glStencilOpSeparate_enc(void *self , GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glStencilOpSeparate; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &fail, 4); ptr += 4;
		memcpy(ptr, &zfail, 4); ptr += 4;
		memcpy(ptr, &zpass, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexImage2D_enc(void *self , GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels = ((pixels != NULL) ?  glesv1_enc::pixelDataSize(self, width, height, format, type, 0) : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((pixels != NULL) ?  glesv1_enc::pixelDataSize(self, width, height, format, type, 0) : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexImage2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_pixels; ptr += 4;
	if (pixels != NULL) memcpy(ptr, pixels, __size_pixels);ptr += __size_pixels;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glTexParameterf_enc(void *self , GLenum target, GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameterf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexParameterfv_enc(void *self , GLenum target, GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameterfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexParameteri_enc(void *self , GLenum target, GLenum pname, GLint param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameteri; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexParameteriv_enc(void *self , GLenum target, GLenum pname, const GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexSubImage2D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels = ((pixels != NULL) ?  glesv1_enc::pixelDataSize(self, width, height, format, type, 0) : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((pixels != NULL) ?  glesv1_enc::pixelDataSize(self, width, height, format, type, 0) : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexSubImage2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_pixels; ptr += 4;
	if (pixels != NULL) memcpy(ptr, pixels, __size_pixels);ptr += __size_pixels;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glUniform1f_enc(void *self , GLint location, GLfloat x)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform1f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform1fv_enc(void *self , GLint location, GLsizei count, const GLfloat* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (count * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (count * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform1fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform1i_enc(void *self , GLint location, GLint x)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform1i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform1iv_enc(void *self , GLint location, GLsizei count, const GLint* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (count * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (count * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform1iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform2f_enc(void *self , GLint location, GLfloat x, GLfloat y)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform2f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform2fv_enc(void *self , GLint location, GLsizei count, const GLfloat* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (count * 2 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (count * 2 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform2i_enc(void *self , GLint location, GLint x, GLint y)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform2i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform2iv_enc(void *self , GLint location, GLsizei count, const GLint* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (count * 2 * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (count * 2 * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform2iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform3f_enc(void *self , GLint location, GLfloat x, GLfloat y, GLfloat z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform3f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform3fv_enc(void *self , GLint location, GLsizei count, const GLfloat* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (count * 3 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (count * 3 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform3i_enc(void *self , GLint location, GLint x, GLint y, GLint z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform3i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform3iv_enc(void *self , GLint location, GLsizei count, const GLint* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (3 * count * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (3 * count * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform3iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform4f_enc(void *self , GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform4f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
		memcpy(ptr, &w, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform4fv_enc(void *self , GLint location, GLsizei count, const GLfloat* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (4 * count * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (4 * count * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform4i_enc(void *self , GLint location, GLint x, GLint y, GLint z, GLint w)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform4i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
		memcpy(ptr, &w, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform4iv_enc(void *self , GLint location, GLsizei count, const GLint* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (4 * count * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (4 * count * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform4iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix2fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix3fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 9 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 9 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix4fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 16 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 16 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUseProgram_enc(void *self , GLuint program)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUseProgram; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glValidateProgram_enc(void *self , GLuint program)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glValidateProgram; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttrib1f_enc(void *self , GLuint indx, GLfloat x)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib1f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttrib1fv_enc(void *self , GLuint indx, const GLfloat* values)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_values =  (sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib1fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_values; ptr += 4;
	memcpy(ptr, values, __size_values);ptr += __size_values;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glVertexAttrib2f_enc(void *self , GLuint indx, GLfloat x, GLfloat y)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib2f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttrib2fv_enc(void *self , GLuint indx, const GLfloat* values)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_values =  (2 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (2 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_values; ptr += 4;
	memcpy(ptr, values, __size_values);ptr += __size_values;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glVertexAttrib3f_enc(void *self , GLuint indx, GLfloat x, GLfloat y, GLfloat z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib3f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttrib3fv_enc(void *self , GLuint indx, const GLfloat* values)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_values =  (3 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (3 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_values; ptr += 4;
	memcpy(ptr, values, __size_values);ptr += __size_values;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glVertexAttrib4f_enc(void *self , GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib4f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
		memcpy(ptr, &w, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttrib4fv_enc(void *self , GLuint indx, const GLfloat* values)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_values =  (4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttrib4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_values; ptr += 4;
	memcpy(ptr, values, __size_values);ptr += __size_values;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glViewport_enc(void *self , GLint x, GLint y, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glViewport; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glEGLImageTargetTexture2DOES_enc(void *self , GLenum target, GLeglImageOES image)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glEGLImageTargetTexture2DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &image, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glEGLImageTargetRenderbufferStorageOES_enc(void *self , GLenum target, GLeglImageOES image)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glEGLImageTargetRenderbufferStorageOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &image, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

GLboolean glUnmapBufferOES_enc(void *self , GLenum target)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUnmapBufferOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glTexImage3DOES_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels = ((pixels != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((pixels != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexImage3DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_pixels; ptr += 4;
	if (pixels != NULL) memcpy(ptr, pixels, __size_pixels);ptr += __size_pixels;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glTexSubImage3DOES_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pixels = ((pixels != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((pixels != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexSubImage3DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_pixels; ptr += 4;
	if (pixels != NULL) memcpy(ptr, pixels, __size_pixels);ptr += __size_pixels;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glCopyTexSubImage3DOES_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCopyTexSubImage3DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCompressedTexImage3DOES_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  imageSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  imageSize : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexImage3DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glCompressedTexSubImage3DOES_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  imageSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  imageSize : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexSubImage3DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glFramebufferTexture3DOES_enc(void *self , GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFramebufferTexture3DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &textarget, 4); ptr += 4;
		memcpy(ptr, &texture, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindVertexArrayOES_enc(void *self , GLuint array)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindVertexArrayOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &array, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDeleteVertexArraysOES_enc(void *self , GLsizei n, const GLuint* arrays)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_arrays =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteVertexArraysOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_arrays; ptr += 4;
	memcpy(ptr, arrays, __size_arrays);ptr += __size_arrays;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGenVertexArraysOES_enc(void *self , GLsizei n, GLuint* arrays)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_arrays =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenVertexArraysOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_arrays; ptr += 4;
	stream->readback(arrays, __size_arrays);
}

GLboolean glIsVertexArrayOES_enc(void *self , GLuint array)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsVertexArrayOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &array, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glDiscardFramebufferEXT_enc(void *self , GLenum target, GLsizei numAttachments, const GLenum* attachments)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_attachments =  (numAttachments * sizeof(const GLenum));
	 const size_t packetSize = 8 + 4 + 4 +  (numAttachments * sizeof(const GLenum)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDiscardFramebufferEXT; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &numAttachments, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_attachments; ptr += 4;
	memcpy(ptr, attachments, __size_attachments);ptr += __size_attachments;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glVertexAttribPointerData_enc(void *self , GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribPointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &normalized, 1); ptr += 1;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glVertexAttribPointerOffset_enc(void *self , GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribPointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indx, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &normalized, 1); ptr += 1;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawElementsOffset_enc(void *self , GLenum mode, GLsizei count, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawElementsOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawElementsData_enc(void *self , GLenum mode, GLsizei count, GLenum type, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawElementsData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	memcpy(ptr, data, __size_data);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetCompressedTextureFormats_enc(void *self , int count, GLint* formats)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_formats =  (count * sizeof(GLint));
	 const size_t packetSize = 8 + 4 +  (count * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetCompressedTextureFormats; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_formats; ptr += 4;
	stream->readback(formats, __size_formats);
}

void glShaderString_enc(void *self , GLuint shader, const GLchar* string, GLsizei len)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_string =  len;
	 const size_t packetSize = 8 + 4 +  len + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glShaderString; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &shader, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_string; ptr += 4;
	memcpy(ptr, string, __size_string);ptr += __size_string;
		memcpy(ptr, &len, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

int glFinishRoundTrip_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFinishRoundTrip; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;


	int retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGenVertexArrays_enc(void *self , GLsizei n, GLuint* arrays)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_arrays =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenVertexArrays; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_arrays; ptr += 4;
	stream->readback(arrays, __size_arrays);
}

void glBindVertexArray_enc(void *self , GLuint array)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindVertexArray; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &array, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDeleteVertexArrays_enc(void *self , GLsizei n, const GLuint* arrays)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_arrays =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteVertexArrays; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_arrays; ptr += 4;
	memcpy(ptr, arrays, __size_arrays);ptr += __size_arrays;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

GLboolean glIsVertexArray_enc(void *self , GLuint array)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsVertexArray; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &array, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glMapBufferRangeAEMU_enc(void *self , GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* mapped)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_mapped = ((mapped != NULL) ?  length : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + ((mapped != NULL) ?  length : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMapBufferRangeAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
		memcpy(ptr, &length, 4); ptr += 4;
		memcpy(ptr, &access, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_mapped; ptr += 4;
	if (mapped != NULL) stream->readback(mapped, __size_mapped);
}

void glUnmapBufferAEMU_enc(void *self , GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* guest_buffer, GLboolean* out_res)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_guest_buffer = ((guest_buffer != NULL) ?  length : 0);
	const unsigned int __size_out_res =  (sizeof(GLboolean));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + ((guest_buffer != NULL) ?  length : 0) +  (sizeof(GLboolean)) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUnmapBufferAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
		memcpy(ptr, &length, 4); ptr += 4;
		memcpy(ptr, &access, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_guest_buffer; ptr += 4;
	if (guest_buffer != NULL) memcpy(ptr, guest_buffer, __size_guest_buffer);ptr += __size_guest_buffer;
	*(unsigned int *)(ptr) = __size_out_res; ptr += 4;
	stream->readback(out_res, __size_out_res);
}

void glFlushMappedBufferRangeAEMU_enc(void *self , GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, void* guest_buffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_guest_buffer = ((guest_buffer != NULL) ?  length : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + ((guest_buffer != NULL) ?  length : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFlushMappedBufferRangeAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
		memcpy(ptr, &length, 4); ptr += 4;
		memcpy(ptr, &access, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_guest_buffer; ptr += 4;
	if (guest_buffer != NULL) memcpy(ptr, guest_buffer, __size_guest_buffer);ptr += __size_guest_buffer;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glReadPixelsOffsetAEMU_enc(void *self , GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glReadPixelsOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCompressedTexImage2DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexImage2DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCompressedTexSubImage2DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexSubImage2DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexImage2DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexImage2DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexSubImage2DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexSubImage2DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindBufferRange_enc(void *self , GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindBufferRange; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &buffer, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindBufferBase_enc(void *self , GLenum target, GLuint index, GLuint buffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindBufferBase; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &buffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCopyBufferSubData_enc(void *self , GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCopyBufferSubData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &readtarget, 4); ptr += 4;
		memcpy(ptr, &writetarget, 4); ptr += 4;
		memcpy(ptr, &readoffset, 4); ptr += 4;
		memcpy(ptr, &writeoffset, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearBufferiv_enc(void *self , GLenum buffer, GLint drawBuffer, const GLint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (sizeof(GLint) * glesv2_enc::clearBufferNumElts(self, buffer));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLint) * glesv2_enc::clearBufferNumElts(self, buffer)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearBufferiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &buffer, 4); ptr += 4;
		memcpy(ptr, &drawBuffer, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glClearBufferuiv_enc(void *self , GLenum buffer, GLint drawBuffer, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (sizeof(GLuint) * glesv2_enc::clearBufferNumElts(self, buffer));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLuint) * glesv2_enc::clearBufferNumElts(self, buffer)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearBufferuiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &buffer, 4); ptr += 4;
		memcpy(ptr, &drawBuffer, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glClearBufferfv_enc(void *self , GLenum buffer, GLint drawBuffer, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (sizeof(GLfloat) * glesv2_enc::clearBufferNumElts(self, buffer));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLfloat) * glesv2_enc::clearBufferNumElts(self, buffer)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearBufferfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &buffer, 4); ptr += 4;
		memcpy(ptr, &drawBuffer, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glClearBufferfi_enc(void *self , GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearBufferfi; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &buffer, 4); ptr += 4;
		memcpy(ptr, &drawBuffer, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &stencil, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniformBlockBinding_enc(void *self , GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformBlockBinding; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &uniformBlockIndex, 4); ptr += 4;
		memcpy(ptr, &uniformBlockBinding, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

GLuint glGetUniformBlockIndex_enc(void *self , GLuint program, const GLchar* uniformBlockName)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_uniformBlockName =  (strlen(uniformBlockName) + 1);
	 const size_t packetSize = 8 + 4 +  (strlen(uniformBlockName) + 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetUniformBlockIndex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_uniformBlockName; ptr += 4;
	memcpy(ptr, uniformBlockName, __size_uniformBlockName);ptr += __size_uniformBlockName;

	GLuint retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGetUniformIndicesAEMU_enc(void *self , GLuint program, GLsizei uniformCount, const GLchar* packedUniformNames, GLsizei packedLen, GLuint* uniformIndices)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_packedUniformNames =  packedLen;
	const unsigned int __size_uniformIndices =  (uniformCount * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 +  packedLen + 4 +  (uniformCount * sizeof(GLuint)) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetUniformIndicesAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &uniformCount, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_packedUniformNames; ptr += 4;
	memcpy(ptr, packedUniformNames, __size_packedUniformNames);ptr += __size_packedUniformNames;
		memcpy(ptr, &packedLen, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_uniformIndices; ptr += 4;
	stream->readback(uniformIndices, __size_uniformIndices);
}

void glGetActiveUniformBlockiv_enc(void *self , GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glesv2_enc::glActiveUniformBlockivParamSize(self, program, uniformBlockIndex, pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (glesv2_enc::glActiveUniformBlockivParamSize(self, program, uniformBlockIndex, pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetActiveUniformBlockiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &uniformBlockIndex, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetActiveUniformBlockName_enc(void *self , GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_uniformBlockName = ((uniformBlockName != NULL) ?  bufSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) + ((uniformBlockName != NULL) ?  bufSize : 0) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetActiveUniformBlockName; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &uniformBlockIndex, 4); ptr += 4;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_uniformBlockName; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	if (uniformBlockName != NULL) stream->readback(uniformBlockName, __size_uniformBlockName);
}

void glUniform1ui_enc(void *self , GLint location, GLuint v0)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform1ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform2ui_enc(void *self , GLint location, GLuint v0, GLuint v1)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform2ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform3ui_enc(void *self , GLint location, GLuint v0, GLuint v1, GLuint v2)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform3ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform4ui_enc(void *self , GLint location, GLint v0, GLuint v1, GLuint v2, GLuint v3)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform4ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
		memcpy(ptr, &v3, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glUniform1uiv_enc(void *self , GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 +  (count * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform1uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform2uiv_enc(void *self , GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 2 * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 +  (count * 2 * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform2uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform3uiv_enc(void *self , GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 3 * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 +  (count * 3 * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform3uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniform4uiv_enc(void *self , GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 4 * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 +  (count * 4 * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniform4uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix2x3fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 6 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 6 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix2x3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix3x2fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 6 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 6 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix3x2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix2x4fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 8 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 8 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix2x4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix4x2fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 8 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 8 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix4x2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix3x4fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 12 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 12 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix3x4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glUniformMatrix4x3fv_enc(void *self , GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 12 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 1 +  (count * 12 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUniformMatrix4x3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetUniformuiv_enc(void *self , GLuint program, GLint location, GLuint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  glSizeof(glesv2_enc::uniformType(self, program, location));
	 const size_t packetSize = 8 + 4 + 4 +  glSizeof(glesv2_enc::uniformType(self, program, location)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetUniformuiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetActiveUniformsiv_enc(void *self , GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_uniformIndices =  (uniformCount * sizeof(GLuint));
	const unsigned int __size_params =  (uniformCount * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (uniformCount * sizeof(GLuint)) + 4 +  (uniformCount * sizeof(GLint)) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetActiveUniformsiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &uniformCount, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_uniformIndices; ptr += 4;
	memcpy(ptr, uniformIndices, __size_uniformIndices);ptr += __size_uniformIndices;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glVertexAttribI4i_enc(void *self , GLuint index, GLint v0, GLint v1, GLint v2, GLint v3)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribI4i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
		memcpy(ptr, &v3, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttribI4ui_enc(void *self , GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribI4ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
		memcpy(ptr, &v3, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttribI4iv_enc(void *self , GLuint index, const GLint* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (4 * sizeof(GLint));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribI4iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glVertexAttribI4uiv_enc(void *self , GLuint index, const GLuint* v)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_v =  (4 * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribI4uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_v; ptr += 4;
	memcpy(ptr, v, __size_v);ptr += __size_v;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glVertexAttribIPointerOffsetAEMU_enc(void *self , GLuint index, GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribIPointerOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttribIPointerDataAEMU_enc(void *self , GLuint index, GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribIPointerDataAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetVertexAttribIiv_enc(void *self , GLuint index, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetVertexAttribIiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetVertexAttribIuiv_enc(void *self , GLuint index, GLenum pname, GLuint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetVertexAttribIuiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glVertexAttribDivisor_enc(void *self , GLuint index, GLuint divisor)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribDivisor; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &divisor, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawArraysInstanced_enc(void *self , GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawArraysInstanced; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &first, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &primcount, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawElementsInstancedDataAEMU_enc(void *self , GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount, GLsizei datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_indices =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 +  datalen + 4 + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawElementsInstancedDataAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_indices; ptr += 4;
	memcpy(ptr, indices, __size_indices);ptr += __size_indices;
		memcpy(ptr, &primcount, 4); ptr += 4;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDrawElementsInstancedOffsetAEMU_enc(void *self , GLenum mode, GLsizei count, GLenum type, GLuint offset, GLsizei primcount)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawElementsInstancedOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
		memcpy(ptr, &primcount, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawRangeElementsDataAEMU_enc(void *self , GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices, GLsizei datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_indices =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawRangeElementsDataAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &start, 4); ptr += 4;
		memcpy(ptr, &end, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_indices; ptr += 4;
	memcpy(ptr, indices, __size_indices);ptr += __size_indices;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDrawRangeElementsOffsetAEMU_enc(void *self , GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawRangeElementsOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &start, 4); ptr += 4;
		memcpy(ptr, &end, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

uint64_t glFenceSyncAEMU_enc(void *self , GLenum condition, GLbitfield flags)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFenceSyncAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &condition, 4); ptr += 4;
		memcpy(ptr, &flags, 4); ptr += 4;

	uint64_t retval;
	stream->readback(&retval, 8);
	return retval;
}

GLenum glClientWaitSyncAEMU_enc(void *self , uint64_t wait_on, GLbitfield flags, GLuint64 timeout)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 8 + 4 + 8 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClientWaitSyncAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &wait_on, 8); ptr += 8;
		memcpy(ptr, &flags, 4); ptr += 4;
		memcpy(ptr, &timeout, 8); ptr += 8;

	GLenum retval;
	stream->readback(&retval, 4);
	return retval;
}

void glWaitSyncAEMU_enc(void *self , uint64_t wait_on, GLbitfield flags, GLuint64 timeout)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 8 + 4 + 8 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glWaitSyncAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &wait_on, 8); ptr += 8;
		memcpy(ptr, &flags, 4); ptr += 4;
		memcpy(ptr, &timeout, 8); ptr += 8;
//by RedFinger emugen
	stream->flush();
}

void glDeleteSyncAEMU_enc(void *self , uint64_t to_delete)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 8 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteSyncAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &to_delete, 8); ptr += 8;
//by RedFinger emugen
	stream->flush();
}

GLboolean glIsSyncAEMU_enc(void *self , uint64_t sync)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 8 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsSyncAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sync, 8); ptr += 8;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glGetSyncivAEMU_enc(void *self , uint64_t sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_values =  (bufSize * sizeof(GLint));
	 const size_t packetSize = 8 + 8 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) +  (bufSize * sizeof(GLint)) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetSyncivAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sync, 8); ptr += 8;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_values; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(values, __size_values);
}

void glDrawBuffers_enc(void *self , GLsizei n, const GLenum* bufs)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_bufs =  (n * sizeof(GLenum));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLenum)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawBuffers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_bufs; ptr += 4;
	memcpy(ptr, bufs, __size_bufs);ptr += __size_bufs;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glReadBuffer_enc(void *self , GLenum src)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glReadBuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &src, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlitFramebuffer_enc(void *self , GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlitFramebuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &srcX0, 4); ptr += 4;
		memcpy(ptr, &srcY0, 4); ptr += 4;
		memcpy(ptr, &srcX1, 4); ptr += 4;
		memcpy(ptr, &srcY1, 4); ptr += 4;
		memcpy(ptr, &dstX0, 4); ptr += 4;
		memcpy(ptr, &dstY0, 4); ptr += 4;
		memcpy(ptr, &dstX1, 4); ptr += 4;
		memcpy(ptr, &dstY1, 4); ptr += 4;
		memcpy(ptr, &mask, 4); ptr += 4;
		memcpy(ptr, &filter, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glInvalidateFramebuffer_enc(void *self , GLenum target, GLsizei numAttachments, const GLenum* attachments)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_attachments =  (numAttachments * sizeof(GLenum));
	 const size_t packetSize = 8 + 4 + 4 +  (numAttachments * sizeof(GLenum)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glInvalidateFramebuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &numAttachments, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_attachments; ptr += 4;
	memcpy(ptr, attachments, __size_attachments);ptr += __size_attachments;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glInvalidateSubFramebuffer_enc(void *self , GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_attachments =  (numAttachments * sizeof(GLenum));
	 const size_t packetSize = 8 + 4 + 4 +  (numAttachments * sizeof(GLenum)) + 4 + 4 + 4 + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glInvalidateSubFramebuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &numAttachments, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_attachments; ptr += 4;
	memcpy(ptr, attachments, __size_attachments);ptr += __size_attachments;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glFramebufferTextureLayer_enc(void *self , GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFramebufferTextureLayer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &texture, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &layer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glRenderbufferStorageMultisample_enc(void *self , GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glRenderbufferStorageMultisample; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &samples, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexStorage2D_enc(void *self , GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexStorage2D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &levels, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetInternalformativ_enc(void *self , GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLint) * bufSize);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 +  (sizeof(GLint) * bufSize) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetInternalformativ; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glBeginTransformFeedback_enc(void *self , GLenum primitiveMode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBeginTransformFeedback; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &primitiveMode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glEndTransformFeedback_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glEndTransformFeedback; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glGenTransformFeedbacks_enc(void *self , GLsizei n, GLuint* ids)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_ids =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenTransformFeedbacks; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_ids; ptr += 4;
	stream->readback(ids, __size_ids);
}

void glDeleteTransformFeedbacks_enc(void *self , GLsizei n, const GLuint* ids)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_ids =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteTransformFeedbacks; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_ids; ptr += 4;
	memcpy(ptr, ids, __size_ids);ptr += __size_ids;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glBindTransformFeedback_enc(void *self , GLenum target, GLuint id)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindTransformFeedback; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &id, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPauseTransformFeedback_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPauseTransformFeedback; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glResumeTransformFeedback_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glResumeTransformFeedback; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

GLboolean glIsTransformFeedback_enc(void *self , GLuint id)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsTransformFeedback; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &id, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glTransformFeedbackVaryingsAEMU_enc(void *self , GLuint program, GLsizei count, const char* packedVaryings, GLuint packedVaryingsLen, GLenum bufferMode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_packedVaryings =  packedVaryingsLen;
	 const size_t packetSize = 8 + 4 + 4 +  packedVaryingsLen + 4 + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTransformFeedbackVaryingsAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_packedVaryings; ptr += 4;
	memcpy(ptr, packedVaryings, __size_packedVaryings);ptr += __size_packedVaryings;
		memcpy(ptr, &packedVaryingsLen, 4); ptr += 4;
		memcpy(ptr, &bufferMode, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetTransformFeedbackVarying_enc(void *self , GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, char* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_size =  (sizeof(GLsizei));
	const unsigned int __size_type = ((type != NULL) ?  (sizeof(GLenum)) : 0);
	const unsigned int __size_name = ((name != NULL) ?  bufSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) +  (sizeof(GLsizei)) + ((type != NULL) ?  (sizeof(GLenum)) : 0) + ((name != NULL) ?  bufSize : 0) + 4 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTransformFeedbackVarying; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_size; ptr += 4;
	*(unsigned int *)(ptr) = __size_type; ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(size, __size_size);
	if (type != NULL) stream->readback(type, __size_type);
	if (name != NULL) stream->readback(name, __size_name);
}

void glGenSamplers_enc(void *self , GLsizei n, GLuint* samplers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_samplers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenSamplers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_samplers; ptr += 4;
	stream->readback(samplers, __size_samplers);
}

void glDeleteSamplers_enc(void *self , GLsizei n, const GLuint* samplers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_samplers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteSamplers; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_samplers; ptr += 4;
	memcpy(ptr, samplers, __size_samplers);ptr += __size_samplers;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glBindSampler_enc(void *self , GLuint unit, GLuint sampler)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindSampler; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &unit, 4); ptr += 4;
		memcpy(ptr, &sampler, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glSamplerParameterf_enc(void *self , GLuint sampler, GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSamplerParameterf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sampler, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glSamplerParameteri_enc(void *self , GLuint sampler, GLenum pname, GLint param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSamplerParameteri; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sampler, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glSamplerParameterfv_enc(void *self , GLuint sampler, GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSamplerParameterfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sampler, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glSamplerParameteriv_enc(void *self , GLuint sampler, GLenum pname, const GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSamplerParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sampler, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetSamplerParameterfv_enc(void *self , GLuint sampler, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetSamplerParameterfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sampler, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetSamplerParameteriv_enc(void *self , GLuint sampler, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetSamplerParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sampler, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

GLboolean glIsSampler_enc(void *self , GLuint sampler)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsSampler; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &sampler, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glGenQueries_enc(void *self , GLsizei n, GLuint* queries)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_queries =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenQueries; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_queries; ptr += 4;
	stream->readback(queries, __size_queries);
}

void glDeleteQueries_enc(void *self , GLsizei n, const GLuint* queries)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_queries =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteQueries; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_queries; ptr += 4;
	memcpy(ptr, queries, __size_queries);ptr += __size_queries;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glBeginQuery_enc(void *self , GLenum target, GLuint query)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBeginQuery; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &query, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glEndQuery_enc(void *self , GLenum target)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glEndQuery; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetQueryiv_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetQueryiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetQueryObjectuiv_enc(void *self , GLuint query, GLenum pname, GLuint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetQueryObjectuiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &query, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

GLboolean glIsQuery_enc(void *self , GLuint query)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsQuery; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &query, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glProgramParameteri_enc(void *self , GLuint program, GLenum pname, GLint value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramParameteri; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &value, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramBinary_enc(void *self , GLuint program, GLenum binaryFormat, const void* binary, GLsizei length)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_binary =  length;
	 const size_t packetSize = 8 + 4 + 4 +  length + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramBinary; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &binaryFormat, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_binary; ptr += 4;
	memcpy(ptr, binary, __size_binary);ptr += __size_binary;
		memcpy(ptr, &length, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetProgramBinary_enc(void *self , GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_binaryFormat =  (sizeof(GLenum));
	const unsigned int __size_binary =  bufSize;
	 const size_t packetSize = 8 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) +  (sizeof(GLenum)) +  bufSize + 3 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramBinary; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_binaryFormat; ptr += 4;
	*(unsigned int *)(ptr) = __size_binary; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(binaryFormat, __size_binaryFormat);
	stream->readback(binary, __size_binary);
}

GLint glGetFragDataLocation_enc(void *self , GLuint program, const char* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_name =  (strlen(name) + 1);
	 const size_t packetSize = 8 + 4 +  (strlen(name) + 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetFragDataLocation; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	memcpy(ptr, name, __size_name);ptr += __size_name;

	GLint retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGetInteger64v_enc(void *self , GLenum pname, GLint64* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  (glUtilsParamSize(pname) * sizeof(GLint64));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint64)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetInteger64v; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	stream->readback(data, __size_data);
}

void glGetIntegeri_v_enc(void *self , GLenum target, GLuint index, GLint* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  (sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetIntegeri_v; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	stream->readback(data, __size_data);
}

void glGetInteger64i_v_enc(void *self , GLenum target, GLuint index, GLint64* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  (sizeof(GLint64));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLint64)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetInteger64i_v; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	stream->readback(data, __size_data);
}

void glTexImage3D_enc(void *self , GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexImage3D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalFormat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glTexImage3DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexImage3DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalFormat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexStorage3D_enc(void *self , GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexStorage3D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &levels, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexSubImage3D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  glesv2_enc::pixelDataSize3D(self, width, height, depth, format, type, 0) : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexSubImage3D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glTexSubImage3DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexSubImage3DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCompressedTexImage3D_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  imageSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  imageSize : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexImage3D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glCompressedTexImage3DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexImage3DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &border, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCompressedTexSubImage3D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data = ((data != NULL) ?  imageSize : 0);
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + ((data != NULL) ?  imageSize : 0) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexSubImage3D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	if (data != NULL) memcpy(ptr, data, __size_data);ptr += __size_data;
// by RedFinger IsLargeDataArgFunctionPointer
	stream->flush();
}

void glCompressedTexSubImage3DOffsetAEMU_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLuint data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCompressedTexSubImage3DOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &depth, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
		memcpy(ptr, &imageSize, 4); ptr += 4;
		memcpy(ptr, &data, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCopyTexSubImage3D_enc(void *self , GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCopyTexSubImage3D; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &xoffset, 4); ptr += 4;
		memcpy(ptr, &yoffset, 4); ptr += 4;
		memcpy(ptr, &zoffset, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetBooleani_v_enc(void *self , GLenum target, GLuint index, GLboolean* data)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  (sizeof(GLboolean));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLboolean)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetBooleani_v; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	stream->readback(data, __size_data);
}

void glMemoryBarrier_enc(void *self , GLbitfield barriers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMemoryBarrier; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &barriers, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glMemoryBarrierByRegion_enc(void *self , GLbitfield barriers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMemoryBarrierByRegion; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &barriers, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGenProgramPipelines_enc(void *self , GLsizei n, GLuint* pipelines)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pipelines =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenProgramPipelines; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_pipelines; ptr += 4;
	stream->readback(pipelines, __size_pipelines);
}

void glDeleteProgramPipelines_enc(void *self , GLsizei n, const GLuint* pipelines)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_pipelines =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteProgramPipelines; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_pipelines; ptr += 4;
	memcpy(ptr, pipelines, __size_pipelines);ptr += __size_pipelines;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glBindProgramPipeline_enc(void *self , GLuint pipeline)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindProgramPipeline; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pipeline, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetProgramPipelineiv_enc(void *self , GLuint pipeline, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramPipelineiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pipeline, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetProgramPipelineInfoLog_enc(void *self , GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  sizeof(GLsizei) : 0);
	const unsigned int __size_infoLog =  bufSize;
	 const size_t packetSize = 8 + 4 + 4 + ((length != NULL) ?  sizeof(GLsizei) : 0) +  bufSize + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramPipelineInfoLog; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pipeline, 4); ptr += 4;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_infoLog; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(infoLog, __size_infoLog);
}

void glValidateProgramPipeline_enc(void *self , GLuint pipeline)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glValidateProgramPipeline; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pipeline, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

GLboolean glIsProgramPipeline_enc(void *self , GLuint pipeline)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsProgramPipeline; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pipeline, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glUseProgramStages_enc(void *self , GLuint pipeline, GLbitfield stages, GLuint program)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glUseProgramStages; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pipeline, 4); ptr += 4;
		memcpy(ptr, &stages, 4); ptr += 4;
		memcpy(ptr, &program, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glActiveShaderProgram_enc(void *self , GLuint pipeline, GLuint program)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glActiveShaderProgram; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pipeline, 4); ptr += 4;
		memcpy(ptr, &program, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

GLuint glCreateShaderProgramvAEMU_enc(void *self , GLenum type, GLsizei count, const char* packedStrings, GLuint packedLen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_packedStrings =  packedLen;
	 const size_t packetSize = 8 + 4 + 4 +  packedLen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCreateShaderProgramvAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_packedStrings; ptr += 4;
	memcpy(ptr, packedStrings, __size_packedStrings);ptr += __size_packedStrings;
		memcpy(ptr, &packedLen, 4); ptr += 4;

	GLuint retval;
	stream->readback(&retval, 4);
	return retval;
}

void glProgramUniform1f_enc(void *self , GLuint program, GLint location, GLfloat v0)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform1f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform2f_enc(void *self , GLuint program, GLint location, GLfloat v0, GLfloat v1)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform2f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform3f_enc(void *self , GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform3f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform4f_enc(void *self , GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform4f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
		memcpy(ptr, &v3, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform1i_enc(void *self , GLuint program, GLint location, GLint v0)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform1i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform2i_enc(void *self , GLuint program, GLint location, GLint v0, GLint v1)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform2i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform3i_enc(void *self , GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform3i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform4i_enc(void *self , GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform4i; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
		memcpy(ptr, &v3, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform1ui_enc(void *self , GLuint program, GLint location, GLuint v0)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform1ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform2ui_enc(void *self , GLuint program, GLint location, GLint v0, GLuint v1)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform2ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform3ui_enc(void *self , GLuint program, GLint location, GLint v0, GLint v1, GLuint v2)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform3ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform4ui_enc(void *self , GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLuint v3)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform4ui; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &v0, 4); ptr += 4;
		memcpy(ptr, &v1, 4); ptr += 4;
		memcpy(ptr, &v2, 4); ptr += 4;
		memcpy(ptr, &v3, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glProgramUniform1fv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform1fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform2fv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 2 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 2 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform3fv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 3 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 3 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform4fv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform1iv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform1iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform2iv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 2 * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 2 * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform2iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform3iv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 3 * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 3 * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform3iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform4iv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 4 * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 4 * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform4iv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform1uiv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform1uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform2uiv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 2 * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 2 * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform2uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform3uiv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 3 * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 3 * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform3uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniform4uiv_enc(void *self , GLuint program, GLint location, GLsizei count, const GLuint* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 4 * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (count * 4 * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniform4uiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix2fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix3fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 9 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 9 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix4fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 16 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 16 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix2x3fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 6 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 6 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix2x3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix3x2fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 6 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 6 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix3x2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix2x4fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 8 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 8 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix2x4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix4x2fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 8 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 8 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix4x2fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix3x4fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 12 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 12 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix3x4fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glProgramUniformMatrix4x3fv_enc(void *self , GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_value =  (count * 12 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 +  (count * 12 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glProgramUniformMatrix4x3fv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &location, 4); ptr += 4;
		memcpy(ptr, &count, 4); ptr += 4;
		memcpy(ptr, &transpose, 1); ptr += 1;
	*(unsigned int *)(ptr) = __size_value; ptr += 4;
	memcpy(ptr, value, __size_value);ptr += __size_value;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetProgramInterfaceiv_enc(void *self , GLuint program, GLenum programInterface, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramInterfaceiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &programInterface, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetProgramResourceiv_enc(void *self , GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_props =  (propCount * sizeof(GLenum));
	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_params =  (bufSize * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 +  (propCount * sizeof(GLenum)) + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) +  (bufSize * sizeof(GLint)) + 3 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramResourceiv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &programInterface, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &propCount, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_props; ptr += 4;
	memcpy(ptr, props, __size_props);ptr += __size_props;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(params, __size_params);
}

GLuint glGetProgramResourceIndex_enc(void *self , GLuint program, GLenum programInterface, const char* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_name =  (strlen(name) + 1);
	 const size_t packetSize = 8 + 4 + 4 +  (strlen(name) + 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramResourceIndex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &programInterface, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	memcpy(ptr, name, __size_name);ptr += __size_name;

	GLuint retval;
	stream->readback(&retval, 4);
	return retval;
}

GLint glGetProgramResourceLocation_enc(void *self , GLuint program, GLenum programInterface, const char* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_name =  (strlen(name) + 1);
	 const size_t packetSize = 8 + 4 + 4 +  (strlen(name) + 1) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramResourceLocation; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &programInterface, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	memcpy(ptr, name, __size_name);ptr += __size_name;

	GLint retval;
	stream->readback(&retval, 4);
	return retval;
}

void glGetProgramResourceName_enc(void *self , GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, char* name)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_length = ((length != NULL) ?  (sizeof(GLsizei)) : 0);
	const unsigned int __size_name =  bufSize;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + ((length != NULL) ?  (sizeof(GLsizei)) : 0) +  bufSize + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetProgramResourceName; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &program, 4); ptr += 4;
		memcpy(ptr, &programInterface, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
		memcpy(ptr, &bufSize, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_length; ptr += 4;
	*(unsigned int *)(ptr) = __size_name; ptr += 4;
	if (length != NULL) stream->readback(length, __size_length);
	stream->readback(name, __size_name);
}

void glBindImageTexture_enc(void *self , GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindImageTexture; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &unit, 4); ptr += 4;
		memcpy(ptr, &texture, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &layered, 1); ptr += 1;
		memcpy(ptr, &layer, 4); ptr += 4;
		memcpy(ptr, &access, 4); ptr += 4;
		memcpy(ptr, &format, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDispatchCompute_enc(void *self , GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDispatchCompute; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &num_groups_x, 4); ptr += 4;
		memcpy(ptr, &num_groups_y, 4); ptr += 4;
		memcpy(ptr, &num_groups_z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDispatchComputeIndirect_enc(void *self , GLintptr indirect)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDispatchComputeIndirect; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &indirect, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBindVertexBuffer_enc(void *self , GLuint bindingindex, GLuint buffer, GLintptr offset, GLintptr stride)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindVertexBuffer; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &bindingindex, 4); ptr += 4;
		memcpy(ptr, &buffer, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttribBinding_enc(void *self , GLuint attribindex, GLuint bindingindex)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribBinding; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &attribindex, 4); ptr += 4;
		memcpy(ptr, &bindingindex, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttribFormat_enc(void *self , GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 1 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribFormat; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &attribindex, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &normalized, 1); ptr += 1;
		memcpy(ptr, &relativeoffset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexAttribIFormat_enc(void *self , GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexAttribIFormat; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &attribindex, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &relativeoffset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexBindingDivisor_enc(void *self , GLuint bindingindex, GLuint divisor)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexBindingDivisor; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &bindingindex, 4); ptr += 4;
		memcpy(ptr, &divisor, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawArraysIndirectDataAEMU_enc(void *self , GLenum mode, const void* indirect, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_indirect =  datalen;
	 const size_t packetSize = 8 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawArraysIndirectDataAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_indirect; ptr += 4;
	memcpy(ptr, indirect, __size_indirect);ptr += __size_indirect;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDrawArraysIndirectOffsetAEMU_enc(void *self , GLenum mode, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawArraysIndirectOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawElementsIndirectDataAEMU_enc(void *self , GLenum mode, GLenum type, const void* indirect, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_indirect =  datalen;
	 const size_t packetSize = 8 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawElementsIndirectDataAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_indirect; ptr += 4;
	memcpy(ptr, indirect, __size_indirect);ptr += __size_indirect;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDrawElementsIndirectOffsetAEMU_enc(void *self , GLenum mode, GLenum type, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawElementsIndirectOffsetAEMU; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexStorage2DMultisample_enc(void *self , GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 1 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexStorage2DMultisample; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &samples, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
		memcpy(ptr, &fixedsamplelocations, 1); ptr += 1;
//by RedFinger emugen
	stream->flush();
}

void glSampleMaski_enc(void *self , GLuint maskNumber, GLbitfield mask)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSampleMaski; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &maskNumber, 4); ptr += 4;
		memcpy(ptr, &mask, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetMultisamplefv_enc(void *self , GLenum pname, GLuint index, GLfloat* val)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_val =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetMultisamplefv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &index, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_val; ptr += 4;
	stream->readback(val, __size_val);
}

void glFramebufferParameteri_enc(void *self , GLenum target, GLenum pname, GLint param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFramebufferParameteri; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetFramebufferParameteriv_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetFramebufferParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexLevelParameterfv_enc(void *self , GLenum target, GLint level, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexLevelParameterfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexLevelParameteriv_enc(void *self , GLenum target, GLint level, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexLevelParameteriv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glAlphaFunc_enc(void *self , GLenum func, GLclampf ref)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glAlphaFunc; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &func, 4); ptr += 4;
		memcpy(ptr, &ref, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClipPlanef_enc(void *self , GLenum plane, const GLfloat* equation)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(float));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(float)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClipPlanef; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &plane, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glColor4f_enc(void *self , GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glColor4f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 4); ptr += 4;
		memcpy(ptr, &green, 4); ptr += 4;
		memcpy(ptr, &blue, 4); ptr += 4;
		memcpy(ptr, &alpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFogf_enc(void *self , GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFogf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFogfv_enc(void *self , GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFogfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glFrustumf_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFrustumf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetClipPlanef_enc(void *self , GLenum pname, GLfloat* eqn)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetClipPlanef; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glGetLightfv_enc(void *self , GLenum light, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetLightfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetMaterialfv_enc(void *self , GLenum face, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetMaterialfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnvfv_enc(void *self , GLenum env, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexEnvfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &env, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glLightModelf_enc(void *self , GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightModelf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLightModelfv_enc(void *self , GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightModelfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glLightf_enc(void *self , GLenum light, GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLightfv_enc(void *self , GLenum light, GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glLoadMatrixf_enc(void *self , const GLfloat* m)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfloat));
	 const size_t packetSize = 8 +  (16 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLoadMatrixf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMaterialf_enc(void *self , GLenum face, GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMaterialf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glMaterialfv_enc(void *self , GLenum face, GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMaterialfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMultMatrixf_enc(void *self , const GLfloat* m)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfloat));
	 const size_t packetSize = 8 +  (16 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMultMatrixf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMultiTexCoord4f_enc(void *self , GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMultiTexCoord4f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &s, 4); ptr += 4;
		memcpy(ptr, &t, 4); ptr += 4;
		memcpy(ptr, &r, 4); ptr += 4;
		memcpy(ptr, &q, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glNormal3f_enc(void *self , GLfloat nx, GLfloat ny, GLfloat nz)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glNormal3f; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &nx, 4); ptr += 4;
		memcpy(ptr, &ny, 4); ptr += 4;
		memcpy(ptr, &nz, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glOrthof_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glOrthof; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPointParameterf_enc(void *self , GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointParameterf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPointParameterfv_enc(void *self , GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointParameterfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glPointSize_enc(void *self , GLfloat size)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointSize; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glRotatef_enc(void *self , GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glRotatef; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &angle, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glScalef_enc(void *self , GLfloat x, GLfloat y, GLfloat z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glScalef; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexEnvf_enc(void *self , GLenum target, GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnvf; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexEnvfv_enc(void *self , GLenum target, GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnvfv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTranslatef_enc(void *self , GLfloat x, GLfloat y, GLfloat z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTranslatef; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glAlphaFuncx_enc(void *self , GLenum func, GLclampx ref)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glAlphaFuncx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &func, 4); ptr += 4;
		memcpy(ptr, &ref, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearColorx_enc(void *self , GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearColorx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 4); ptr += 4;
		memcpy(ptr, &green, 4); ptr += 4;
		memcpy(ptr, &blue, 4); ptr += 4;
		memcpy(ptr, &alpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearDepthx_enc(void *self , GLclampx depth)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearDepthx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &depth, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClientActiveTexture_enc(void *self , GLenum texture)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClientActiveTexture; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &texture, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glColor4ub_enc(void *self , GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 1 + 1 + 1 + 1 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glColor4ub; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 1); ptr += 1;
		memcpy(ptr, &green, 1); ptr += 1;
		memcpy(ptr, &blue, 1); ptr += 1;
		memcpy(ptr, &alpha, 1); ptr += 1;
//by RedFinger emugen
	stream->flush();
}

void glColor4x_enc(void *self , GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glColor4x; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 4); ptr += 4;
		memcpy(ptr, &green, 4); ptr += 4;
		memcpy(ptr, &blue, 4); ptr += 4;
		memcpy(ptr, &alpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDepthRangex_enc(void *self , GLclampx zNear, GLclampx zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDepthRangex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDisableClientState_enc(void *self , GLenum array)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDisableClientState; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &array, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glEnableClientState_enc(void *self , GLenum array)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glEnableClientState; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &array, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFogx_enc(void *self , GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFogx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFogxv_enc(void *self , GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFogxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glFrustumx_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFrustumx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClipPlanex_enc(void *self , GLenum pname, const GLfixed* eqn)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClipPlanex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	memcpy(ptr, eqn, __size_eqn);ptr += __size_eqn;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetFixedv_enc(void *self , GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetFixedv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetLightxv_enc(void *self , GLenum light, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetLightxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetMaterialxv_enc(void *self , GLenum face, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetMaterialxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnviv_enc(void *self , GLenum env, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexEnviv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &env, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnvxv_enc(void *self , GLenum env, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexEnvxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &env, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexParameterxv_enc(void *self , GLenum target, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexParameterxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glLightModelx_enc(void *self , GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightModelx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLightModelxv_enc(void *self , GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightModelxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glLightx_enc(void *self , GLenum light, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLightxv_enc(void *self , GLenum light, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glLineWidthx_enc(void *self , GLfixed width)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLineWidthx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &width, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLoadIdentity_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLoadIdentity; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glLoadMatrixx_enc(void *self , const GLfixed* m)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 const size_t packetSize = 8 +  (16 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLoadMatrixx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glLogicOp_enc(void *self , GLenum opcode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLogicOp; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &opcode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glMaterialx_enc(void *self , GLenum face, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMaterialx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glMaterialxv_enc(void *self , GLenum face, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMaterialxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMatrixMode_enc(void *self , GLenum mode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMatrixMode; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glMultMatrixx_enc(void *self , const GLfixed* m)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 const size_t packetSize = 8 +  (16 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMultMatrixx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMultiTexCoord4x_enc(void *self , GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMultiTexCoord4x; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &s, 4); ptr += 4;
		memcpy(ptr, &t, 4); ptr += 4;
		memcpy(ptr, &r, 4); ptr += 4;
		memcpy(ptr, &q, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glNormal3x_enc(void *self , GLfixed nx, GLfixed ny, GLfixed nz)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glNormal3x; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &nx, 4); ptr += 4;
		memcpy(ptr, &ny, 4); ptr += 4;
		memcpy(ptr, &nz, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glOrthox_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glOrthox; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPointParameterx_enc(void *self , GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointParameterx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPointParameterxv_enc(void *self , GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointParameterxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glPointSizex_enc(void *self , GLfixed size)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointSizex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPolygonOffsetx_enc(void *self , GLfixed factor, GLfixed units)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPolygonOffsetx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &factor, 4); ptr += 4;
		memcpy(ptr, &units, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPopMatrix_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPopMatrix; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glPushMatrix_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPushMatrix; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

void glRotatex_enc(void *self , GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glRotatex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &angle, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glSampleCoveragex_enc(void *self , GLclampx value, GLboolean invert)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 1 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSampleCoveragex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &value, 4); ptr += 4;
		memcpy(ptr, &invert, 1); ptr += 1;
//by RedFinger emugen
	stream->flush();
}

void glScalex_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glScalex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glShadeModel_enc(void *self , GLenum mode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glShadeModel; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexEnvi_enc(void *self , GLenum target, GLenum pname, GLint param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnvi; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexEnvx_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnvx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexEnviv_enc(void *self , GLenum target, GLenum pname, const GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnviv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexEnvxv_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnvxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexParameterx_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameterx; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexParameterxv_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameterxv; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTranslatex_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTranslatex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexPointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glColorPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glColorPointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glNormalPointerOffset_enc(void *self , GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glNormalPointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPointSizePointerOffset_enc(void *self , GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointSizePointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexCoordPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexCoordPointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glWeightPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glWeightPointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glMatrixIndexPointerOffset_enc(void *self , GLint size, GLenum type, GLsizei stride, GLuint offset)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMatrixIndexPointerOffset; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
		memcpy(ptr, &offset, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glVertexPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glVertexPointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glColorPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glColorPointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glNormalPointerData_enc(void *self , GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glNormalPointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, 3, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexCoordPointerData_enc(void *self , GLint unit, GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexCoordPointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &unit, 4); ptr += 4;
		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, size, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glPointSizePointerData_enc(void *self , GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointSizePointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char *)data, 1, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glWeightPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glWeightPointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char*)data, size, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMatrixIndexPointerData_enc(void *self , GLint size, GLenum type, GLsizei stride, void* data, GLuint datalen)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_data =  datalen;
	 const size_t packetSize = 8 + 4 + 4 + 4 +  datalen + 4 + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMatrixIndexPointerData; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
		memcpy(ptr, &type, 4); ptr += 4;
		memcpy(ptr, &stride, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_data; ptr += 4;
	 glUtilsPackPointerData((unsigned char *)ptr, (unsigned char*)data, size, type, stride, datalen);ptr += __size_data;
		memcpy(ptr, &datalen, 4); ptr += 4;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glBlendEquationSeparateOES_enc(void *self , GLenum modeRGB, GLenum modeAlpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendEquationSeparateOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &modeRGB, 4); ptr += 4;
		memcpy(ptr, &modeAlpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlendFuncSeparateOES_enc(void *self , GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendFuncSeparateOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &srcRGB, 4); ptr += 4;
		memcpy(ptr, &dstRGB, 4); ptr += 4;
		memcpy(ptr, &srcAlpha, 4); ptr += 4;
		memcpy(ptr, &dstAlpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glBlendEquationOES_enc(void *self , GLenum mode)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBlendEquationOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &mode, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawTexsOES_enc(void *self , GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 2 + 2 + 2 + 2 + 2 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexsOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 2); ptr += 2;
		memcpy(ptr, &y, 2); ptr += 2;
		memcpy(ptr, &z, 2); ptr += 2;
		memcpy(ptr, &width, 2); ptr += 2;
		memcpy(ptr, &height, 2); ptr += 2;
//by RedFinger emugen
	stream->flush();
}

void glDrawTexiOES_enc(void *self , GLint x, GLint y, GLint z, GLint width, GLint height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexiOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawTexxOES_enc(void *self , GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawTexsvOES_enc(void *self , const GLshort* coords)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLshort));
	 const size_t packetSize = 8 +  (5 * sizeof(GLshort)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexsvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDrawTexivOES_enc(void *self , const GLint* coords)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLint));
	 const size_t packetSize = 8 +  (5 * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexivOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDrawTexxvOES_enc(void *self , const GLfixed* coords)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLfixed));
	 const size_t packetSize = 8 +  (5 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glDrawTexfOES_enc(void *self , GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexfOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDrawTexfvOES_enc(void *self , const GLfloat* coords)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_coords =  (5 * sizeof(GLfloat));
	 const size_t packetSize = 8 +  (5 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDrawTexfvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_coords; ptr += 4;
	memcpy(ptr, coords, __size_coords);ptr += __size_coords;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glAlphaFuncxOES_enc(void *self , GLenum func, GLclampx ref)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glAlphaFuncxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &func, 4); ptr += 4;
		memcpy(ptr, &ref, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearColorxOES_enc(void *self , GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearColorxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 4); ptr += 4;
		memcpy(ptr, &green, 4); ptr += 4;
		memcpy(ptr, &blue, 4); ptr += 4;
		memcpy(ptr, &alpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClearDepthxOES_enc(void *self , GLclampx depth)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearDepthxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &depth, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClipPlanexOES_enc(void *self , GLenum plane, const GLfixed* equation)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClipPlanexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &plane, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glClipPlanexIMG_enc(void *self , GLenum plane, const GLfixed* equation)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClipPlanexIMG; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &plane, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glColor4xOES_enc(void *self , GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glColor4xOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &red, 4); ptr += 4;
		memcpy(ptr, &green, 4); ptr += 4;
		memcpy(ptr, &blue, 4); ptr += 4;
		memcpy(ptr, &alpha, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDepthRangexOES_enc(void *self , GLclampx zNear, GLclampx zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDepthRangexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFogxOES_enc(void *self , GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFogxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFogxvOES_enc(void *self , GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFogxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glFrustumxOES_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFrustumxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetClipPlanexOES_enc(void *self , GLenum pname, GLfixed* eqn)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetClipPlanexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glGetClipPlanex_enc(void *self , GLenum pname, GLfixed* eqn)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetClipPlanex; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glGetFixedvOES_enc(void *self , GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetFixedvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetLightxvOES_enc(void *self , GLenum light, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetLightxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetMaterialxvOES_enc(void *self , GLenum face, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetMaterialxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexEnvxvOES_enc(void *self , GLenum env, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexEnvxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &env, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGetTexParameterxvOES_enc(void *self , GLenum target, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexParameterxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glLightModelxOES_enc(void *self , GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightModelxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLightModelxvOES_enc(void *self , GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightModelxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glLightxOES_enc(void *self , GLenum light, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLightxvOES_enc(void *self , GLenum light, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLightxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &light, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glLineWidthxOES_enc(void *self , GLfixed width)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLineWidthxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &width, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLoadMatrixxOES_enc(void *self , const GLfixed* m)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 const size_t packetSize = 8 +  (16 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLoadMatrixxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMaterialxOES_enc(void *self , GLenum face, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMaterialxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glMaterialxvOES_enc(void *self , GLenum face, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMaterialxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &face, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMultMatrixxOES_enc(void *self , const GLfixed* m)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_m =  (16 * sizeof(GLfixed));
	 const size_t packetSize = 8 +  (16 * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMultMatrixxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_m; ptr += 4;
	memcpy(ptr, m, __size_m);ptr += __size_m;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glMultiTexCoord4xOES_enc(void *self , GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glMultiTexCoord4xOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &s, 4); ptr += 4;
		memcpy(ptr, &t, 4); ptr += 4;
		memcpy(ptr, &r, 4); ptr += 4;
		memcpy(ptr, &q, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glNormal3xOES_enc(void *self , GLfixed nx, GLfixed ny, GLfixed nz)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glNormal3xOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &nx, 4); ptr += 4;
		memcpy(ptr, &ny, 4); ptr += 4;
		memcpy(ptr, &nz, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glOrthoxOES_enc(void *self , GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glOrthoxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPointParameterxOES_enc(void *self , GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointParameterxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPointParameterxvOES_enc(void *self , GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointParameterxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glPointSizexOES_enc(void *self , GLfixed size)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPointSizexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &size, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glPolygonOffsetxOES_enc(void *self , GLfixed factor, GLfixed units)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glPolygonOffsetxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &factor, 4); ptr += 4;
		memcpy(ptr, &units, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glRotatexOES_enc(void *self , GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glRotatexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &angle, 4); ptr += 4;
		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glSampleCoveragexOES_enc(void *self , GLclampx value, GLboolean invert)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 1 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glSampleCoveragexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &value, 4); ptr += 4;
		memcpy(ptr, &invert, 1); ptr += 1;
//by RedFinger emugen
	stream->flush();
}

void glScalexOES_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glScalexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexEnvxOES_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnvxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexEnvxvOES_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexEnvxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexParameterxOES_enc(void *self , GLenum target, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameterxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexParameterxvOES_enc(void *self , GLenum target, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexParameterxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTranslatexOES_enc(void *self , GLfixed x, GLfixed y, GLfixed z)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTranslatexOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &x, 4); ptr += 4;
		memcpy(ptr, &y, 4); ptr += 4;
		memcpy(ptr, &z, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

GLboolean glIsRenderbufferOES_enc(void *self , GLuint renderbuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsRenderbufferOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &renderbuffer, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glBindRenderbufferOES_enc(void *self , GLenum target, GLuint renderbuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindRenderbufferOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &renderbuffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDeleteRenderbuffersOES_enc(void *self , GLsizei n, const GLuint* renderbuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_renderbuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteRenderbuffersOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_renderbuffers; ptr += 4;
	memcpy(ptr, renderbuffers, __size_renderbuffers);ptr += __size_renderbuffers;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGenRenderbuffersOES_enc(void *self , GLsizei n, GLuint* renderbuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_renderbuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenRenderbuffersOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_renderbuffers; ptr += 4;
	stream->readback(renderbuffers, __size_renderbuffers);
}

void glRenderbufferStorageOES_enc(void *self , GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glRenderbufferStorageOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &internalformat, 4); ptr += 4;
		memcpy(ptr, &width, 4); ptr += 4;
		memcpy(ptr, &height, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetRenderbufferParameterivOES_enc(void *self , GLenum target, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetRenderbufferParameterivOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

GLboolean glIsFramebufferOES_enc(void *self , GLuint framebuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glIsFramebufferOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &framebuffer, 4); ptr += 4;

	GLboolean retval;
	stream->readback(&retval, 1);
	return retval;
}

void glBindFramebufferOES_enc(void *self , GLenum target, GLuint framebuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glBindFramebufferOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &framebuffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glDeleteFramebuffersOES_enc(void *self , GLsizei n, const GLuint* framebuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_framebuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDeleteFramebuffersOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_framebuffers; ptr += 4;
	memcpy(ptr, framebuffers, __size_framebuffers);ptr += __size_framebuffers;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGenFramebuffersOES_enc(void *self , GLsizei n, GLuint* framebuffers)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_framebuffers =  (n * sizeof(GLuint));
	 const size_t packetSize = 8 + 4 +  (n * sizeof(GLuint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenFramebuffersOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &n, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_framebuffers; ptr += 4;
	stream->readback(framebuffers, __size_framebuffers);
}

GLenum glCheckFramebufferStatusOES_enc(void *self , GLenum target)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCheckFramebufferStatusOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;

	GLenum retval;
	stream->readback(&retval, 4);
	return retval;
}

void glFramebufferRenderbufferOES_enc(void *self , GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFramebufferRenderbufferOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &renderbuffertarget, 4); ptr += 4;
		memcpy(ptr, &renderbuffer, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFramebufferTexture2DOES_enc(void *self , GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFramebufferTexture2DOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &textarget, 4); ptr += 4;
		memcpy(ptr, &texture, 4); ptr += 4;
		memcpy(ptr, &level, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glGetFramebufferAttachmentParameterivOES_enc(void *self , GLenum target, GLenum attachment, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetFramebufferAttachmentParameterivOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
		memcpy(ptr, &attachment, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	stream->readback(params, __size_params);
}

void glGenerateMipmapOES_enc(void *self , GLenum target)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGenerateMipmapOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &target, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glCurrentPaletteMatrixOES_enc(void *self , GLuint matrixpaletteindex)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glCurrentPaletteMatrixOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &matrixpaletteindex, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glLoadPaletteFromModelViewMatrixOES_enc(void *self )
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 0 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glLoadPaletteFromModelViewMatrixOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

//by RedFinger emugen
	stream->flush();
}

GLbitfield glQueryMatrixxOES_enc(void *self , GLfixed* mantissa, GLint* exponent)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_mantissa =  (16 * sizeof(GLfixed));
	const unsigned int __size_exponent =  (16 * sizeof(GLfixed));
	 const size_t packetSize = 8 +  (16 * sizeof(GLfixed)) +  (16 * sizeof(GLfixed)) + 2 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glQueryMatrixxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

	*(unsigned int *)(ptr) = __size_mantissa; ptr += 4;
	*(unsigned int *)(ptr) = __size_exponent; ptr += 4;
	stream->readback(mantissa, __size_mantissa);
	stream->readback(exponent, __size_exponent);

	GLbitfield retval;
	stream->readback(&retval, 4);
	return retval;
}

void glDepthRangefOES_enc(void *self , GLclampf zNear, GLclampf zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glDepthRangefOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glFrustumfOES_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glFrustumfOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glOrthofOES_enc(void *self , GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glOrthofOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &left, 4); ptr += 4;
		memcpy(ptr, &right, 4); ptr += 4;
		memcpy(ptr, &bottom, 4); ptr += 4;
		memcpy(ptr, &top, 4); ptr += 4;
		memcpy(ptr, &zNear, 4); ptr += 4;
		memcpy(ptr, &zFar, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glClipPlanefOES_enc(void *self , GLenum plane, const GLfloat* equation)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClipPlanefOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &plane, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glClipPlanefIMG_enc(void *self , GLenum plane, const GLfloat* equation)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_equation =  (4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClipPlanefIMG; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &plane, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_equation; ptr += 4;
	memcpy(ptr, equation, __size_equation);ptr += __size_equation;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetClipPlanefOES_enc(void *self , GLenum pname, GLfloat* eqn)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_eqn =  (4 * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 +  (4 * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetClipPlanefOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_eqn; ptr += 4;
	stream->readback(eqn, __size_eqn);
}

void glClearDepthfOES_enc(void *self , GLclampf depth)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glClearDepthfOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &depth, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexGenfOES_enc(void *self , GLenum coord, GLenum pname, GLfloat param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexGenfOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexGenfvOES_enc(void *self , GLenum coord, GLenum pname, const GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexGenfvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexGeniOES_enc(void *self , GLenum coord, GLenum pname, GLint param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexGeniOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexGenivOES_enc(void *self , GLenum coord, GLenum pname, const GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexGenivOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glTexGenxOES_enc(void *self , GLenum coord, GLenum pname, GLfixed param)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	 const size_t packetSize = 8 + 4 + 4 + 4 + 0 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexGenxOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
		memcpy(ptr, &param, 4); ptr += 4;
//by RedFinger emugen
	stream->flush();
}

void glTexGenxvOES_enc(void *self , GLenum coord, GLenum pname, const GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glTexGenxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetTexGenfvOES_enc(void *self , GLenum coord, GLenum pname, GLfloat* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfloat));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfloat)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexGenfvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetTexGenivOES_enc(void *self , GLenum coord, GLenum pname, GLint* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLint));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLint)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexGenivOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

void glGetTexGenxvOES_enc(void *self , GLenum coord, GLenum pname, GLfixed* params)
{

	gles1_encoder_context_t *ctx = (gles1_encoder_context_t *)self;
	IOStream *stream = ctx->m_stream;

	const unsigned int __size_params =  (glUtilsParamSize(pname) * sizeof(GLfixed));
	 const size_t packetSize = 8 + 4 + 4 +  (glUtilsParamSize(pname) * sizeof(GLfixed)) + 1 * 4;
	 unsigned char *ptr = stream->alloc(packetSize);

	int tmp = OP_glGetTexGenxvOES; memcpy(ptr, &tmp, 4); ptr += 4;
	memcpy(ptr, &packetSize, 4);  ptr += 4;

		memcpy(ptr, &coord, 4); ptr += 4;
		memcpy(ptr, &pname, 4); ptr += 4;
	*(unsigned int *)(ptr) = __size_params; ptr += 4;
	memcpy(ptr, params, __size_params);ptr += __size_params;
// by RedFinger IsSmallParameterFunctionPointer
	stream->flush();
}

gles1_encoder_context_t::gles1_encoder_context_t(IOStream *stream)
{
	m_stream = stream;

	set_glActiveTexture(glActiveTexture_enc);
	set_glAttachShader(glAttachShader_enc);
	set_glBindAttribLocation(glBindAttribLocation_enc);
	set_glBindBuffer(glBindBuffer_enc);
	set_glBindFramebuffer(glBindFramebuffer_enc);
	set_glBindRenderbuffer(glBindRenderbuffer_enc);
	set_glBindTexture(glBindTexture_enc);
	set_glBlendColor(glBlendColor_enc);
	set_glBlendEquation(glBlendEquation_enc);
	set_glBlendEquationSeparate(glBlendEquationSeparate_enc);
	set_glBlendFunc(glBlendFunc_enc);
	set_glBlendFuncSeparate(glBlendFuncSeparate_enc);
	set_glBufferData(glBufferData_enc);
	set_glBufferSubData(glBufferSubData_enc);
	set_glCheckFramebufferStatus(glCheckFramebufferStatus_enc);
	set_glClear(glClear_enc);
	set_glClearColor(glClearColor_enc);
	set_glClearDepthf(glClearDepthf_enc);
	set_glClearStencil(glClearStencil_enc);
	set_glColorMask(glColorMask_enc);
	set_glCompileShader(glCompileShader_enc);
	set_glCompressedTexImage2D(glCompressedTexImage2D_enc);
	set_glCompressedTexSubImage2D(glCompressedTexSubImage2D_enc);
	set_glCopyTexImage2D(glCopyTexImage2D_enc);
	set_glCopyTexSubImage2D(glCopyTexSubImage2D_enc);
	set_glCreateProgram(glCreateProgram_enc);
	set_glCreateShader(glCreateShader_enc);
	set_glCullFace(glCullFace_enc);
	set_glDeleteBuffers(glDeleteBuffers_enc);
	set_glDeleteFramebuffers(glDeleteFramebuffers_enc);
	set_glDeleteProgram(glDeleteProgram_enc);
	set_glDeleteRenderbuffers(glDeleteRenderbuffers_enc);
	set_glDeleteShader(glDeleteShader_enc);
	set_glDeleteTextures(glDeleteTextures_enc);
	set_glDepthFunc(glDepthFunc_enc);
	set_glDepthMask(glDepthMask_enc);
	set_glDepthRangef(glDepthRangef_enc);
	set_glDetachShader(glDetachShader_enc);
	set_glDisable(glDisable_enc);
	set_glDisableVertexAttribArray(glDisableVertexAttribArray_enc);
	set_glDrawArrays(glDrawArrays_enc);
	set_glDrawElements((glDrawElements_client_proc_t)(enc_unsupported));
	set_glEnable(glEnable_enc);
	set_glEnableVertexAttribArray(glEnableVertexAttribArray_enc);
	set_glFinish(glFinish_enc);
	set_glFlush(glFlush_enc);
	set_glFramebufferRenderbuffer(glFramebufferRenderbuffer_enc);
	set_glFramebufferTexture2D(glFramebufferTexture2D_enc);
	set_glFrontFace(glFrontFace_enc);
	set_glGenBuffers(glGenBuffers_enc);
	set_glGenerateMipmap(glGenerateMipmap_enc);
	set_glGenFramebuffers(glGenFramebuffers_enc);
	set_glGenRenderbuffers(glGenRenderbuffers_enc);
	set_glGenTextures(glGenTextures_enc);
	set_glGetActiveAttrib(glGetActiveAttrib_enc);
	set_glGetActiveUniform(glGetActiveUniform_enc);
	set_glGetAttachedShaders(glGetAttachedShaders_enc);
	set_glGetAttribLocation(glGetAttribLocation_enc);
	set_glGetBooleanv(glGetBooleanv_enc);
	set_glGetBufferParameteriv(glGetBufferParameteriv_enc);
	set_glGetError(glGetError_enc);
	set_glGetFloatv(glGetFloatv_enc);
	set_glGetFramebufferAttachmentParameteriv(glGetFramebufferAttachmentParameteriv_enc);
	set_glGetIntegerv(glGetIntegerv_enc);
	set_glGetProgramiv(glGetProgramiv_enc);
	set_glGetProgramInfoLog(glGetProgramInfoLog_enc);
	set_glGetRenderbufferParameteriv(glGetRenderbufferParameteriv_enc);
	set_glGetShaderiv(glGetShaderiv_enc);
	set_glGetShaderInfoLog(glGetShaderInfoLog_enc);
	set_glGetShaderPrecisionFormat(glGetShaderPrecisionFormat_enc);
	set_glGetShaderSource(glGetShaderSource_enc);
	set_glGetString((glGetString_client_proc_t)(enc_unsupported));
	set_glGetTexParameterfv(glGetTexParameterfv_enc);
	set_glGetTexParameteriv(glGetTexParameteriv_enc);
	set_glGetUniformfv(glGetUniformfv_enc);
	set_glGetUniformiv(glGetUniformiv_enc);
	set_glGetUniformLocation(glGetUniformLocation_enc);
	set_glGetVertexAttribfv(glGetVertexAttribfv_enc);
	set_glGetVertexAttribiv(glGetVertexAttribiv_enc);
	set_glGetVertexAttribPointerv((glGetVertexAttribPointerv_client_proc_t)(enc_unsupported));
	set_glHint(glHint_enc);
	set_glIsBuffer(glIsBuffer_enc);
	set_glIsEnabled(glIsEnabled_enc);
	set_glIsFramebuffer(glIsFramebuffer_enc);
	set_glIsProgram(glIsProgram_enc);
	set_glIsRenderbuffer(glIsRenderbuffer_enc);
	set_glIsShader(glIsShader_enc);
	set_glIsTexture(glIsTexture_enc);
	set_glLineWidth(glLineWidth_enc);
	set_glLinkProgram(glLinkProgram_enc);
	set_glPixelStorei(glPixelStorei_enc);
	set_glPolygonOffset(glPolygonOffset_enc);
	set_glReadPixels(glReadPixels_enc);
	set_glReleaseShaderCompiler(glReleaseShaderCompiler_enc);
	set_glRenderbufferStorage(glRenderbufferStorage_enc);
	set_glSampleCoverage(glSampleCoverage_enc);
	set_glScissor(glScissor_enc);
	set_glShaderBinary((glShaderBinary_client_proc_t)(enc_unsupported));
	set_glShaderSource((glShaderSource_client_proc_t)(enc_unsupported));
	set_glStencilFunc(glStencilFunc_enc);
	set_glStencilFuncSeparate(glStencilFuncSeparate_enc);
	set_glStencilMask(glStencilMask_enc);
	set_glStencilMaskSeparate(glStencilMaskSeparate_enc);
	set_glStencilOp(glStencilOp_enc);
	set_glStencilOpSeparate(glStencilOpSeparate_enc);
	set_glTexImage2D(glTexImage2D_enc);
	set_glTexParameterf(glTexParameterf_enc);
	set_glTexParameterfv(glTexParameterfv_enc);
	set_glTexParameteri(glTexParameteri_enc);
	set_glTexParameteriv(glTexParameteriv_enc);
	set_glTexSubImage2D(glTexSubImage2D_enc);
	set_glUniform1f(glUniform1f_enc);
	set_glUniform1fv(glUniform1fv_enc);
	set_glUniform1i(glUniform1i_enc);
	set_glUniform1iv(glUniform1iv_enc);
	set_glUniform2f(glUniform2f_enc);
	set_glUniform2fv(glUniform2fv_enc);
	set_glUniform2i(glUniform2i_enc);
	set_glUniform2iv(glUniform2iv_enc);
	set_glUniform3f(glUniform3f_enc);
	set_glUniform3fv(glUniform3fv_enc);
	set_glUniform3i(glUniform3i_enc);
	set_glUniform3iv(glUniform3iv_enc);
	set_glUniform4f(glUniform4f_enc);
	set_glUniform4fv(glUniform4fv_enc);
	set_glUniform4i(glUniform4i_enc);
	set_glUniform4iv(glUniform4iv_enc);
	set_glUniformMatrix2fv(glUniformMatrix2fv_enc);
	set_glUniformMatrix3fv(glUniformMatrix3fv_enc);
	set_glUniformMatrix4fv(glUniformMatrix4fv_enc);
	set_glUseProgram(glUseProgram_enc);
	set_glValidateProgram(glValidateProgram_enc);
	set_glVertexAttrib1f(glVertexAttrib1f_enc);
	set_glVertexAttrib1fv(glVertexAttrib1fv_enc);
	set_glVertexAttrib2f(glVertexAttrib2f_enc);
	set_glVertexAttrib2fv(glVertexAttrib2fv_enc);
	set_glVertexAttrib3f(glVertexAttrib3f_enc);
	set_glVertexAttrib3fv(glVertexAttrib3fv_enc);
	set_glVertexAttrib4f(glVertexAttrib4f_enc);
	set_glVertexAttrib4fv(glVertexAttrib4fv_enc);
	set_glVertexAttribPointer((glVertexAttribPointer_client_proc_t)(enc_unsupported));
	set_glViewport(glViewport_enc);
	set_glEGLImageTargetTexture2DOES(glEGLImageTargetTexture2DOES_enc);
	set_glEGLImageTargetRenderbufferStorageOES(glEGLImageTargetRenderbufferStorageOES_enc);
	set_glGetProgramBinaryOES((glGetProgramBinaryOES_client_proc_t)(enc_unsupported));
	set_glProgramBinaryOES((glProgramBinaryOES_client_proc_t)(enc_unsupported));
	set_glMapBufferOES((glMapBufferOES_client_proc_t)(enc_unsupported));
	set_glUnmapBufferOES(glUnmapBufferOES_enc);
	set_glTexImage3DOES(glTexImage3DOES_enc);
	set_glTexSubImage3DOES(glTexSubImage3DOES_enc);
	set_glCopyTexSubImage3DOES(glCopyTexSubImage3DOES_enc);
	set_glCompressedTexImage3DOES(glCompressedTexImage3DOES_enc);
	set_glCompressedTexSubImage3DOES(glCompressedTexSubImage3DOES_enc);
	set_glFramebufferTexture3DOES(glFramebufferTexture3DOES_enc);
	set_glBindVertexArrayOES(glBindVertexArrayOES_enc);
	set_glDeleteVertexArraysOES(glDeleteVertexArraysOES_enc);
	set_glGenVertexArraysOES(glGenVertexArraysOES_enc);
	set_glIsVertexArrayOES(glIsVertexArrayOES_enc);
	set_glDiscardFramebufferEXT(glDiscardFramebufferEXT_enc);
	set_glMultiDrawArraysEXT((glMultiDrawArraysEXT_client_proc_t)(enc_unsupported));
	set_glMultiDrawElementsEXT((glMultiDrawElementsEXT_client_proc_t)(enc_unsupported));
	set_glGetPerfMonitorGroupsAMD((glGetPerfMonitorGroupsAMD_client_proc_t)(enc_unsupported));
	set_glGetPerfMonitorCountersAMD((glGetPerfMonitorCountersAMD_client_proc_t)(enc_unsupported));
	set_glGetPerfMonitorGroupStringAMD((glGetPerfMonitorGroupStringAMD_client_proc_t)(enc_unsupported));
	set_glGetPerfMonitorCounterStringAMD((glGetPerfMonitorCounterStringAMD_client_proc_t)(enc_unsupported));
	set_glGetPerfMonitorCounterInfoAMD((glGetPerfMonitorCounterInfoAMD_client_proc_t)(enc_unsupported));
	set_glGenPerfMonitorsAMD((glGenPerfMonitorsAMD_client_proc_t)(enc_unsupported));
	set_glDeletePerfMonitorsAMD((glDeletePerfMonitorsAMD_client_proc_t)(enc_unsupported));
	set_glSelectPerfMonitorCountersAMD((glSelectPerfMonitorCountersAMD_client_proc_t)(enc_unsupported));
	set_glBeginPerfMonitorAMD((glBeginPerfMonitorAMD_client_proc_t)(enc_unsupported));
	set_glEndPerfMonitorAMD((glEndPerfMonitorAMD_client_proc_t)(enc_unsupported));
	set_glGetPerfMonitorCounterDataAMD((glGetPerfMonitorCounterDataAMD_client_proc_t)(enc_unsupported));
	set_glRenderbufferStorageMultisampleIMG((glRenderbufferStorageMultisampleIMG_client_proc_t)(enc_unsupported));
	set_glFramebufferTexture2DMultisampleIMG((glFramebufferTexture2DMultisampleIMG_client_proc_t)(enc_unsupported));
	set_glDeleteFencesNV((glDeleteFencesNV_client_proc_t)(enc_unsupported));
	set_glGenFencesNV((glGenFencesNV_client_proc_t)(enc_unsupported));
	set_glIsFenceNV((glIsFenceNV_client_proc_t)(enc_unsupported));
	set_glTestFenceNV((glTestFenceNV_client_proc_t)(enc_unsupported));
	set_glGetFenceivNV((glGetFenceivNV_client_proc_t)(enc_unsupported));
	set_glFinishFenceNV((glFinishFenceNV_client_proc_t)(enc_unsupported));
	set_glSetFenceNV((glSetFenceNV_client_proc_t)(enc_unsupported));
	set_glCoverageMaskNV((glCoverageMaskNV_client_proc_t)(enc_unsupported));
	set_glCoverageOperationNV((glCoverageOperationNV_client_proc_t)(enc_unsupported));
	set_glGetDriverControlsQCOM((glGetDriverControlsQCOM_client_proc_t)(enc_unsupported));
	set_glGetDriverControlStringQCOM((glGetDriverControlStringQCOM_client_proc_t)(enc_unsupported));
	set_glEnableDriverControlQCOM((glEnableDriverControlQCOM_client_proc_t)(enc_unsupported));
	set_glDisableDriverControlQCOM((glDisableDriverControlQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetTexturesQCOM((glExtGetTexturesQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetBuffersQCOM((glExtGetBuffersQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetRenderbuffersQCOM((glExtGetRenderbuffersQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetFramebuffersQCOM((glExtGetFramebuffersQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetTexLevelParameterivQCOM((glExtGetTexLevelParameterivQCOM_client_proc_t)(enc_unsupported));
	set_glExtTexObjectStateOverrideiQCOM((glExtTexObjectStateOverrideiQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetTexSubImageQCOM((glExtGetTexSubImageQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetBufferPointervQCOM((glExtGetBufferPointervQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetShadersQCOM((glExtGetShadersQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetProgramsQCOM((glExtGetProgramsQCOM_client_proc_t)(enc_unsupported));
	set_glExtIsProgramBinaryQCOM((glExtIsProgramBinaryQCOM_client_proc_t)(enc_unsupported));
	set_glExtGetProgramBinarySourceQCOM((glExtGetProgramBinarySourceQCOM_client_proc_t)(enc_unsupported));
	set_glStartTilingQCOM((glStartTilingQCOM_client_proc_t)(enc_unsupported));
	set_glEndTilingQCOM((glEndTilingQCOM_client_proc_t)(enc_unsupported));
	set_glVertexAttribPointerData(glVertexAttribPointerData_enc);
	set_glVertexAttribPointerOffset(glVertexAttribPointerOffset_enc);
	set_glDrawElementsOffset(glDrawElementsOffset_enc);
	set_glDrawElementsData(glDrawElementsData_enc);
	set_glGetCompressedTextureFormats(glGetCompressedTextureFormats_enc);
	set_glShaderString(glShaderString_enc);
	set_glFinishRoundTrip(glFinishRoundTrip_enc);
	set_glGenVertexArrays(glGenVertexArrays_enc);
	set_glBindVertexArray(glBindVertexArray_enc);
	set_glDeleteVertexArrays(glDeleteVertexArrays_enc);
	set_glIsVertexArray(glIsVertexArray_enc);
	set_glMapBufferRange((glMapBufferRange_client_proc_t)(enc_unsupported));
	set_glUnmapBuffer((glUnmapBuffer_client_proc_t)(enc_unsupported));
	set_glFlushMappedBufferRange((glFlushMappedBufferRange_client_proc_t)(enc_unsupported));
	set_glMapBufferRangeAEMU(glMapBufferRangeAEMU_enc);
	set_glUnmapBufferAEMU(glUnmapBufferAEMU_enc);
	set_glFlushMappedBufferRangeAEMU(glFlushMappedBufferRangeAEMU_enc);
	set_glReadPixelsOffsetAEMU(glReadPixelsOffsetAEMU_enc);
	set_glCompressedTexImage2DOffsetAEMU(glCompressedTexImage2DOffsetAEMU_enc);
	set_glCompressedTexSubImage2DOffsetAEMU(glCompressedTexSubImage2DOffsetAEMU_enc);
	set_glTexImage2DOffsetAEMU(glTexImage2DOffsetAEMU_enc);
	set_glTexSubImage2DOffsetAEMU(glTexSubImage2DOffsetAEMU_enc);
	set_glBindBufferRange(glBindBufferRange_enc);
	set_glBindBufferBase(glBindBufferBase_enc);
	set_glCopyBufferSubData(glCopyBufferSubData_enc);
	set_glClearBufferiv(glClearBufferiv_enc);
	set_glClearBufferuiv(glClearBufferuiv_enc);
	set_glClearBufferfv(glClearBufferfv_enc);
	set_glClearBufferfi(glClearBufferfi_enc);
	set_glGetBufferParameteri64v((glGetBufferParameteri64v_client_proc_t)(enc_unsupported));
	set_glGetBufferPointerv((glGetBufferPointerv_client_proc_t)(enc_unsupported));
	set_glUniformBlockBinding(glUniformBlockBinding_enc);
	set_glGetUniformBlockIndex(glGetUniformBlockIndex_enc);
	set_glGetUniformIndices((glGetUniformIndices_client_proc_t)(enc_unsupported));
	set_glGetUniformIndicesAEMU(glGetUniformIndicesAEMU_enc);
	set_glGetActiveUniformBlockiv(glGetActiveUniformBlockiv_enc);
	set_glGetActiveUniformBlockName(glGetActiveUniformBlockName_enc);
	set_glUniform1ui(glUniform1ui_enc);
	set_glUniform2ui(glUniform2ui_enc);
	set_glUniform3ui(glUniform3ui_enc);
	set_glUniform4ui(glUniform4ui_enc);
	set_glUniform1uiv(glUniform1uiv_enc);
	set_glUniform2uiv(glUniform2uiv_enc);
	set_glUniform3uiv(glUniform3uiv_enc);
	set_glUniform4uiv(glUniform4uiv_enc);
	set_glUniformMatrix2x3fv(glUniformMatrix2x3fv_enc);
	set_glUniformMatrix3x2fv(glUniformMatrix3x2fv_enc);
	set_glUniformMatrix2x4fv(glUniformMatrix2x4fv_enc);
	set_glUniformMatrix4x2fv(glUniformMatrix4x2fv_enc);
	set_glUniformMatrix3x4fv(glUniformMatrix3x4fv_enc);
	set_glUniformMatrix4x3fv(glUniformMatrix4x3fv_enc);
	set_glGetUniformuiv(glGetUniformuiv_enc);
	set_glGetActiveUniformsiv(glGetActiveUniformsiv_enc);
	set_glVertexAttribI4i(glVertexAttribI4i_enc);
	set_glVertexAttribI4ui(glVertexAttribI4ui_enc);
	set_glVertexAttribI4iv(glVertexAttribI4iv_enc);
	set_glVertexAttribI4uiv(glVertexAttribI4uiv_enc);
	set_glVertexAttribIPointer((glVertexAttribIPointer_client_proc_t)(enc_unsupported));
	set_glVertexAttribIPointerOffsetAEMU(glVertexAttribIPointerOffsetAEMU_enc);
	set_glVertexAttribIPointerDataAEMU(glVertexAttribIPointerDataAEMU_enc);
	set_glGetVertexAttribIiv(glGetVertexAttribIiv_enc);
	set_glGetVertexAttribIuiv(glGetVertexAttribIuiv_enc);
	set_glVertexAttribDivisor(glVertexAttribDivisor_enc);
	set_glDrawArraysInstanced(glDrawArraysInstanced_enc);
	set_glDrawElementsInstanced((glDrawElementsInstanced_client_proc_t)(enc_unsupported));
	set_glDrawElementsInstancedDataAEMU(glDrawElementsInstancedDataAEMU_enc);
	set_glDrawElementsInstancedOffsetAEMU(glDrawElementsInstancedOffsetAEMU_enc);
	set_glDrawRangeElements((glDrawRangeElements_client_proc_t)(enc_unsupported));
	set_glDrawRangeElementsDataAEMU(glDrawRangeElementsDataAEMU_enc);
	set_glDrawRangeElementsOffsetAEMU(glDrawRangeElementsOffsetAEMU_enc);
	set_glFenceSync((glFenceSync_client_proc_t)(enc_unsupported));
	set_glClientWaitSync((glClientWaitSync_client_proc_t)(enc_unsupported));
	set_glWaitSync((glWaitSync_client_proc_t)(enc_unsupported));
	set_glDeleteSync((glDeleteSync_client_proc_t)(enc_unsupported));
	set_glIsSync((glIsSync_client_proc_t)(enc_unsupported));
	set_glGetSynciv((glGetSynciv_client_proc_t)(enc_unsupported));
	set_glFenceSyncAEMU(glFenceSyncAEMU_enc);
	set_glClientWaitSyncAEMU(glClientWaitSyncAEMU_enc);
	set_glWaitSyncAEMU(glWaitSyncAEMU_enc);
	set_glDeleteSyncAEMU(glDeleteSyncAEMU_enc);
	set_glIsSyncAEMU(glIsSyncAEMU_enc);
	set_glGetSyncivAEMU(glGetSyncivAEMU_enc);
	set_glDrawBuffers(glDrawBuffers_enc);
	set_glReadBuffer(glReadBuffer_enc);
	set_glBlitFramebuffer(glBlitFramebuffer_enc);
	set_glInvalidateFramebuffer(glInvalidateFramebuffer_enc);
	set_glInvalidateSubFramebuffer(glInvalidateSubFramebuffer_enc);
	set_glFramebufferTextureLayer(glFramebufferTextureLayer_enc);
	set_glRenderbufferStorageMultisample(glRenderbufferStorageMultisample_enc);
	set_glTexStorage2D(glTexStorage2D_enc);
	set_glGetInternalformativ(glGetInternalformativ_enc);
	set_glBeginTransformFeedback(glBeginTransformFeedback_enc);
	set_glEndTransformFeedback(glEndTransformFeedback_enc);
	set_glGenTransformFeedbacks(glGenTransformFeedbacks_enc);
	set_glDeleteTransformFeedbacks(glDeleteTransformFeedbacks_enc);
	set_glBindTransformFeedback(glBindTransformFeedback_enc);
	set_glPauseTransformFeedback(glPauseTransformFeedback_enc);
	set_glResumeTransformFeedback(glResumeTransformFeedback_enc);
	set_glIsTransformFeedback(glIsTransformFeedback_enc);
	set_glTransformFeedbackVaryings((glTransformFeedbackVaryings_client_proc_t)(enc_unsupported));
	set_glTransformFeedbackVaryingsAEMU(glTransformFeedbackVaryingsAEMU_enc);
	set_glGetTransformFeedbackVarying(glGetTransformFeedbackVarying_enc);
	set_glGenSamplers(glGenSamplers_enc);
	set_glDeleteSamplers(glDeleteSamplers_enc);
	set_glBindSampler(glBindSampler_enc);
	set_glSamplerParameterf(glSamplerParameterf_enc);
	set_glSamplerParameteri(glSamplerParameteri_enc);
	set_glSamplerParameterfv(glSamplerParameterfv_enc);
	set_glSamplerParameteriv(glSamplerParameteriv_enc);
	set_glGetSamplerParameterfv(glGetSamplerParameterfv_enc);
	set_glGetSamplerParameteriv(glGetSamplerParameteriv_enc);
	set_glIsSampler(glIsSampler_enc);
	set_glGenQueries(glGenQueries_enc);
	set_glDeleteQueries(glDeleteQueries_enc);
	set_glBeginQuery(glBeginQuery_enc);
	set_glEndQuery(glEndQuery_enc);
	set_glGetQueryiv(glGetQueryiv_enc);
	set_glGetQueryObjectuiv(glGetQueryObjectuiv_enc);
	set_glIsQuery(glIsQuery_enc);
	set_glProgramParameteri(glProgramParameteri_enc);
	set_glProgramBinary(glProgramBinary_enc);
	set_glGetProgramBinary(glGetProgramBinary_enc);
	set_glGetFragDataLocation(glGetFragDataLocation_enc);
	set_glGetInteger64v(glGetInteger64v_enc);
	set_glGetIntegeri_v(glGetIntegeri_v_enc);
	set_glGetInteger64i_v(glGetInteger64i_v_enc);
	set_glTexImage3D(glTexImage3D_enc);
	set_glTexImage3DOffsetAEMU(glTexImage3DOffsetAEMU_enc);
	set_glTexStorage3D(glTexStorage3D_enc);
	set_glTexSubImage3D(glTexSubImage3D_enc);
	set_glTexSubImage3DOffsetAEMU(glTexSubImage3DOffsetAEMU_enc);
	set_glCompressedTexImage3D(glCompressedTexImage3D_enc);
	set_glCompressedTexImage3DOffsetAEMU(glCompressedTexImage3DOffsetAEMU_enc);
	set_glCompressedTexSubImage3D(glCompressedTexSubImage3D_enc);
	set_glCompressedTexSubImage3DOffsetAEMU(glCompressedTexSubImage3DOffsetAEMU_enc);
	set_glCopyTexSubImage3D(glCopyTexSubImage3D_enc);
	set_glGetStringi((glGetStringi_client_proc_t)(enc_unsupported));
	set_glGetBooleani_v(glGetBooleani_v_enc);
	set_glMemoryBarrier(glMemoryBarrier_enc);
	set_glMemoryBarrierByRegion(glMemoryBarrierByRegion_enc);
	set_glGenProgramPipelines(glGenProgramPipelines_enc);
	set_glDeleteProgramPipelines(glDeleteProgramPipelines_enc);
	set_glBindProgramPipeline(glBindProgramPipeline_enc);
	set_glGetProgramPipelineiv(glGetProgramPipelineiv_enc);
	set_glGetProgramPipelineInfoLog(glGetProgramPipelineInfoLog_enc);
	set_glValidateProgramPipeline(glValidateProgramPipeline_enc);
	set_glIsProgramPipeline(glIsProgramPipeline_enc);
	set_glUseProgramStages(glUseProgramStages_enc);
	set_glActiveShaderProgram(glActiveShaderProgram_enc);
	set_glCreateShaderProgramv((glCreateShaderProgramv_client_proc_t)(enc_unsupported));
	set_glCreateShaderProgramvAEMU(glCreateShaderProgramvAEMU_enc);
	set_glProgramUniform1f(glProgramUniform1f_enc);
	set_glProgramUniform2f(glProgramUniform2f_enc);
	set_glProgramUniform3f(glProgramUniform3f_enc);
	set_glProgramUniform4f(glProgramUniform4f_enc);
	set_glProgramUniform1i(glProgramUniform1i_enc);
	set_glProgramUniform2i(glProgramUniform2i_enc);
	set_glProgramUniform3i(glProgramUniform3i_enc);
	set_glProgramUniform4i(glProgramUniform4i_enc);
	set_glProgramUniform1ui(glProgramUniform1ui_enc);
	set_glProgramUniform2ui(glProgramUniform2ui_enc);
	set_glProgramUniform3ui(glProgramUniform3ui_enc);
	set_glProgramUniform4ui(glProgramUniform4ui_enc);
	set_glProgramUniform1fv(glProgramUniform1fv_enc);
	set_glProgramUniform2fv(glProgramUniform2fv_enc);
	set_glProgramUniform3fv(glProgramUniform3fv_enc);
	set_glProgramUniform4fv(glProgramUniform4fv_enc);
	set_glProgramUniform1iv(glProgramUniform1iv_enc);
	set_glProgramUniform2iv(glProgramUniform2iv_enc);
	set_glProgramUniform3iv(glProgramUniform3iv_enc);
	set_glProgramUniform4iv(glProgramUniform4iv_enc);
	set_glProgramUniform1uiv(glProgramUniform1uiv_enc);
	set_glProgramUniform2uiv(glProgramUniform2uiv_enc);
	set_glProgramUniform3uiv(glProgramUniform3uiv_enc);
	set_glProgramUniform4uiv(glProgramUniform4uiv_enc);
	set_glProgramUniformMatrix2fv(glProgramUniformMatrix2fv_enc);
	set_glProgramUniformMatrix3fv(glProgramUniformMatrix3fv_enc);
	set_glProgramUniformMatrix4fv(glProgramUniformMatrix4fv_enc);
	set_glProgramUniformMatrix2x3fv(glProgramUniformMatrix2x3fv_enc);
	set_glProgramUniformMatrix3x2fv(glProgramUniformMatrix3x2fv_enc);
	set_glProgramUniformMatrix2x4fv(glProgramUniformMatrix2x4fv_enc);
	set_glProgramUniformMatrix4x2fv(glProgramUniformMatrix4x2fv_enc);
	set_glProgramUniformMatrix3x4fv(glProgramUniformMatrix3x4fv_enc);
	set_glProgramUniformMatrix4x3fv(glProgramUniformMatrix4x3fv_enc);
	set_glGetProgramInterfaceiv(glGetProgramInterfaceiv_enc);
	set_glGetProgramResourceiv(glGetProgramResourceiv_enc);
	set_glGetProgramResourceIndex(glGetProgramResourceIndex_enc);
	set_glGetProgramResourceLocation(glGetProgramResourceLocation_enc);
	set_glGetProgramResourceName(glGetProgramResourceName_enc);
	set_glBindImageTexture(glBindImageTexture_enc);
	set_glDispatchCompute(glDispatchCompute_enc);
	set_glDispatchComputeIndirect(glDispatchComputeIndirect_enc);
	set_glBindVertexBuffer(glBindVertexBuffer_enc);
	set_glVertexAttribBinding(glVertexAttribBinding_enc);
	set_glVertexAttribFormat(glVertexAttribFormat_enc);
	set_glVertexAttribIFormat(glVertexAttribIFormat_enc);
	set_glVertexBindingDivisor(glVertexBindingDivisor_enc);
	set_glDrawArraysIndirect((glDrawArraysIndirect_client_proc_t)(enc_unsupported));
	set_glDrawArraysIndirectDataAEMU(glDrawArraysIndirectDataAEMU_enc);
	set_glDrawArraysIndirectOffsetAEMU(glDrawArraysIndirectOffsetAEMU_enc);
	set_glDrawElementsIndirect((glDrawElementsIndirect_client_proc_t)(enc_unsupported));
	set_glDrawElementsIndirectDataAEMU(glDrawElementsIndirectDataAEMU_enc);
	set_glDrawElementsIndirectOffsetAEMU(glDrawElementsIndirectOffsetAEMU_enc);
	set_glTexStorage2DMultisample(glTexStorage2DMultisample_enc);
	set_glSampleMaski(glSampleMaski_enc);
	set_glGetMultisamplefv(glGetMultisamplefv_enc);
	set_glFramebufferParameteri(glFramebufferParameteri_enc);
	set_glGetFramebufferParameteriv(glGetFramebufferParameteriv_enc);
	set_glGetTexLevelParameterfv(glGetTexLevelParameterfv_enc);
	set_glGetTexLevelParameteriv(glGetTexLevelParameteriv_enc);
	set_glAlphaFunc(glAlphaFunc_enc);
	set_glClipPlanef(glClipPlanef_enc);
	set_glColor4f(glColor4f_enc);
	set_glFogf(glFogf_enc);
	set_glFogfv(glFogfv_enc);
	set_glFrustumf(glFrustumf_enc);
	set_glGetClipPlanef(glGetClipPlanef_enc);
	set_glGetLightfv(glGetLightfv_enc);
	set_glGetMaterialfv(glGetMaterialfv_enc);
	set_glGetTexEnvfv(glGetTexEnvfv_enc);
	set_glLightModelf(glLightModelf_enc);
	set_glLightModelfv(glLightModelfv_enc);
	set_glLightf(glLightf_enc);
	set_glLightfv(glLightfv_enc);
	set_glLoadMatrixf(glLoadMatrixf_enc);
	set_glMaterialf(glMaterialf_enc);
	set_glMaterialfv(glMaterialfv_enc);
	set_glMultMatrixf(glMultMatrixf_enc);
	set_glMultiTexCoord4f(glMultiTexCoord4f_enc);
	set_glNormal3f(glNormal3f_enc);
	set_glOrthof(glOrthof_enc);
	set_glPointParameterf(glPointParameterf_enc);
	set_glPointParameterfv(glPointParameterfv_enc);
	set_glPointSize(glPointSize_enc);
	set_glRotatef(glRotatef_enc);
	set_glScalef(glScalef_enc);
	set_glTexEnvf(glTexEnvf_enc);
	set_glTexEnvfv(glTexEnvfv_enc);
	set_glTranslatef(glTranslatef_enc);
	set_glAlphaFuncx(glAlphaFuncx_enc);
	set_glClearColorx(glClearColorx_enc);
	set_glClearDepthx(glClearDepthx_enc);
	set_glClientActiveTexture(glClientActiveTexture_enc);
	set_glColor4ub(glColor4ub_enc);
	set_glColor4x(glColor4x_enc);
	set_glColorPointer((glColorPointer_client_proc_t)(enc_unsupported));
	set_glDepthRangex(glDepthRangex_enc);
	set_glDisableClientState(glDisableClientState_enc);
	set_glEnableClientState(glEnableClientState_enc);
	set_glFogx(glFogx_enc);
	set_glFogxv(glFogxv_enc);
	set_glFrustumx(glFrustumx_enc);
	set_glClipPlanex(glClipPlanex_enc);
	set_glGetFixedv(glGetFixedv_enc);
	set_glGetLightxv(glGetLightxv_enc);
	set_glGetMaterialxv(glGetMaterialxv_enc);
	set_glGetPointerv((glGetPointerv_client_proc_t)(enc_unsupported));
	set_glGetTexEnviv(glGetTexEnviv_enc);
	set_glGetTexEnvxv(glGetTexEnvxv_enc);
	set_glGetTexParameterxv(glGetTexParameterxv_enc);
	set_glLightModelx(glLightModelx_enc);
	set_glLightModelxv(glLightModelxv_enc);
	set_glLightx(glLightx_enc);
	set_glLightxv(glLightxv_enc);
	set_glLineWidthx(glLineWidthx_enc);
	set_glLoadIdentity(glLoadIdentity_enc);
	set_glLoadMatrixx(glLoadMatrixx_enc);
	set_glLogicOp(glLogicOp_enc);
	set_glMaterialx(glMaterialx_enc);
	set_glMaterialxv(glMaterialxv_enc);
	set_glMatrixMode(glMatrixMode_enc);
	set_glMultMatrixx(glMultMatrixx_enc);
	set_glMultiTexCoord4x(glMultiTexCoord4x_enc);
	set_glNormal3x(glNormal3x_enc);
	set_glNormalPointer((glNormalPointer_client_proc_t)(enc_unsupported));
	set_glOrthox(glOrthox_enc);
	set_glPointParameterx(glPointParameterx_enc);
	set_glPointParameterxv(glPointParameterxv_enc);
	set_glPointSizex(glPointSizex_enc);
	set_glPolygonOffsetx(glPolygonOffsetx_enc);
	set_glPopMatrix(glPopMatrix_enc);
	set_glPushMatrix(glPushMatrix_enc);
	set_glRotatex(glRotatex_enc);
	set_glSampleCoveragex(glSampleCoveragex_enc);
	set_glScalex(glScalex_enc);
	set_glShadeModel(glShadeModel_enc);
	set_glTexCoordPointer((glTexCoordPointer_client_proc_t)(enc_unsupported));
	set_glTexEnvi(glTexEnvi_enc);
	set_glTexEnvx(glTexEnvx_enc);
	set_glTexEnviv(glTexEnviv_enc);
	set_glTexEnvxv(glTexEnvxv_enc);
	set_glTexParameterx(glTexParameterx_enc);
	set_glTexParameterxv(glTexParameterxv_enc);
	set_glTranslatex(glTranslatex_enc);
	set_glVertexPointer((glVertexPointer_client_proc_t)(enc_unsupported));
	set_glPointSizePointerOES((glPointSizePointerOES_client_proc_t)(enc_unsupported));
	set_glVertexPointerOffset(glVertexPointerOffset_enc);
	set_glColorPointerOffset(glColorPointerOffset_enc);
	set_glNormalPointerOffset(glNormalPointerOffset_enc);
	set_glPointSizePointerOffset(glPointSizePointerOffset_enc);
	set_glTexCoordPointerOffset(glTexCoordPointerOffset_enc);
	set_glWeightPointerOffset(glWeightPointerOffset_enc);
	set_glMatrixIndexPointerOffset(glMatrixIndexPointerOffset_enc);
	set_glVertexPointerData(glVertexPointerData_enc);
	set_glColorPointerData(glColorPointerData_enc);
	set_glNormalPointerData(glNormalPointerData_enc);
	set_glTexCoordPointerData(glTexCoordPointerData_enc);
	set_glPointSizePointerData(glPointSizePointerData_enc);
	set_glWeightPointerData(glWeightPointerData_enc);
	set_glMatrixIndexPointerData(glMatrixIndexPointerData_enc);
	set_glBlendEquationSeparateOES(glBlendEquationSeparateOES_enc);
	set_glBlendFuncSeparateOES(glBlendFuncSeparateOES_enc);
	set_glBlendEquationOES(glBlendEquationOES_enc);
	set_glDrawTexsOES(glDrawTexsOES_enc);
	set_glDrawTexiOES(glDrawTexiOES_enc);
	set_glDrawTexxOES(glDrawTexxOES_enc);
	set_glDrawTexsvOES(glDrawTexsvOES_enc);
	set_glDrawTexivOES(glDrawTexivOES_enc);
	set_glDrawTexxvOES(glDrawTexxvOES_enc);
	set_glDrawTexfOES(glDrawTexfOES_enc);
	set_glDrawTexfvOES(glDrawTexfvOES_enc);
	set_glAlphaFuncxOES(glAlphaFuncxOES_enc);
	set_glClearColorxOES(glClearColorxOES_enc);
	set_glClearDepthxOES(glClearDepthxOES_enc);
	set_glClipPlanexOES(glClipPlanexOES_enc);
	set_glClipPlanexIMG(glClipPlanexIMG_enc);
	set_glColor4xOES(glColor4xOES_enc);
	set_glDepthRangexOES(glDepthRangexOES_enc);
	set_glFogxOES(glFogxOES_enc);
	set_glFogxvOES(glFogxvOES_enc);
	set_glFrustumxOES(glFrustumxOES_enc);
	set_glGetClipPlanexOES(glGetClipPlanexOES_enc);
	set_glGetClipPlanex(glGetClipPlanex_enc);
	set_glGetFixedvOES(glGetFixedvOES_enc);
	set_glGetLightxvOES(glGetLightxvOES_enc);
	set_glGetMaterialxvOES(glGetMaterialxvOES_enc);
	set_glGetTexEnvxvOES(glGetTexEnvxvOES_enc);
	set_glGetTexParameterxvOES(glGetTexParameterxvOES_enc);
	set_glLightModelxOES(glLightModelxOES_enc);
	set_glLightModelxvOES(glLightModelxvOES_enc);
	set_glLightxOES(glLightxOES_enc);
	set_glLightxvOES(glLightxvOES_enc);
	set_glLineWidthxOES(glLineWidthxOES_enc);
	set_glLoadMatrixxOES(glLoadMatrixxOES_enc);
	set_glMaterialxOES(glMaterialxOES_enc);
	set_glMaterialxvOES(glMaterialxvOES_enc);
	set_glMultMatrixxOES(glMultMatrixxOES_enc);
	set_glMultiTexCoord4xOES(glMultiTexCoord4xOES_enc);
	set_glNormal3xOES(glNormal3xOES_enc);
	set_glOrthoxOES(glOrthoxOES_enc);
	set_glPointParameterxOES(glPointParameterxOES_enc);
	set_glPointParameterxvOES(glPointParameterxvOES_enc);
	set_glPointSizexOES(glPointSizexOES_enc);
	set_glPolygonOffsetxOES(glPolygonOffsetxOES_enc);
	set_glRotatexOES(glRotatexOES_enc);
	set_glSampleCoveragexOES(glSampleCoveragexOES_enc);
	set_glScalexOES(glScalexOES_enc);
	set_glTexEnvxOES(glTexEnvxOES_enc);
	set_glTexEnvxvOES(glTexEnvxvOES_enc);
	set_glTexParameterxOES(glTexParameterxOES_enc);
	set_glTexParameterxvOES(glTexParameterxvOES_enc);
	set_glTranslatexOES(glTranslatexOES_enc);
	set_glIsRenderbufferOES(glIsRenderbufferOES_enc);
	set_glBindRenderbufferOES(glBindRenderbufferOES_enc);
	set_glDeleteRenderbuffersOES(glDeleteRenderbuffersOES_enc);
	set_glGenRenderbuffersOES(glGenRenderbuffersOES_enc);
	set_glRenderbufferStorageOES(glRenderbufferStorageOES_enc);
	set_glGetRenderbufferParameterivOES(glGetRenderbufferParameterivOES_enc);
	set_glIsFramebufferOES(glIsFramebufferOES_enc);
	set_glBindFramebufferOES(glBindFramebufferOES_enc);
	set_glDeleteFramebuffersOES(glDeleteFramebuffersOES_enc);
	set_glGenFramebuffersOES(glGenFramebuffersOES_enc);
	set_glCheckFramebufferStatusOES(glCheckFramebufferStatusOES_enc);
	set_glFramebufferRenderbufferOES(glFramebufferRenderbufferOES_enc);
	set_glFramebufferTexture2DOES(glFramebufferTexture2DOES_enc);
	set_glGetFramebufferAttachmentParameterivOES(glGetFramebufferAttachmentParameterivOES_enc);
	set_glGenerateMipmapOES(glGenerateMipmapOES_enc);
	set_glGetBufferPointervOES((glGetBufferPointervOES_client_proc_t)(enc_unsupported));
	set_glCurrentPaletteMatrixOES(glCurrentPaletteMatrixOES_enc);
	set_glLoadPaletteFromModelViewMatrixOES(glLoadPaletteFromModelViewMatrixOES_enc);
	set_glMatrixIndexPointerOES((glMatrixIndexPointerOES_client_proc_t)(enc_unsupported));
	set_glWeightPointerOES((glWeightPointerOES_client_proc_t)(enc_unsupported));
	set_glQueryMatrixxOES(glQueryMatrixxOES_enc);
	set_glDepthRangefOES(glDepthRangefOES_enc);
	set_glFrustumfOES(glFrustumfOES_enc);
	set_glOrthofOES(glOrthofOES_enc);
	set_glClipPlanefOES(glClipPlanefOES_enc);
	set_glClipPlanefIMG(glClipPlanefIMG_enc);
	set_glGetClipPlanefOES(glGetClipPlanefOES_enc);
	set_glClearDepthfOES(glClearDepthfOES_enc);
	set_glTexGenfOES(glTexGenfOES_enc);
	set_glTexGenfvOES(glTexGenfvOES_enc);
	set_glTexGeniOES(glTexGeniOES_enc);
	set_glTexGenivOES(glTexGenivOES_enc);
	set_glTexGenxOES(glTexGenxOES_enc);
	set_glTexGenxvOES(glTexGenxvOES_enc);
	set_glGetTexGenfvOES(glGetTexGenfvOES_enc);
	set_glGetTexGenivOES(glGetTexGenivOES_enc);
	set_glGetTexGenxvOES(glGetTexGenxvOES_enc);
	set_glMultiDrawArraysSUN((glMultiDrawArraysSUN_client_proc_t)(enc_unsupported));
	set_glMultiDrawElementsSUN((glMultiDrawElementsSUN_client_proc_t)(enc_unsupported));
}

