// Generated Code - DO NOT EDIT !!
// generated by 'emugen'
#include <stdio.h>
#include <stdlib.h>
#include "renderControl_wrapper_context.h"
#include "ErrorLog.h"
#include "renderControl_wrapper_entry.h"

#include "renderControl_entry.cpp"
#include <sys/mman.h>
#define VALID_PTR(ptr) (mprotect(ptr,1,PROT_READ|PROT_WRITE)==-1)
#define VALID_PARAMETER(ptr) ((unsigned int)ptr<=0x400000)
#ifndef GLsync
typedef struct __GLsync *GLsync;
#endif

#undef GET_CONTEXT_wrapper
#ifndef GET_CONTEXT_wrapper
static renderControl_wrapper_context_t::CONTEXT_ACCESSOR_TYPE *getCurrentContext_wrapper = NULL;
void renderControl_wrapper_context_t::setContextAccessor(CONTEXT_ACCESSOR_TYPE *f) { getCurrentContext_wrapper = f; }
#define GET_CONTEXT_wrapper renderControl_wrapper_context_t * ctx = getCurrentContext_wrapper() 
#endif

GLint rcGetRendererVersion()
{
	return RedFinger_rcGetRendererVersion();
}

EGLint rcGetEGLVersion(EGLint* major, EGLint* minor)
{
	return RedFinger_rcGetEGLVersion( major, minor);
}

EGLint rcQueryEGLString(EGLenum name, void* buffer, EGLint bufferSize)
{
	return RedFinger_rcQueryEGLString( name, buffer, bufferSize);
}

EGLint rcGetGLString(EGLenum name, void* buffer, EGLint bufferSize)
{
	return RedFinger_rcGetGLString( name, buffer, bufferSize);
}

EGLint rcGetNumConfigs(uint32_t* numAttribs)
{
	return RedFinger_rcGetNumConfigs( numAttribs);
}

EGLint rcGetConfigs(uint32_t bufSize, GLuint* buffer)
{
	return RedFinger_rcGetConfigs( bufSize, buffer);
}

EGLint rcChooseConfig(EGLint* attribs, uint32_t attribs_size, uint32_t* configs, uint32_t configs_size)
{
	return RedFinger_rcChooseConfig( attribs, attribs_size, configs, configs_size);
}

EGLint rcGetFBParam(EGLint param)
{
	return RedFinger_rcGetFBParam( param);
}

uint32_t rcCreateContext(uint32_t config, uint32_t share, uint32_t glVersion)
{
	return RedFinger_rcCreateContext( config, share, glVersion);
}

void rcDestroyContext(uint32_t context)
{
	RedFinger_rcDestroyContext( context);
}

uint32_t rcCreateWindowSurface(uint32_t config, uint32_t width, uint32_t height)
{
	return RedFinger_rcCreateWindowSurface( config, width, height);
}

void rcDestroyWindowSurface(uint32_t windowSurface)
{
	RedFinger_rcDestroyWindowSurface( windowSurface);
}

uint32_t rcCreateColorBuffer(uint32_t width, uint32_t height, GLenum internalFormat)
{
	return RedFinger_rcCreateColorBuffer( width, height, internalFormat);
}

void rcOpenColorBuffer(uint32_t colorbuffer)
{
	RedFinger_rcOpenColorBuffer( colorbuffer);
}

void rcCloseColorBuffer(uint32_t colorbuffer)
{
	RedFinger_rcCloseColorBuffer( colorbuffer);
}

void rcSetWindowColorBuffer(uint32_t windowSurface, uint32_t colorBuffer)
{
	RedFinger_rcSetWindowColorBuffer( windowSurface, colorBuffer);
}

int rcFlushWindowColorBuffer(uint32_t windowSurface)
{
	return RedFinger_rcFlushWindowColorBuffer( windowSurface);
}

EGLint rcMakeCurrent(uint32_t context, uint32_t drawSurf, uint32_t readSurf)
{
	return RedFinger_rcMakeCurrent( context, drawSurf, readSurf);
}

void rcFBPost(uint32_t colorBuffer)
{
	RedFinger_rcFBPost( colorBuffer);
}

void rcFBSetSwapInterval(EGLint interval)
{
	RedFinger_rcFBSetSwapInterval( interval);
}

void rcBindTexture(uint32_t colorBuffer)
{
	RedFinger_rcBindTexture( colorBuffer);
}

void rcBindRenderbuffer(uint32_t colorBuffer)
{
	RedFinger_rcBindRenderbuffer( colorBuffer);
}

EGLint rcColorBufferCacheFlush(uint32_t colorbuffer, EGLint postCount, int forRead)
{
	return RedFinger_rcColorBufferCacheFlush( colorbuffer, postCount, forRead);
}

void rcReadColorBuffer(uint32_t colorbuffer, GLint x, GLint y, GLint width, GLint height, GLenum format, GLenum type, void* pixels)
{
	RedFinger_rcReadColorBuffer( colorbuffer, x, y, width, height, format, type, pixels);
}

int rcUpdateColorBuffer(uint32_t colorbuffer, GLint x, GLint y, GLint width, GLint height, GLenum format, GLenum type, void* pixels)
{
	return RedFinger_rcUpdateColorBuffer( colorbuffer, x, y, width, height, format, type, pixels);
}

int rcOpenColorBuffer2(uint32_t colorbuffer)
{
	return RedFinger_rcOpenColorBuffer2( colorbuffer);
}

uint32_t rcCreateClientImage(uint32_t context, EGLenum target, GLuint buffer)
{
	return RedFinger_rcCreateClientImage( context, target, buffer);
}

int rcDestroyClientImage(uint32_t image)
{
	return RedFinger_rcDestroyClientImage( image);
}

void rcSelectChecksumHelper(uint32_t newProtocol, uint32_t reserved)
{
	RedFinger_rcSelectChecksumHelper( newProtocol, reserved);
}

void rcCreateSyncKHR(EGLenum type, EGLint* attribs, uint32_t num_attribs, int destroy_when_signaled, uint64_t* glsync_out, uint64_t* syncthread_out)
{
	RedFinger_rcCreateSyncKHR( type, attribs, num_attribs, destroy_when_signaled, glsync_out, syncthread_out);
}

EGLint rcClientWaitSyncKHR(uint64_t sync, EGLint flags, uint64_t timeout)
{
	return RedFinger_rcClientWaitSyncKHR( sync, flags, timeout);
}

void rcFlushWindowColorBufferAsync(uint32_t windowSurface)
{
	RedFinger_rcFlushWindowColorBufferAsync( windowSurface);
}

int rcDestroySyncKHR(uint64_t sync)
{
	return RedFinger_rcDestroySyncKHR( sync);
}

void rcSetPuid(uint64_t puid)
{
	RedFinger_rcSetPuid( puid);
}

int rcUpdateColorBufferDMA(uint32_t colorbuffer, GLint x, GLint y, GLint width, GLint height, GLenum format, GLenum type, void* pixels, uint32_t pixels_size)
{
	return RedFinger_rcUpdateColorBufferDMA( colorbuffer, x, y, width, height, format, type, pixels, pixels_size);
}

uint32_t rcCreateColorBufferDMA(uint32_t width, uint32_t height, GLenum internalFormat, int frameworkFormat)
{
	return RedFinger_rcCreateColorBufferDMA( width, height, internalFormat, frameworkFormat);
}

