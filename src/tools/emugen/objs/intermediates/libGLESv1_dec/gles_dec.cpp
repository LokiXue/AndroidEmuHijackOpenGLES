// Generated Code - DO NOT EDIT !!
// generated by 'emugen'


#include <string.h>
#include "gles_opcodes.h"

#include "gles_dec.h"


#include <stdio.h>

typedef unsigned int tsize_t; // Target "size_t", which is 32-bit for now. It may or may not be the same as host's size_t when emugen is compiled.

size_t gles_decoder_context_t::decode(void *buf, size_t len, IOStream *stream)
{
                           
	size_t pos = 0;
	if (len < 8) return pos; 
	unsigned char *ptr = (unsigned char *)buf;
	bool unknownOpcode = false;  
#ifdef CHECK_GL_ERROR 
	char lastCall[256] = {0}; 
#endif 
	while ((len - pos >= 8) && !unknownOpcode) {   
		int opcode = *(int *)ptr;   
		unsigned int packetLen = *(int *)(ptr + 4);
		if (len - pos < packetLen)  return pos; 
		switch(opcode) {
			case OP_glActiveTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glActiveTexture(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glActiveTexture(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glActiveTexture");
#endif
			break;
			case OP_glAttachShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAttachShader(%u %u )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glAttachShader(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAttachShader");
#endif
			break;
			case OP_glBindAttribLocation:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindAttribLocation(%u %u %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), (const GLchar*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glBindAttribLocation(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), (const GLchar*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindAttribLocation");
#endif
			break;
			case OP_glBindBuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindBuffer(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindBuffer(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindBuffer");
#endif
			break;
			case OP_glBindFramebuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindFramebuffer(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindFramebuffer(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindFramebuffer");
#endif
			break;
			case OP_glBindRenderbuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindRenderbuffer(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindRenderbuffer(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindRenderbuffer");
#endif
			break;
			case OP_glBindTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindTexture(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindTexture(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindTexture");
#endif
			break;
			case OP_glBlendColor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendColor(%f %f %f %f )\n", stream,*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4), *(GLclampf *)(ptr + 8 + 4 + 4), *(GLclampf *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBlendColor(*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4), *(GLclampf *)(ptr + 8 + 4 + 4), *(GLclampf *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendColor");
#endif
			break;
			case OP_glBlendEquation:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquation(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glBlendEquation(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquation");
#endif
			break;
			case OP_glBlendEquationSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquationSeparate(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glBlendEquationSeparate(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquationSeparate");
#endif
			break;
			case OP_glBlendFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendFunc(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glBlendFunc(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendFunc");
#endif
			break;
			case OP_glBlendFuncSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendFuncSeparate(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBlendFuncSeparate(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendFuncSeparate");
#endif
			break;
			case OP_glBufferData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBufferData(0x%08x %p %p(%u) 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLsizeiptr *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glBufferData(*(GLenum *)(ptr + 8), *(GLsizeiptr *)(ptr + 8 + 4), *((unsigned int *)(ptr + 8 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBufferData");
#endif
			break;
			case OP_glBufferSubData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBufferSubData(0x%08x %p %p %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLintptr *)(ptr + 8 + 4), *(GLsizeiptr *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBufferSubData(*(GLenum *)(ptr + 8), *(GLintptr *)(ptr + 8 + 4), *(GLsizeiptr *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBufferSubData");
#endif
			break;
			case OP_glCheckFramebufferStatus:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCheckFramebufferStatus(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glCheckFramebufferStatus(*(GLenum *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCheckFramebufferStatus");
#endif
			break;
			case OP_glClear:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClear(0x%08x )\n", stream,*(GLbitfield *)(ptr + 8));
#endif
			this->glClear(*(GLbitfield *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClear");
#endif
			break;
			case OP_glClearColor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearColor(%f %f %f %f )\n", stream,*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4), *(GLclampf *)(ptr + 8 + 4 + 4), *(GLclampf *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearColor(*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4), *(GLclampf *)(ptr + 8 + 4 + 4), *(GLclampf *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearColor");
#endif
			break;
			case OP_glClearDepthf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthf(%f )\n", stream,*(GLclampf *)(ptr + 8));
#endif
			this->glClearDepthf(*(GLclampf *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthf");
#endif
			break;
			case OP_glClearStencil:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearStencil(%d )\n", stream,*(GLint *)(ptr + 8));
#endif
			this->glClearStencil(*(GLint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearStencil");
#endif
			break;
			case OP_glColorMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorMask(%d %d %d %d )\n", stream,*(GLboolean *)(ptr + 8), *(GLboolean *)(ptr + 8 + 1), *(GLboolean *)(ptr + 8 + 1 + 1), *(GLboolean *)(ptr + 8 + 1 + 1 + 1));
#endif
			this->glColorMask(*(GLboolean *)(ptr + 8), *(GLboolean *)(ptr + 8 + 1), *(GLboolean *)(ptr + 8 + 1 + 1), *(GLboolean *)(ptr + 8 + 1 + 1 + 1));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorMask");
#endif
			break;
			case OP_glCompileShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompileShader(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glCompileShader(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompileShader");
#endif
			break;
			case OP_glCompressedTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage2D(0x%08x %d 0x%08x %d %d %d %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage2D");
#endif
			break;
			case OP_glCompressedTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage2D(0x%08x %d %d %d %d %d 0x%08x %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage2D");
#endif
			break;
			case OP_glCopyTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexImage2D(0x%08x %d 0x%08x %d %d %d %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexImage2D");
#endif
			break;
			case OP_glCopyTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexSubImage2D(0x%08x %d %d %d %d %d %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexSubImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexSubImage2D");
#endif
			break;
			case OP_glCreateProgram:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCreateProgram()\n", stream);
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glCreateProgram();
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCreateProgram");
#endif
			break;
			case OP_glCreateShader:
			{
			size_t totalTmpSize = sizeof(GLuint);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCreateShader(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			*(GLuint *)(&tmpBuf[0]) = 			this->glCreateShader(*(GLenum *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCreateShader");
#endif
			break;
			case OP_glCullFace:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCullFace(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glCullFace(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCullFace");
#endif
			break;
			case OP_glDeleteBuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteBuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteBuffers(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteBuffers");
#endif
			break;
			case OP_glDeleteFramebuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteFramebuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteFramebuffers(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteFramebuffers");
#endif
			break;
			case OP_glDeleteProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteProgram(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glDeleteProgram(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteProgram");
#endif
			break;
			case OP_glDeleteRenderbuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteRenderbuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteRenderbuffers(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteRenderbuffers");
#endif
			break;
			case OP_glDeleteShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteShader(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glDeleteShader(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteShader");
#endif
			break;
			case OP_glDeleteTextures:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteTextures(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteTextures(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteTextures");
#endif
			break;
			case OP_glDepthFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthFunc(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glDepthFunc(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthFunc");
#endif
			break;
			case OP_glDepthMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthMask(%d )\n", stream,*(GLboolean *)(ptr + 8));
#endif
			this->glDepthMask(*(GLboolean *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthMask");
#endif
			break;
			case OP_glDepthRangef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangef(%f %f )\n", stream,*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
#endif
			this->glDepthRangef(*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangef");
#endif
			break;
			case OP_glDetachShader:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDetachShader(%u %u )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glDetachShader(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDetachShader");
#endif
			break;
			case OP_glDisable:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisable(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glDisable(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisable");
#endif
			break;
			case OP_glDisableVertexAttribArray:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisableVertexAttribArray(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glDisableVertexAttribArray(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisableVertexAttribArray");
#endif
			break;
			case OP_glDrawArrays:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawArrays(0x%08x %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4));
#endif
			this->glDrawArrays(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawArrays");
#endif
			break;
			case OP_glDrawElements:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElements(0x%08x %d 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glDrawElements(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElements");
#endif
			break;
			case OP_glEnable:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnable(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glEnable(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnable");
#endif
			break;
			case OP_glEnableVertexAttribArray:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnableVertexAttribArray(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glEnableVertexAttribArray(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnableVertexAttribArray");
#endif
			break;
			case OP_glFinish:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinish()\n", stream);
#endif
			this->glFinish();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinish");
#endif
			break;
			case OP_glFlush:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFlush()\n", stream);
#endif
			this->glFlush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFlush");
#endif
			break;
			case OP_glFramebufferRenderbuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferRenderbuffer(0x%08x 0x%08x 0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glFramebufferRenderbuffer(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferRenderbuffer");
#endif
			break;
			case OP_glFramebufferTexture2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture2D(0x%08x 0x%08x 0x%08x %u %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture2D(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture2D");
#endif
			break;
			case OP_glFrontFace:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrontFace(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glFrontFace(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrontFace");
#endif
			break;
			case OP_glGenBuffers:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenBuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenBuffers(*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenBuffers");
#endif
			break;
			case OP_glGenerateMipmap:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenerateMipmap(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glGenerateMipmap(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenerateMipmap");
#endif
			break;
			case OP_glGenFramebuffers:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenFramebuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenFramebuffers(*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenFramebuffers");
#endif
			break;
			case OP_glGenRenderbuffers:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenRenderbuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenRenderbuffers(*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenRenderbuffers");
#endif
			break;
			case OP_glGenTextures:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenTextures(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenTextures(*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenTextures");
#endif
			break;
			case OP_glGetActiveAttrib:
			{
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			size_t tmpPtr5Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr5Size;
			size_t tmpPtr6Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr6Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
			unsigned char *tmpPtr5 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size];
			memset(tmpPtr5, 0, 4);
			unsigned char *tmpPtr6 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size + tmpPtr5Size];
			memset(tmpPtr6, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetActiveAttrib(%u %u %d %p(%u) %p(%u) %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (GLsizei*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4), (GLenum*)(tmpPtr5), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLchar*)(tmpPtr6), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glGetActiveAttrib(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), tmpPtr3Size == 0 ? NULL : (GLsizei*)(tmpPtr3), (GLint*)(tmpPtr4), (GLenum*)(tmpPtr5), tmpPtr6Size == 0 ? NULL : (GLchar*)(tmpPtr6));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetActiveAttrib");
#endif
			break;
			case OP_glGetActiveUniform:
			{
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			size_t tmpPtr4Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr4Size;
			size_t tmpPtr5Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr5Size;
			size_t tmpPtr6Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4);
			totalTmpSize += tmpPtr6Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
			unsigned char *tmpPtr4 = &tmpBuf[0 + tmpPtr3Size];
			memset(tmpPtr4, 0, 4);
			unsigned char *tmpPtr5 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size];
			memset(tmpPtr5, 0, 4);
			unsigned char *tmpPtr6 = &tmpBuf[0 + tmpPtr3Size + tmpPtr4Size + tmpPtr5Size];
			memset(tmpPtr6, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetActiveUniform(%u %u %d %p(%u) %p(%u) %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (GLsizei*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4), (GLenum*)(tmpPtr5), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLchar*)(tmpPtr6), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glGetActiveUniform(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), tmpPtr3Size == 0 ? NULL : (GLsizei*)(tmpPtr3), (GLint*)(tmpPtr4), (GLenum*)(tmpPtr5), tmpPtr6Size == 0 ? NULL : (GLchar*)(tmpPtr6));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetActiveUniform");
#endif
			break;
			case OP_glGetAttachedShaders:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetAttachedShaders(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4), (GLuint*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetAttachedShaders(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLuint*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetAttachedShaders");
#endif
			break;
			case OP_glGetAttribLocation:
			{
			size_t totalTmpSize = sizeof(int);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetAttribLocation(%u %p(%u) )\n", stream,*(GLuint *)(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			*(int *)(&tmpBuf[0]) = 			this->glGetAttribLocation(*(GLuint *)(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetAttribLocation");
#endif
			break;
			case OP_glGetBooleanv:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBooleanv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLboolean*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetBooleanv(*(GLenum *)(ptr + 8), (GLboolean*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBooleanv");
#endif
			break;
			case OP_glGetBufferParameteriv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBufferParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetBufferParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBufferParameteriv");
#endif
			break;
			case OP_glGetError:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetError()\n", stream);
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glGetError();
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetError");
#endif
			break;
			case OP_glGetFloatv:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFloatv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfloat*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetFloatv(*(GLenum *)(ptr + 8), (GLfloat*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFloatv");
#endif
			break;
			case OP_glGetFramebufferAttachmentParameteriv:
			{
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFramebufferAttachmentParameteriv(0x%08x 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetFramebufferAttachmentParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFramebufferAttachmentParameteriv");
#endif
			break;
			case OP_glGetIntegerv:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetIntegerv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetIntegerv(*(GLenum *)(ptr + 8), (GLint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetIntegerv");
#endif
			break;
			case OP_glGetProgramiv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramiv(%u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetProgramiv(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramiv");
#endif
			break;
			case OP_glGetProgramInfoLog:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramInfoLog(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetProgramInfoLog(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramInfoLog");
#endif
			break;
			case OP_glGetRenderbufferParameteriv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetRenderbufferParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetRenderbufferParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetRenderbufferParameteriv");
#endif
			break;
			case OP_glGetShaderiv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderiv(%u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetShaderiv(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderiv");
#endif
			break;
			case OP_glGetShaderInfoLog:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderInfoLog(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetShaderInfoLog(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderInfoLog");
#endif
			break;
			case OP_glGetShaderPrecisionFormat:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderPrecisionFormat(0x%08x 0x%08x %p(%u) %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetShaderPrecisionFormat(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), (GLint*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderPrecisionFormat");
#endif
			break;
			case OP_glGetShaderSource:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetShaderSource(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetShaderSource(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), tmpPtr2Size == 0 ? NULL : (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetShaderSource");
#endif
			break;
			case OP_glGetString:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetString(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glGetString(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetString");
#endif
			break;
			case OP_glGetTexParameterfv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameterfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameterfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameterfv");
#endif
			break;
			case OP_glGetTexParameteriv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameteriv");
#endif
			break;
			case OP_glGetUniformfv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformfv(%u %d %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetUniformfv(*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformfv");
#endif
			break;
			case OP_glGetUniformiv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformiv(%u %d %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetUniformiv(*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformiv");
#endif
			break;
			case OP_glGetUniformLocation:
			{
			size_t totalTmpSize = sizeof(int);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetUniformLocation(%u %p(%u) )\n", stream,*(GLuint *)(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			*(int *)(&tmpBuf[0]) = 			this->glGetUniformLocation(*(GLuint *)(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetUniformLocation");
#endif
			break;
			case OP_glGetVertexAttribfv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribfv(%u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribfv(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribfv");
#endif
			break;
			case OP_glGetVertexAttribiv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribiv(%u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribiv(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribiv");
#endif
			break;
			case OP_glGetVertexAttribPointerv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetVertexAttribPointerv(%u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetVertexAttribPointerv(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetVertexAttribPointerv");
#endif
			break;
			case OP_glHint:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glHint(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glHint(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glHint");
#endif
			break;
			case OP_glIsBuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsBuffer(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsBuffer(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsBuffer");
#endif
			break;
			case OP_glIsEnabled:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsEnabled(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsEnabled(*(GLenum *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsEnabled");
#endif
			break;
			case OP_glIsFramebuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsFramebuffer(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsFramebuffer(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsFramebuffer");
#endif
			break;
			case OP_glIsProgram:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsProgram(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsProgram(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsProgram");
#endif
			break;
			case OP_glIsRenderbuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsRenderbuffer(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsRenderbuffer(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsRenderbuffer");
#endif
			break;
			case OP_glIsShader:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsShader(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsShader(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsShader");
#endif
			break;
			case OP_glIsTexture:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsTexture(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsTexture(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsTexture");
#endif
			break;
			case OP_glLineWidth:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLineWidth(%f )\n", stream,*(GLfloat *)(ptr + 8));
#endif
			this->glLineWidth(*(GLfloat *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLineWidth");
#endif
			break;
			case OP_glLinkProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLinkProgram(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glLinkProgram(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLinkProgram");
#endif
			break;
			case OP_glPixelStorei:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPixelStorei(0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4));
#endif
			this->glPixelStorei(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPixelStorei");
#endif
			break;
			case OP_glPolygonOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPolygonOffset(%f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
#endif
			this->glPolygonOffset(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPolygonOffset");
#endif
			break;
			case OP_glReadPixels:
			{
			size_t tmpPtr6Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr6Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr6 = &tmpBuf[0];
			memset(tmpPtr6, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glReadPixels(%d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr6), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glReadPixels(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr6));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glReadPixels");
#endif
			break;
			case OP_glReleaseShaderCompiler:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glReleaseShaderCompiler()\n", stream);
#endif
			this->glReleaseShaderCompiler();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glReleaseShaderCompiler");
#endif
			break;
			case OP_glRenderbufferStorage:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorage(0x%08x 0x%08x %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorage(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorage");
#endif
			break;
			case OP_glSampleCoverage:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleCoverage(%f %d )\n", stream,*(GLclampf *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
#endif
			this->glSampleCoverage(*(GLclampf *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleCoverage");
#endif
			break;
			case OP_glScissor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScissor(%d %d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glScissor(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScissor");
#endif
			break;
			case OP_glShaderBinary:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShaderBinary(%d %p(%u) 0x%08x %p(%u) %d )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
#endif
			this->glShaderBinary(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShaderBinary");
#endif
			break;
			case OP_glShaderSource:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShaderSource(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLchar**)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glShaderSource(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLchar**)(ptr + 8 + 4 + 4 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShaderSource");
#endif
			break;
			case OP_glStencilFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilFunc(0x%08x %d %u )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
#endif
			this->glStencilFunc(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilFunc");
#endif
			break;
			case OP_glStencilFuncSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilFuncSeparate(0x%08x 0x%08x %d %u )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glStencilFuncSeparate(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilFuncSeparate");
#endif
			break;
			case OP_glStencilMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilMask(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glStencilMask(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilMask");
#endif
			break;
			case OP_glStencilMaskSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilMaskSeparate(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glStencilMaskSeparate(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilMaskSeparate");
#endif
			break;
			case OP_glStencilOp:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilOp(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4));
#endif
			this->glStencilOp(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilOp");
#endif
			break;
			case OP_glStencilOpSeparate:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilOpSeparate(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glStencilOpSeparate(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilOpSeparate");
#endif
			break;
			case OP_glTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage2D(0x%08x %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage2D");
#endif
			break;
			case OP_glTexParameterf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterf(0x%08x 0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterf(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterf");
#endif
			break;
			case OP_glTexParameterfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterfv");
#endif
			break;
			case OP_glTexParameteri:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameteri(0x%08x 0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameteri(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameteri");
#endif
			break;
			case OP_glTexParameteriv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameteriv");
#endif
			break;
			case OP_glTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage2D(0x%08x %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage2D");
#endif
			break;
			case OP_glUniform1f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1f(%d %f )\n", stream,*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
#endif
			this->glUniform1f(*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1f");
#endif
			break;
			case OP_glUniform1fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1fv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform1fv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1fv");
#endif
			break;
			case OP_glUniform1i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1i(%d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4));
#endif
			this->glUniform1i(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1i");
#endif
			break;
			case OP_glUniform1iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform1iv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform1iv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform1iv");
#endif
			break;
			case OP_glUniform2f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2f(%d %f %f )\n", stream,*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform2f(*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2f");
#endif
			break;
			case OP_glUniform2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2fv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform2fv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2fv");
#endif
			break;
			case OP_glUniform2i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2i(%d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform2i(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2i");
#endif
			break;
			case OP_glUniform2iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform2iv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform2iv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform2iv");
#endif
			break;
			case OP_glUniform3f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3f(%d %f %f %f )\n", stream,*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glUniform3f(*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3f");
#endif
			break;
			case OP_glUniform3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3fv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform3fv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3fv");
#endif
			break;
			case OP_glUniform3i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3i(%d %d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glUniform3i(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3i");
#endif
			break;
			case OP_glUniform3iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform3iv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform3iv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform3iv");
#endif
			break;
			case OP_glUniform4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4f(%d %f %f %f %f )\n", stream,*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glUniform4f(*(GLint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4f");
#endif
			break;
			case OP_glUniform4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4fv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform4fv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4fv");
#endif
			break;
			case OP_glUniform4i:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4i(%d %d %d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glUniform4i(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4i");
#endif
			break;
			case OP_glUniform4iv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniform4iv(%d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glUniform4iv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniform4iv");
#endif
			break;
			case OP_glUniformMatrix2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix2fv(%d %d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLboolean *)(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix2fv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLboolean *)(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix2fv");
#endif
			break;
			case OP_glUniformMatrix3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix3fv(%d %d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLboolean *)(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix3fv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLboolean *)(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix3fv");
#endif
			break;
			case OP_glUniformMatrix4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUniformMatrix4fv(%d %d %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLboolean *)(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 1));
#endif
			this->glUniformMatrix4fv(*(GLint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLboolean *)(ptr + 8 + 4 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 1 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUniformMatrix4fv");
#endif
			break;
			case OP_glUseProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUseProgram(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glUseProgram(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUseProgram");
#endif
			break;
			case OP_glValidateProgram:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glValidateProgram(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glValidateProgram(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glValidateProgram");
#endif
			break;
			case OP_glVertexAttrib1f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib1f(%u %f )\n", stream,*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
#endif
			this->glVertexAttrib1f(*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib1f");
#endif
			break;
			case OP_glVertexAttrib1fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib1fv(%u %p(%u) )\n", stream,*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glVertexAttrib1fv(*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib1fv");
#endif
			break;
			case OP_glVertexAttrib2f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib2f(%u %f %f )\n", stream,*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glVertexAttrib2f(*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib2f");
#endif
			break;
			case OP_glVertexAttrib2fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib2fv(%u %p(%u) )\n", stream,*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glVertexAttrib2fv(*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib2fv");
#endif
			break;
			case OP_glVertexAttrib3f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib3f(%u %f %f %f )\n", stream,*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glVertexAttrib3f(*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib3f");
#endif
			break;
			case OP_glVertexAttrib3fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib3fv(%u %p(%u) )\n", stream,*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glVertexAttrib3fv(*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib3fv");
#endif
			break;
			case OP_glVertexAttrib4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib4f(%u %f %f %f %f )\n", stream,*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glVertexAttrib4f(*(GLuint *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib4f");
#endif
			break;
			case OP_glVertexAttrib4fv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttrib4fv(%u %p(%u) )\n", stream,*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glVertexAttrib4fv(*(GLuint *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttrib4fv");
#endif
			break;
			case OP_glVertexAttribPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribPointer(%u %d 0x%08x %d %d %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLboolean *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 1), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
#endif
			this->glVertexAttribPointer(*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLboolean *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 1), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribPointer");
#endif
			break;
			case OP_glViewport:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glViewport(%d %d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glViewport(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glViewport");
#endif
			break;
			case OP_glEGLImageTargetTexture2DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEGLImageTargetTexture2DOES(0x%08x %p )\n", stream,*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
#endif
			this->glEGLImageTargetTexture2DOES(*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEGLImageTargetTexture2DOES");
#endif
			break;
			case OP_glEGLImageTargetRenderbufferStorageOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEGLImageTargetRenderbufferStorageOES(0x%08x %p )\n", stream,*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
#endif
			this->glEGLImageTargetRenderbufferStorageOES(*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEGLImageTargetRenderbufferStorageOES");
#endif
			break;
			case OP_glGetProgramBinaryOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetProgramBinaryOES(%u %d %p(%u) %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), (GLenum*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4))));
#endif
			this->glGetProgramBinaryOES(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), (GLenum*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetProgramBinaryOES");
#endif
			break;
			case OP_glProgramBinaryOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glProgramBinaryOES(%u 0x%08x %p(%u) %d )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glProgramBinaryOES(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glProgramBinaryOES");
#endif
			break;
			case OP_glMapBufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMapBufferOES(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glMapBufferOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMapBufferOES");
#endif
			break;
			case OP_glUnmapBufferOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUnmapBufferOES(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glUnmapBufferOES(*(GLenum *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUnmapBufferOES");
#endif
			break;
			case OP_glTexImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage3DOES(0x%08x %d 0x%08x %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage3DOES(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *((unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4)) == 0 ? NULL : (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage3DOES");
#endif
			break;
			case OP_glTexSubImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage3DOES(0x%08x %d %d %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage3DOES(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage3DOES");
#endif
			break;
			case OP_glCopyTexSubImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexSubImage3DOES(0x%08x %d %d %d %d %d %d %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexSubImage3DOES(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexSubImage3DOES");
#endif
			break;
			case OP_glCompressedTexImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage3DOES(0x%08x %d 0x%08x %d %d %d %d %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage3DOES(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage3DOES");
#endif
			break;
			case OP_glCompressedTexSubImage3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage3DOES(0x%08x %d %d %d %d %d %d %d 0x%08x %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage3DOES(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage3DOES");
#endif
			break;
			case OP_glFramebufferTexture3DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture3DOES(0x%08x 0x%08x 0x%08x %u %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture3DOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture3DOES");
#endif
			break;
			case OP_glBindVertexArrayOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindVertexArrayOES(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glBindVertexArrayOES(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindVertexArrayOES");
#endif
			break;
			case OP_glDeleteVertexArraysOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteVertexArraysOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteVertexArraysOES(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteVertexArraysOES");
#endif
			break;
			case OP_glGenVertexArraysOES:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenVertexArraysOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenVertexArraysOES(*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenVertexArraysOES");
#endif
			break;
			case OP_glIsVertexArrayOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsVertexArrayOES(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsVertexArrayOES(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsVertexArrayOES");
#endif
			break;
			case OP_glDiscardFramebufferEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDiscardFramebufferEXT(0x%08x %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glDiscardFramebufferEXT(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDiscardFramebufferEXT");
#endif
			break;
			case OP_glMultiDrawArraysEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawArraysEXT(0x%08x %p(%u) %p(%u) %d )\n", stream,*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))));
#endif
			this->glMultiDrawArraysEXT(*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawArraysEXT");
#endif
			break;
			case OP_glMultiDrawElementsEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawElementsEXT(0x%08x %p(%u) 0x%08x %p(%u) %d )\n", stream,*(GLenum *)(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
#endif
			this->glMultiDrawElementsEXT(*(GLenum *)(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawElementsEXT");
#endif
			break;
			case OP_glGetPerfMonitorGroupsAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorGroupsAMD(%p(%u) %d %p(%u) )\n", stream,(GLint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLuint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glGetPerfMonitorGroupsAMD((GLint*)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLuint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorGroupsAMD");
#endif
			break;
			case OP_glGetPerfMonitorCountersAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCountersAMD(%u %p(%u) %p(%u) %d %p(%u) )\n", stream,*(GLuint *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))), (GLuint*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)) + 4));
#endif
			this->glGetPerfMonitorCountersAMD(*(GLuint *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))), (GLuint*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCountersAMD");
#endif
			break;
			case OP_glGetPerfMonitorGroupStringAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorGroupStringAMD(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glGetPerfMonitorGroupStringAMD(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorGroupStringAMD");
#endif
			break;
			case OP_glGetPerfMonitorCounterStringAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCounterStringAMD(%u %u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glGetPerfMonitorCounterStringAMD(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCounterStringAMD");
#endif
			break;
			case OP_glGetPerfMonitorCounterInfoAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCounterInfoAMD(%u %u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetPerfMonitorCounterInfoAMD(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCounterInfoAMD");
#endif
			break;
			case OP_glGenPerfMonitorsAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenPerfMonitorsAMD(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenPerfMonitorsAMD(*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenPerfMonitorsAMD");
#endif
			break;
			case OP_glDeletePerfMonitorsAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeletePerfMonitorsAMD(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeletePerfMonitorsAMD(*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeletePerfMonitorsAMD");
#endif
			break;
			case OP_glSelectPerfMonitorCountersAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSelectPerfMonitorCountersAMD(%u %d %u %d %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 1), *(GLint *)(ptr + 8 + 4 + 1 + 4), (GLuint*)(ptr + 8 + 4 + 1 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 1 + 4 + 4));
#endif
			this->glSelectPerfMonitorCountersAMD(*(GLuint *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 1), *(GLint *)(ptr + 8 + 4 + 1 + 4), (GLuint*)(ptr + 8 + 4 + 1 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSelectPerfMonitorCountersAMD");
#endif
			break;
			case OP_glBeginPerfMonitorAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBeginPerfMonitorAMD(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glBeginPerfMonitorAMD(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBeginPerfMonitorAMD");
#endif
			break;
			case OP_glEndPerfMonitorAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEndPerfMonitorAMD(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glEndPerfMonitorAMD(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEndPerfMonitorAMD");
#endif
			break;
			case OP_glGetPerfMonitorCounterDataAMD:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPerfMonitorCounterDataAMD(%u 0x%08x %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glGetPerfMonitorCounterDataAMD(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (GLuint*)(ptr + 8 + 4 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPerfMonitorCounterDataAMD");
#endif
			break;
			case OP_glRenderbufferStorageMultisampleIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorageMultisampleIMG(0x%08x %d 0x%08x %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorageMultisampleIMG(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorageMultisampleIMG");
#endif
			break;
			case OP_glFramebufferTexture2DMultisampleIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture2DMultisampleIMG(0x%08x 0x%08x 0x%08x %u %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture2DMultisampleIMG(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture2DMultisampleIMG");
#endif
			break;
			case OP_glDeleteFencesNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteFencesNV(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteFencesNV(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteFencesNV");
#endif
			break;
			case OP_glGenFencesNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenFencesNV(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenFencesNV(*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenFencesNV");
#endif
			break;
			case OP_glIsFenceNV:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsFenceNV(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsFenceNV(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsFenceNV");
#endif
			break;
			case OP_glTestFenceNV:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTestFenceNV(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glTestFenceNV(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTestFenceNV");
#endif
			break;
			case OP_glGetFenceivNV:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFenceivNV(%u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetFenceivNV(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFenceivNV");
#endif
			break;
			case OP_glFinishFenceNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinishFenceNV(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glFinishFenceNV(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinishFenceNV");
#endif
			break;
			case OP_glSetFenceNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSetFenceNV(%u 0x%08x )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glSetFenceNV(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSetFenceNV");
#endif
			break;
			case OP_glCoverageMaskNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCoverageMaskNV(%d )\n", stream,*(GLboolean *)(ptr + 8));
#endif
			this->glCoverageMaskNV(*(GLboolean *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCoverageMaskNV");
#endif
			break;
			case OP_glCoverageOperationNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCoverageOperationNV(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glCoverageOperationNV(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCoverageOperationNV");
#endif
			break;
			case OP_glGetDriverControlsQCOM:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetDriverControlsQCOM(%p(%u) %d %p(%u) )\n", stream,(GLint*)(tmpPtr0), *(unsigned int *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLuint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetDriverControlsQCOM((GLint*)(tmpPtr0), *(GLsizei *)(ptr + 8 + 4), (GLuint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetDriverControlsQCOM");
#endif
			break;
			case OP_glGetDriverControlStringQCOM:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			totalTmpSize += tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
			unsigned char *tmpPtr3 = &tmpBuf[0 + tmpPtr2Size];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetDriverControlStringQCOM(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4), (GLchar*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetDriverControlStringQCOM(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(tmpPtr2), (GLchar*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetDriverControlStringQCOM");
#endif
			break;
			case OP_glEnableDriverControlQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnableDriverControlQCOM(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glEnableDriverControlQCOM(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnableDriverControlQCOM");
#endif
			break;
			case OP_glDisableDriverControlQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisableDriverControlQCOM(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glDisableDriverControlQCOM(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisableDriverControlQCOM");
#endif
			break;
			case OP_glExtGetTexturesQCOM:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexturesQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glExtGetTexturesQCOM((GLuint*)(tmpPtr0), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexturesQCOM");
#endif
			break;
			case OP_glExtGetBuffersQCOM:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetBuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glExtGetBuffersQCOM((GLuint*)(tmpPtr0), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetBuffersQCOM");
#endif
			break;
			case OP_glExtGetRenderbuffersQCOM:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetRenderbuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glExtGetRenderbuffersQCOM((GLuint*)(tmpPtr0), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetRenderbuffersQCOM");
#endif
			break;
			case OP_glExtGetFramebuffersQCOM:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetFramebuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glExtGetFramebuffersQCOM((GLuint*)(tmpPtr0), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetFramebuffersQCOM");
#endif
			break;
			case OP_glExtGetTexLevelParameterivQCOM:
			{
			size_t tmpPtr4Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr4Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr4 = &tmpBuf[0];
			memset(tmpPtr4, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexLevelParameterivQCOM(%u 0x%08x %d 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glExtGetTexLevelParameterivQCOM(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4), (GLint*)(tmpPtr4));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexLevelParameterivQCOM");
#endif
			break;
			case OP_glExtTexObjectStateOverrideiQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtTexObjectStateOverrideiQCOM(0x%08x 0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
#endif
			this->glExtTexObjectStateOverrideiQCOM(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtTexObjectStateOverrideiQCOM");
#endif
			break;
			case OP_glExtGetTexSubImageQCOM:
			{
			size_t tmpPtr10Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr10Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr10 = &tmpBuf[0];
			memset(tmpPtr10, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexSubImageQCOM(0x%08x %d %d %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr10), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glExtGetTexSubImageQCOM(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(tmpPtr10));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexSubImageQCOM");
#endif
			break;
			case OP_glExtGetBufferPointervQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetBufferPointervQCOM(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLvoidptr*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glExtGetBufferPointervQCOM(*(GLenum *)(ptr + 8), (GLvoidptr*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetBufferPointervQCOM");
#endif
			break;
			case OP_glExtGetShadersQCOM:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetShadersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glExtGetShadersQCOM((GLuint*)(tmpPtr0), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetShadersQCOM");
#endif
			break;
			case OP_glExtGetProgramsQCOM:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			totalTmpSize += tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr2 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetProgramsQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(tmpPtr0), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glExtGetProgramsQCOM((GLuint*)(tmpPtr0), *(GLint *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetProgramsQCOM");
#endif
			break;
			case OP_glExtIsProgramBinaryQCOM:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtIsProgramBinaryQCOM(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glExtIsProgramBinaryQCOM(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtIsProgramBinaryQCOM");
#endif
			break;
			case OP_glExtGetProgramBinarySourceQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetProgramBinarySourceQCOM(%u 0x%08x %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glExtGetProgramBinarySourceQCOM(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetProgramBinarySourceQCOM");
#endif
			break;
			case OP_glStartTilingQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStartTilingQCOM(%u %u %u %u 0x%08x )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLbitfield *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glStartTilingQCOM(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLbitfield *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStartTilingQCOM");
#endif
			break;
			case OP_glEndTilingQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEndTilingQCOM(0x%08x )\n", stream,*(GLbitfield *)(ptr + 8));
#endif
			this->glEndTilingQCOM(*(GLbitfield *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEndTilingQCOM");
#endif
			break;
			case OP_glVertexAttribPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribPointerData(%u %d 0x%08x %d %d %p(%u) %u )\n", stream,*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLboolean *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 1), (void*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 1 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4 + 1 + 4)));
#endif
			this->glVertexAttribPointerData(this, *(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLboolean *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 1), (void*)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 1 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4 + 1 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribPointerData");
#endif
			break;
			case OP_glVertexAttribPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexAttribPointerOffset(%u %d 0x%08x %d %d %u )\n", stream,*(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLboolean *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 1), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
#endif
			this->glVertexAttribPointerOffset(this, *(GLuint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLboolean *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 1), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 1 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexAttribPointerOffset");
#endif
			break;
			case OP_glDrawElementsOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsOffset(0x%08x %d 0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glDrawElementsOffset(this, *(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsOffset");
#endif
			break;
			case OP_glDrawElementsData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsData(0x%08x %d 0x%08x %p(%u) %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glDrawElementsData(this, *(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsData");
#endif
			break;
			case OP_glGetCompressedTextureFormats:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetCompressedTextureFormats(%d %p(%u) )\n", stream,*(int *)(ptr + 8), (GLint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetCompressedTextureFormats(this, *(int *)(ptr + 8), (GLint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetCompressedTextureFormats");
#endif
			break;
			case OP_glShaderString:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShaderString(%u %p(%u) %d )\n", stream,*(GLuint *)(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)));
#endif
			this->glShaderString(this, *(GLuint *)(ptr + 8), (const GLchar*)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShaderString");
#endif
			break;
			case OP_glFinishRoundTrip:
			{
			size_t totalTmpSize = sizeof(int);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinishRoundTrip()\n", stream);
#endif
			*(int *)(&tmpBuf[0]) = 			this->glFinishRoundTrip(this);
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinishRoundTrip");
#endif
			break;
			case OP_glAlphaFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAlphaFunc(0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
#endif
			this->glAlphaFunc(*(GLenum *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAlphaFunc");
#endif
			break;
			case OP_glClearColor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearColor(%f %f %f %f )\n", stream,*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4), *(GLclampf *)(ptr + 8 + 4 + 4), *(GLclampf *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearColor(*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4), *(GLclampf *)(ptr + 8 + 4 + 4), *(GLclampf *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearColor");
#endif
			break;
			case OP_glClearDepthf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthf(%f )\n", stream,*(GLclampf *)(ptr + 8));
#endif
			this->glClearDepthf(*(GLclampf *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthf");
#endif
			break;
			case OP_glClipPlanef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanef(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glClipPlanef(*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanef");
#endif
			break;
			case OP_glColor4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4f(%f %f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColor4f(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4f");
#endif
			break;
			case OP_glDepthRangef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangef(%f %f )\n", stream,*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
#endif
			this->glDepthRangef(*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangef");
#endif
			break;
			case OP_glFogf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogf(0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
#endif
			this->glFogf(*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogf");
#endif
			break;
			case OP_glFogfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogfv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glFogfv(*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogfv");
#endif
			break;
			case OP_glFrustumf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumf(%f %f %f %f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumf(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumf");
#endif
			break;
			case OP_glGetClipPlanef:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanef(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfloat*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetClipPlanef(*(GLenum *)(ptr + 8), (GLfloat*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanef");
#endif
			break;
			case OP_glGetFloatv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFloatv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetFloatv(*(GLenum *)(ptr + 8), (GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFloatv");
#endif
			break;
			case OP_glGetLightfv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetLightfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetLightfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetLightfv");
#endif
			break;
			case OP_glGetMaterialfv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetMaterialfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetMaterialfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetMaterialfv");
#endif
			break;
			case OP_glGetTexEnvfv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnvfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnvfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnvfv");
#endif
			break;
			case OP_glGetTexParameterfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameterfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameterfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameterfv");
#endif
			break;
			case OP_glLightModelf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelf(0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
#endif
			this->glLightModelf(*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelf");
#endif
			break;
			case OP_glLightModelfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelfv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glLightModelfv(*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelfv");
#endif
			break;
			case OP_glLightf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightf(0x%08x 0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glLightf(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightf");
#endif
			break;
			case OP_glLightfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glLightfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightfv");
#endif
			break;
			case OP_glLineWidth:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLineWidth(%f )\n", stream,*(GLfloat *)(ptr + 8));
#endif
			this->glLineWidth(*(GLfloat *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLineWidth");
#endif
			break;
			case OP_glLoadMatrixf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadMatrixf(%p(%u) )\n", stream,(const GLfloat*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glLoadMatrixf((const GLfloat*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadMatrixf");
#endif
			break;
			case OP_glMaterialf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialf(0x%08x 0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glMaterialf(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialf");
#endif
			break;
			case OP_glMaterialfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glMaterialfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialfv");
#endif
			break;
			case OP_glMultMatrixf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultMatrixf(%p(%u) )\n", stream,(const GLfloat*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glMultMatrixf((const GLfloat*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultMatrixf");
#endif
			break;
			case OP_glMultiTexCoord4f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiTexCoord4f(0x%08x %f %f %f %f )\n", stream,*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glMultiTexCoord4f(*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiTexCoord4f");
#endif
			break;
			case OP_glNormal3f:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormal3f(%f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glNormal3f(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormal3f");
#endif
			break;
			case OP_glOrthof:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthof(%f %f %f %f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthof(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthof");
#endif
			break;
			case OP_glPointParameterf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterf(0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
#endif
			this->glPointParameterf(*(GLenum *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterf");
#endif
			break;
			case OP_glPointParameterfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterfv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glPointParameterfv(*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterfv");
#endif
			break;
			case OP_glPointSize:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSize(%f )\n", stream,*(GLfloat *)(ptr + 8));
#endif
			this->glPointSize(*(GLfloat *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSize");
#endif
			break;
			case OP_glPolygonOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPolygonOffset(%f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
#endif
			this->glPolygonOffset(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPolygonOffset");
#endif
			break;
			case OP_glRotatef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRotatef(%f %f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRotatef(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRotatef");
#endif
			break;
			case OP_glScalef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScalef(%f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glScalef(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScalef");
#endif
			break;
			case OP_glTexEnvf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvf(0x%08x 0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvf(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvf");
#endif
			break;
			case OP_glTexEnvfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvfv");
#endif
			break;
			case OP_glTexParameterf:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterf(0x%08x 0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterf(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterf");
#endif
			break;
			case OP_glTexParameterfv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterfv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterfv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterfv");
#endif
			break;
			case OP_glTranslatef:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTranslatef(%f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glTranslatef(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTranslatef");
#endif
			break;
			case OP_glActiveTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glActiveTexture(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glActiveTexture(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glActiveTexture");
#endif
			break;
			case OP_glAlphaFuncx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAlphaFuncx(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
#endif
			this->glAlphaFuncx(*(GLenum *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAlphaFuncx");
#endif
			break;
			case OP_glBindBuffer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindBuffer(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindBuffer(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindBuffer");
#endif
			break;
			case OP_glBindTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindTexture(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindTexture(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindTexture");
#endif
			break;
			case OP_glBlendFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendFunc(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glBlendFunc(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendFunc");
#endif
			break;
			case OP_glBufferData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBufferData(0x%08x %p %p(%u) 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLsizeiptr *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glBufferData(*(GLenum *)(ptr + 8), *(GLsizeiptr *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBufferData");
#endif
			break;
			case OP_glBufferSubData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBufferSubData(0x%08x %p %p %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLintptr *)(ptr + 8 + 4), *(GLsizeiptr *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBufferSubData(*(GLenum *)(ptr + 8), *(GLintptr *)(ptr + 8 + 4), *(GLsizeiptr *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBufferSubData");
#endif
			break;
			case OP_glClear:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClear(0x%08x )\n", stream,*(GLbitfield *)(ptr + 8));
#endif
			this->glClear(*(GLbitfield *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClear");
#endif
			break;
			case OP_glClearColorx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearColorx(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4), *(GLclampx *)(ptr + 8 + 4 + 4), *(GLclampx *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearColorx(*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4), *(GLclampx *)(ptr + 8 + 4 + 4), *(GLclampx *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearColorx");
#endif
			break;
			case OP_glClearDepthx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthx(0x%08x )\n", stream,*(GLclampx *)(ptr + 8));
#endif
			this->glClearDepthx(*(GLclampx *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthx");
#endif
			break;
			case OP_glClearStencil:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearStencil(%d )\n", stream,*(GLint *)(ptr + 8));
#endif
			this->glClearStencil(*(GLint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearStencil");
#endif
			break;
			case OP_glClientActiveTexture:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClientActiveTexture(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glClientActiveTexture(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClientActiveTexture");
#endif
			break;
			case OP_glColor4ub:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4ub(0x%02x 0x%02x 0x%02x 0x%02x )\n", stream,*(GLubyte *)(ptr + 8), *(GLubyte *)(ptr + 8 + 1), *(GLubyte *)(ptr + 8 + 1 + 1), *(GLubyte *)(ptr + 8 + 1 + 1 + 1));
#endif
			this->glColor4ub(*(GLubyte *)(ptr + 8), *(GLubyte *)(ptr + 8 + 1), *(GLubyte *)(ptr + 8 + 1 + 1), *(GLubyte *)(ptr + 8 + 1 + 1 + 1));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4ub");
#endif
			break;
			case OP_glColor4x:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4x(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColor4x(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4x");
#endif
			break;
			case OP_glColorMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorMask(%d %d %d %d )\n", stream,*(GLboolean *)(ptr + 8), *(GLboolean *)(ptr + 8 + 1), *(GLboolean *)(ptr + 8 + 1 + 1), *(GLboolean *)(ptr + 8 + 1 + 1 + 1));
#endif
			this->glColorMask(*(GLboolean *)(ptr + 8), *(GLboolean *)(ptr + 8 + 1), *(GLboolean *)(ptr + 8 + 1 + 1), *(GLboolean *)(ptr + 8 + 1 + 1 + 1));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorMask");
#endif
			break;
			case OP_glColorPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorPointer(%d 0x%08x %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColorPointer(*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorPointer");
#endif
			break;
			case OP_glCompressedTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexImage2D(0x%08x %d 0x%08x %d %d %d %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexImage2D");
#endif
			break;
			case OP_glCompressedTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCompressedTexSubImage2D(0x%08x %d %d %d %d %d 0x%08x %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCompressedTexSubImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCompressedTexSubImage2D");
#endif
			break;
			case OP_glCopyTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexImage2D(0x%08x %d 0x%08x %d %d %d %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexImage2D");
#endif
			break;
			case OP_glCopyTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCopyTexSubImage2D(0x%08x %d %d %d %d %d %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glCopyTexSubImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCopyTexSubImage2D");
#endif
			break;
			case OP_glCullFace:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCullFace(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glCullFace(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCullFace");
#endif
			break;
			case OP_glDeleteBuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteBuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteBuffers(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteBuffers");
#endif
			break;
			case OP_glDeleteTextures:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteTextures(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteTextures(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteTextures");
#endif
			break;
			case OP_glDepthFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthFunc(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glDepthFunc(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthFunc");
#endif
			break;
			case OP_glDepthMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthMask(%d )\n", stream,*(GLboolean *)(ptr + 8));
#endif
			this->glDepthMask(*(GLboolean *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthMask");
#endif
			break;
			case OP_glDepthRangex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangex(0x%08x 0x%08x )\n", stream,*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
#endif
			this->glDepthRangex(*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangex");
#endif
			break;
			case OP_glDisable:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisable(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glDisable(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisable");
#endif
			break;
			case OP_glDisableClientState:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisableClientState(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glDisableClientState(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisableClientState");
#endif
			break;
			case OP_glDrawArrays:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawArrays(0x%08x %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4));
#endif
			this->glDrawArrays(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawArrays");
#endif
			break;
			case OP_glDrawElements:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElements(0x%08x %d 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glDrawElements(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElements");
#endif
			break;
			case OP_glEnable:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnable(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glEnable(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnable");
#endif
			break;
			case OP_glEnableClientState:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnableClientState(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glEnableClientState(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnableClientState");
#endif
			break;
			case OP_glFinish:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinish()\n", stream);
#endif
			this->glFinish();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinish");
#endif
			break;
			case OP_glFlush:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFlush()\n", stream);
#endif
			this->glFlush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFlush");
#endif
			break;
			case OP_glFogx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogx(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glFogx(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogx");
#endif
			break;
			case OP_glFogxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogxv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glFogxv(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogxv");
#endif
			break;
			case OP_glFrontFace:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrontFace(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glFrontFace(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrontFace");
#endif
			break;
			case OP_glFrustumx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumx(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumx(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumx");
#endif
			break;
			case OP_glGetBooleanv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBooleanv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLboolean*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetBooleanv(*(GLenum *)(ptr + 8), (GLboolean*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBooleanv");
#endif
			break;
			case OP_glGetBufferParameteriv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBufferParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetBufferParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBufferParameteriv");
#endif
			break;
			case OP_glClipPlanex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanex(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glClipPlanex(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanex");
#endif
			break;
			case OP_glGenBuffers:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenBuffers(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenBuffers(*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenBuffers");
#endif
			break;
			case OP_glGenTextures:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenTextures(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenTextures(*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenTextures");
#endif
			break;
			case OP_glGetError:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetError()\n", stream);
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glGetError();
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetError");
#endif
			break;
			case OP_glGetFixedv:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFixedv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetFixedv(*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFixedv");
#endif
			break;
			case OP_glGetIntegerv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetIntegerv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetIntegerv(*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetIntegerv");
#endif
			break;
			case OP_glGetLightxv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetLightxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetLightxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetLightxv");
#endif
			break;
			case OP_glGetMaterialxv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetMaterialxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetMaterialxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetMaterialxv");
#endif
			break;
			case OP_glGetPointerv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetPointerv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLvoid**)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetPointerv(*(GLenum *)(ptr + 8), (GLvoid**)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetPointerv");
#endif
			break;
			case OP_glGetString:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetString(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glGetString(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetString");
#endif
			break;
			case OP_glGetTexEnviv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnviv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnviv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnviv");
#endif
			break;
			case OP_glGetTexEnvxv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnvxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnvxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnvxv");
#endif
			break;
			case OP_glGetTexParameteriv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameteriv");
#endif
			break;
			case OP_glGetTexParameterxv:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameterxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameterxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameterxv");
#endif
			break;
			case OP_glHint:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glHint(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glHint(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glHint");
#endif
			break;
			case OP_glIsBuffer:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsBuffer(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsBuffer(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsBuffer");
#endif
			break;
			case OP_glIsEnabled:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsEnabled(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsEnabled(*(GLenum *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsEnabled");
#endif
			break;
			case OP_glIsTexture:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsTexture(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsTexture(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsTexture");
#endif
			break;
			case OP_glLightModelx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelx(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glLightModelx(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelx");
#endif
			break;
			case OP_glLightModelxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelxv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glLightModelxv(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelxv");
#endif
			break;
			case OP_glLightx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightx(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glLightx(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightx");
#endif
			break;
			case OP_glLightxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glLightxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightxv");
#endif
			break;
			case OP_glLineWidthx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLineWidthx(0x%08x )\n", stream,*(GLfixed *)(ptr + 8));
#endif
			this->glLineWidthx(*(GLfixed *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLineWidthx");
#endif
			break;
			case OP_glLoadIdentity:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadIdentity()\n", stream);
#endif
			this->glLoadIdentity();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadIdentity");
#endif
			break;
			case OP_glLoadMatrixx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadMatrixx(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glLoadMatrixx((const GLfixed*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadMatrixx");
#endif
			break;
			case OP_glLogicOp:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLogicOp(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glLogicOp(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLogicOp");
#endif
			break;
			case OP_glMaterialx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialx(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glMaterialx(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialx");
#endif
			break;
			case OP_glMaterialxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glMaterialxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialxv");
#endif
			break;
			case OP_glMatrixMode:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixMode(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glMatrixMode(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixMode");
#endif
			break;
			case OP_glMultMatrixx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultMatrixx(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glMultMatrixx((const GLfixed*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultMatrixx");
#endif
			break;
			case OP_glMultiTexCoord4x:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiTexCoord4x(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glMultiTexCoord4x(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiTexCoord4x");
#endif
			break;
			case OP_glNormal3x:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormal3x(0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glNormal3x(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormal3x");
#endif
			break;
			case OP_glNormalPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormalPointer(0x%08x %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glNormalPointer(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormalPointer");
#endif
			break;
			case OP_glOrthox:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthox(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthox(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthox");
#endif
			break;
			case OP_glPixelStorei:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPixelStorei(0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4));
#endif
			this->glPixelStorei(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPixelStorei");
#endif
			break;
			case OP_glPointParameterx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterx(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glPointParameterx(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterx");
#endif
			break;
			case OP_glPointParameterxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterxv(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glPointParameterxv(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterxv");
#endif
			break;
			case OP_glPointSizex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizex(0x%08x )\n", stream,*(GLfixed *)(ptr + 8));
#endif
			this->glPointSizex(*(GLfixed *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizex");
#endif
			break;
			case OP_glPolygonOffsetx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPolygonOffsetx(0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glPolygonOffsetx(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPolygonOffsetx");
#endif
			break;
			case OP_glPopMatrix:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPopMatrix()\n", stream);
#endif
			this->glPopMatrix();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPopMatrix");
#endif
			break;
			case OP_glPushMatrix:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPushMatrix()\n", stream);
#endif
			this->glPushMatrix();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPushMatrix");
#endif
			break;
			case OP_glReadPixels:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glReadPixels(%d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glReadPixels(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glReadPixels");
#endif
			break;
			case OP_glRotatex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRotatex(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRotatex(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRotatex");
#endif
			break;
			case OP_glSampleCoverage:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleCoverage(%f %d )\n", stream,*(GLclampf *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
#endif
			this->glSampleCoverage(*(GLclampf *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleCoverage");
#endif
			break;
			case OP_glSampleCoveragex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleCoveragex(0x%08x %d )\n", stream,*(GLclampx *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
#endif
			this->glSampleCoveragex(*(GLclampx *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleCoveragex");
#endif
			break;
			case OP_glScalex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScalex(0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glScalex(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScalex");
#endif
			break;
			case OP_glScissor:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScissor(%d %d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glScissor(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScissor");
#endif
			break;
			case OP_glShadeModel:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glShadeModel(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glShadeModel(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glShadeModel");
#endif
			break;
			case OP_glStencilFunc:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilFunc(0x%08x %d %u )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
#endif
			this->glStencilFunc(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilFunc");
#endif
			break;
			case OP_glStencilMask:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilMask(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glStencilMask(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilMask");
#endif
			break;
			case OP_glStencilOp:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStencilOp(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4));
#endif
			this->glStencilOp(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStencilOp");
#endif
			break;
			case OP_glTexCoordPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexCoordPointer(%d 0x%08x %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glTexCoordPointer(*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexCoordPointer");
#endif
			break;
			case OP_glTexEnvi:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvi(0x%08x 0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvi(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvi");
#endif
			break;
			case OP_glTexEnvx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvx(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvx(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvx");
#endif
			break;
			case OP_glTexEnviv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnviv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnviv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnviv");
#endif
			break;
			case OP_glTexEnvxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvxv");
#endif
			break;
			case OP_glTexImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexImage2D(0x%08x %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexImage2D");
#endif
			break;
			case OP_glTexParameteri:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameteri(0x%08x 0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameteri(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameteri");
#endif
			break;
			case OP_glTexParameterx:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterx(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterx(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterx");
#endif
			break;
			case OP_glTexParameteriv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameteriv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameteriv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameteriv");
#endif
			break;
			case OP_glTexParameterxv:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterxv(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterxv(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterxv");
#endif
			break;
			case OP_glTexSubImage2D:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexSubImage2D(0x%08x %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glTexSubImage2D(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexSubImage2D");
#endif
			break;
			case OP_glTranslatex:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTranslatex(0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glTranslatex(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTranslatex");
#endif
			break;
			case OP_glVertexPointer:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexPointer(%d 0x%08x %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glVertexPointer(*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexPointer");
#endif
			break;
			case OP_glViewport:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glViewport(%d %d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glViewport(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glViewport");
#endif
			break;
			case OP_glPointSizePointerOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizePointerOES(0x%08x %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glPointSizePointerOES(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizePointerOES");
#endif
			break;
			case OP_glVertexPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexPointerOffset(%d 0x%08x %d %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glVertexPointerOffset(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexPointerOffset");
#endif
			break;
			case OP_glColorPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorPointerOffset(%d 0x%08x %d %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColorPointerOffset(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorPointerOffset");
#endif
			break;
			case OP_glNormalPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormalPointerOffset(0x%08x %d %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
#endif
			this->glNormalPointerOffset(this, *(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormalPointerOffset");
#endif
			break;
			case OP_glPointSizePointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizePointerOffset(0x%08x %d %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
#endif
			this->glPointSizePointerOffset(this, *(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizePointerOffset");
#endif
			break;
			case OP_glTexCoordPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexCoordPointerOffset(%d 0x%08x %d %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glTexCoordPointerOffset(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexCoordPointerOffset");
#endif
			break;
			case OP_glWeightPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWeightPointerOffset(%d 0x%08x %d %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glWeightPointerOffset(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWeightPointerOffset");
#endif
			break;
			case OP_glMatrixIndexPointerOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixIndexPointerOffset(%d 0x%08x %d %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glMatrixIndexPointerOffset(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixIndexPointerOffset");
#endif
			break;
			case OP_glVertexPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glVertexPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glVertexPointerData(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glVertexPointerData");
#endif
			break;
			case OP_glColorPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColorPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glColorPointerData(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColorPointerData");
#endif
			break;
			case OP_glNormalPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormalPointerData(0x%08x %d %p(%u) %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glNormalPointerData(this, *(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormalPointerData");
#endif
			break;
			case OP_glTexCoordPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexCoordPointerData(%d %d 0x%08x %d %p(%u) %u )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4 + 4)));
#endif
			this->glTexCoordPointerData(this, *(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexCoordPointerData");
#endif
			break;
			case OP_glPointSizePointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizePointerData(0x%08x %d %p(%u) %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glPointSizePointerData(this, *(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (void*)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizePointerData");
#endif
			break;
			case OP_glWeightPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWeightPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glWeightPointerData(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWeightPointerData");
#endif
			break;
			case OP_glMatrixIndexPointerData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixIndexPointerData(%d 0x%08x %d %p(%u) %u )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glMatrixIndexPointerData(this, *(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixIndexPointerData");
#endif
			break;
			case OP_glDrawElementsOffset:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsOffset(0x%08x %d 0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glDrawElementsOffset(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsOffset");
#endif
			break;
			case OP_glDrawElementsData:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawElementsData(0x%08x %d 0x%08x %p(%u) %u )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
#endif
			this->glDrawElementsData(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (void*)(ptr + 8 + 4 + 4 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawElementsData");
#endif
			break;
			case OP_glGetCompressedTextureFormats:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetCompressedTextureFormats(%d %p(%u) )\n", stream,*(int *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetCompressedTextureFormats(*(int *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetCompressedTextureFormats");
#endif
			break;
			case OP_glFinishRoundTrip:
			{
			size_t totalTmpSize = sizeof(int);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinishRoundTrip()\n", stream);
#endif
			*(int *)(&tmpBuf[0]) = 			this->glFinishRoundTrip();
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinishRoundTrip");
#endif
			break;
			case OP_glBlendEquationSeparateOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquationSeparateOES(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glBlendEquationSeparateOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquationSeparateOES");
#endif
			break;
			case OP_glBlendFuncSeparateOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendFuncSeparateOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glBlendFuncSeparateOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendFuncSeparateOES");
#endif
			break;
			case OP_glBlendEquationOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBlendEquationOES(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glBlendEquationOES(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBlendEquationOES");
#endif
			break;
			case OP_glDrawTexsOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexsOES(%d %d %d %d %d )\n", stream,*(GLshort *)(ptr + 8), *(GLshort *)(ptr + 8 + 2), *(GLshort *)(ptr + 8 + 2 + 2), *(GLshort *)(ptr + 8 + 2 + 2 + 2), *(GLshort *)(ptr + 8 + 2 + 2 + 2 + 2));
#endif
			this->glDrawTexsOES(*(GLshort *)(ptr + 8), *(GLshort *)(ptr + 8 + 2), *(GLshort *)(ptr + 8 + 2 + 2), *(GLshort *)(ptr + 8 + 2 + 2 + 2), *(GLshort *)(ptr + 8 + 2 + 2 + 2 + 2));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexsOES");
#endif
			break;
			case OP_glDrawTexiOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexiOES(%d %d %d %d %d )\n", stream,*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glDrawTexiOES(*(GLint *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexiOES");
#endif
			break;
			case OP_glDrawTexxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexxOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glDrawTexxOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexxOES");
#endif
			break;
			case OP_glDrawTexsvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexsvOES(%p(%u) )\n", stream,(const GLshort*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glDrawTexsvOES((const GLshort*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexsvOES");
#endif
			break;
			case OP_glDrawTexivOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexivOES(%p(%u) )\n", stream,(const GLint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glDrawTexivOES((const GLint*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexivOES");
#endif
			break;
			case OP_glDrawTexxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexxvOES(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glDrawTexxvOES((const GLfixed*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexxvOES");
#endif
			break;
			case OP_glDrawTexfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexfOES(%f %f %f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glDrawTexfOES(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexfOES");
#endif
			break;
			case OP_glDrawTexfvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDrawTexfvOES(%p(%u) )\n", stream,(const GLfloat*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glDrawTexfvOES((const GLfloat*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDrawTexfvOES");
#endif
			break;
			case OP_glEGLImageTargetTexture2DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEGLImageTargetTexture2DOES(0x%08x %p )\n", stream,*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
#endif
			this->glEGLImageTargetTexture2DOES(*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEGLImageTargetTexture2DOES");
#endif
			break;
			case OP_glEGLImageTargetRenderbufferStorageOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEGLImageTargetRenderbufferStorageOES(0x%08x %p )\n", stream,*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
#endif
			this->glEGLImageTargetRenderbufferStorageOES(*(GLenum *)(ptr + 8), *(GLeglImageOES *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEGLImageTargetRenderbufferStorageOES");
#endif
			break;
			case OP_glAlphaFuncxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glAlphaFuncxOES(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
#endif
			this->glAlphaFuncxOES(*(GLenum *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glAlphaFuncxOES");
#endif
			break;
			case OP_glClearColorxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearColorxOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4), *(GLclampx *)(ptr + 8 + 4 + 4), *(GLclampx *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glClearColorxOES(*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4), *(GLclampx *)(ptr + 8 + 4 + 4), *(GLclampx *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearColorxOES");
#endif
			break;
			case OP_glClearDepthxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthxOES(0x%08x )\n", stream,*(GLclampx *)(ptr + 8));
#endif
			this->glClearDepthxOES(*(GLclampx *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthxOES");
#endif
			break;
			case OP_glClipPlanexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanexOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glClipPlanexOES(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanexOES");
#endif
			break;
			case OP_glClipPlanexIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanexIMG(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glClipPlanexIMG(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanexIMG");
#endif
			break;
			case OP_glColor4xOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glColor4xOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glColor4xOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glColor4xOES");
#endif
			break;
			case OP_glDepthRangexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangexOES(0x%08x 0x%08x )\n", stream,*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
#endif
			this->glDepthRangexOES(*(GLclampx *)(ptr + 8), *(GLclampx *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangexOES");
#endif
			break;
			case OP_glFogxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogxOES(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glFogxOES(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogxOES");
#endif
			break;
			case OP_glFogxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFogxvOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glFogxvOES(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFogxvOES");
#endif
			break;
			case OP_glFrustumxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumxOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumxOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumxOES");
#endif
			break;
			case OP_glGetClipPlanexOES:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanexOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetClipPlanexOES(*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanexOES");
#endif
			break;
			case OP_glGetClipPlanex:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanex(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetClipPlanex(*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanex");
#endif
			break;
			case OP_glGetFixedvOES:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFixedvOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetFixedvOES(*(GLenum *)(ptr + 8), (GLfixed*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFixedvOES");
#endif
			break;
			case OP_glGetLightxvOES:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetLightxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetLightxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetLightxvOES");
#endif
			break;
			case OP_glGetMaterialxvOES:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetMaterialxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetMaterialxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetMaterialxvOES");
#endif
			break;
			case OP_glGetTexEnvxvOES:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexEnvxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexEnvxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexEnvxvOES");
#endif
			break;
			case OP_glGetTexParameterxvOES:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexParameterxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexParameterxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexParameterxvOES");
#endif
			break;
			case OP_glLightModelxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelxOES(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glLightModelxOES(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelxOES");
#endif
			break;
			case OP_glLightModelxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightModelxvOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glLightModelxvOES(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightModelxvOES");
#endif
			break;
			case OP_glLightxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightxOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glLightxOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightxOES");
#endif
			break;
			case OP_glLightxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLightxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glLightxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLightxvOES");
#endif
			break;
			case OP_glLineWidthxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLineWidthxOES(0x%08x )\n", stream,*(GLfixed *)(ptr + 8));
#endif
			this->glLineWidthxOES(*(GLfixed *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLineWidthxOES");
#endif
			break;
			case OP_glLoadMatrixxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadMatrixxOES(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glLoadMatrixxOES((const GLfixed*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadMatrixxOES");
#endif
			break;
			case OP_glMaterialxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialxOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glMaterialxOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialxOES");
#endif
			break;
			case OP_glMaterialxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMaterialxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glMaterialxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMaterialxvOES");
#endif
			break;
			case OP_glMultMatrixxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultMatrixxOES(%p(%u) )\n", stream,(const GLfixed*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8));
#endif
			this->glMultMatrixxOES((const GLfixed*)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultMatrixxOES");
#endif
			break;
			case OP_glMultiTexCoord4xOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiTexCoord4xOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glMultiTexCoord4xOES(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiTexCoord4xOES");
#endif
			break;
			case OP_glNormal3xOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glNormal3xOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glNormal3xOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glNormal3xOES");
#endif
			break;
			case OP_glOrthoxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthoxOES(0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthoxOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthoxOES");
#endif
			break;
			case OP_glPointParameterxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterxOES(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glPointParameterxOES(*(GLenum *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterxOES");
#endif
			break;
			case OP_glPointParameterxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointParameterxvOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glPointParameterxvOES(*(GLenum *)(ptr + 8), (const GLfixed*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointParameterxvOES");
#endif
			break;
			case OP_glPointSizexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPointSizexOES(0x%08x )\n", stream,*(GLfixed *)(ptr + 8));
#endif
			this->glPointSizexOES(*(GLfixed *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPointSizexOES");
#endif
			break;
			case OP_glPolygonOffsetxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glPolygonOffsetxOES(0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
#endif
			this->glPolygonOffsetxOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glPolygonOffsetxOES");
#endif
			break;
			case OP_glRotatexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRotatexOES(0x%08x 0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRotatexOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4), *(GLfixed *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRotatexOES");
#endif
			break;
			case OP_glSampleCoveragexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSampleCoveragexOES(0x%08x %d )\n", stream,*(GLclampx *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
#endif
			this->glSampleCoveragexOES(*(GLclampx *)(ptr + 8), *(GLboolean *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSampleCoveragexOES");
#endif
			break;
			case OP_glScalexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glScalexOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glScalexOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glScalexOES");
#endif
			break;
			case OP_glTexEnvxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvxOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvxOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvxOES");
#endif
			break;
			case OP_glTexEnvxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexEnvxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexEnvxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexEnvxvOES");
#endif
			break;
			case OP_glTexParameterxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterxOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterxOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterxOES");
#endif
			break;
			case OP_glTexParameterxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexParameterxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexParameterxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexParameterxvOES");
#endif
			break;
			case OP_glTranslatexOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTranslatexOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glTranslatexOES(*(GLfixed *)(ptr + 8), *(GLfixed *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTranslatexOES");
#endif
			break;
			case OP_glIsRenderbufferOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsRenderbufferOES(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsRenderbufferOES(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsRenderbufferOES");
#endif
			break;
			case OP_glBindRenderbufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindRenderbufferOES(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindRenderbufferOES(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindRenderbufferOES");
#endif
			break;
			case OP_glDeleteRenderbuffersOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteRenderbuffersOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteRenderbuffersOES(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteRenderbuffersOES");
#endif
			break;
			case OP_glGenRenderbuffersOES:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenRenderbuffersOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenRenderbuffersOES(*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenRenderbuffersOES");
#endif
			break;
			case OP_glRenderbufferStorageOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorageOES(0x%08x 0x%08x %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorageOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorageOES");
#endif
			break;
			case OP_glGetRenderbufferParameterivOES:
			{
			size_t tmpPtr2Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4);
			size_t totalTmpSize = tmpPtr2Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr2 = &tmpBuf[0];
			memset(tmpPtr2, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetRenderbufferParameterivOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetRenderbufferParameterivOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(tmpPtr2));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetRenderbufferParameterivOES");
#endif
			break;
			case OP_glIsFramebufferOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsFramebufferOES(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsFramebufferOES(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsFramebufferOES");
#endif
			break;
			case OP_glBindFramebufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindFramebufferOES(0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
#endif
			this->glBindFramebufferOES(*(GLenum *)(ptr + 8), *(GLuint *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindFramebufferOES");
#endif
			break;
			case OP_glDeleteFramebuffersOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteFramebuffersOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteFramebuffersOES(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteFramebuffersOES");
#endif
			break;
			case OP_glGenFramebuffersOES:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenFramebuffersOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenFramebuffersOES(*(GLsizei *)(ptr + 8), (GLuint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenFramebuffersOES");
#endif
			break;
			case OP_glCheckFramebufferStatusOES:
			{
			size_t totalTmpSize = sizeof(GLenum);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCheckFramebufferStatusOES(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			*(GLenum *)(&tmpBuf[0]) = 			this->glCheckFramebufferStatusOES(*(GLenum *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCheckFramebufferStatusOES");
#endif
			break;
			case OP_glFramebufferRenderbufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferRenderbufferOES(0x%08x 0x%08x 0x%08x %u )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glFramebufferRenderbufferOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferRenderbufferOES");
#endif
			break;
			case OP_glFramebufferTexture2DOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture2DOES(0x%08x 0x%08x 0x%08x %u %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture2DOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture2DOES");
#endif
			break;
			case OP_glGetFramebufferAttachmentParameterivOES:
			{
			size_t tmpPtr3Size = (size_t)*(unsigned int *)(ptr + 8 + 4 + 4 + 4);
			size_t totalTmpSize = tmpPtr3Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr3 = &tmpBuf[0];
			memset(tmpPtr3, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFramebufferAttachmentParameterivOES(0x%08x 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glGetFramebufferAttachmentParameterivOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), (GLint*)(tmpPtr3));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFramebufferAttachmentParameterivOES");
#endif
			break;
			case OP_glGenerateMipmapOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenerateMipmapOES(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			this->glGenerateMipmapOES(*(GLenum *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenerateMipmapOES");
#endif
			break;
			case OP_glMapBufferOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMapBufferOES(0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glMapBufferOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMapBufferOES");
#endif
			break;
			case OP_glUnmapBufferOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glUnmapBufferOES(0x%08x )\n", stream,*(GLenum *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glUnmapBufferOES(*(GLenum *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glUnmapBufferOES");
#endif
			break;
			case OP_glGetBufferPointervOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetBufferPointervOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetBufferPointervOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLvoid**)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetBufferPointervOES");
#endif
			break;
			case OP_glCurrentPaletteMatrixOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glCurrentPaletteMatrixOES(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glCurrentPaletteMatrixOES(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glCurrentPaletteMatrixOES");
#endif
			break;
			case OP_glLoadPaletteFromModelViewMatrixOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glLoadPaletteFromModelViewMatrixOES()\n", stream);
#endif
			this->glLoadPaletteFromModelViewMatrixOES();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glLoadPaletteFromModelViewMatrixOES");
#endif
			break;
			case OP_glMatrixIndexPointerOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMatrixIndexPointerOES(%d 0x%08x %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glMatrixIndexPointerOES(*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMatrixIndexPointerOES");
#endif
			break;
			case OP_glWeightPointerOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glWeightPointerOES(%d 0x%08x %d %p(%u) )\n", stream,*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4));
#endif
			this->glWeightPointerOES(*(GLint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + 4), (const GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glWeightPointerOES");
#endif
			break;
			case OP_glQueryMatrixxOES:
			{
			size_t tmpPtr0Size = (size_t)*(unsigned int *)(ptr + 8);
			size_t totalTmpSize = tmpPtr0Size;
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			totalTmpSize += tmpPtr1Size;
			totalTmpSize += sizeof(GLbitfield);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr0 = &tmpBuf[0];
			memset(tmpPtr0, 0, 4);
			unsigned char *tmpPtr1 = &tmpBuf[0 + tmpPtr0Size];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glQueryMatrixxOES(%p(%u) %p(%u) )\n", stream,(GLfixed*)(tmpPtr0), *(unsigned int *)(ptr + 8), (GLint*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			*(GLbitfield *)(&tmpBuf[0 + tmpPtr0Size + tmpPtr1Size]) = 			this->glQueryMatrixxOES((GLfixed*)(tmpPtr0), (GLint*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glQueryMatrixxOES");
#endif
			break;
			case OP_glDepthRangefOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDepthRangefOES(%f %f )\n", stream,*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
#endif
			this->glDepthRangefOES(*(GLclampf *)(ptr + 8), *(GLclampf *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDepthRangefOES");
#endif
			break;
			case OP_glFrustumfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFrustumfOES(%f %f %f %f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFrustumfOES(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFrustumfOES");
#endif
			break;
			case OP_glOrthofOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glOrthofOES(%f %f %f %f %f %f )\n", stream,*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glOrthofOES(*(GLfloat *)(ptr + 8), *(GLfloat *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLfloat *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glOrthofOES");
#endif
			break;
			case OP_glClipPlanefOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanefOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glClipPlanefOES(*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanefOES");
#endif
			break;
			case OP_glClipPlanefIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClipPlanefIMG(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glClipPlanefIMG(*(GLenum *)(ptr + 8), (const GLfloat*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClipPlanefIMG");
#endif
			break;
			case OP_glGetClipPlanefOES:
			{
			size_t tmpPtr1Size = (size_t)*(unsigned int *)(ptr + 8 + 4);
			size_t totalTmpSize = tmpPtr1Size;
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
			unsigned char *tmpPtr1 = &tmpBuf[0];
			memset(tmpPtr1, 0, 4);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetClipPlanefOES(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLfloat*)(tmpPtr1), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGetClipPlanefOES(*(GLenum *)(ptr + 8), (GLfloat*)(tmpPtr1));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetClipPlanefOES");
#endif
			break;
			case OP_glClearDepthfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glClearDepthfOES(%f )\n", stream,*(GLclampf *)(ptr + 8));
#endif
			this->glClearDepthfOES(*(GLclampf *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glClearDepthfOES");
#endif
			break;
			case OP_glTexGenfOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenfOES(0x%08x 0x%08x %f )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
#endif
			this->glTexGenfOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfloat *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenfOES");
#endif
			break;
			case OP_glTexGenfvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenfvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexGenfvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenfvOES");
#endif
			break;
			case OP_glTexGeniOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGeniOES(0x%08x 0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
#endif
			this->glTexGeniOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGeniOES");
#endif
			break;
			case OP_glTexGenivOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenivOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexGenivOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenivOES");
#endif
			break;
			case OP_glTexGenxOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenxOES(0x%08x 0x%08x 0x%08x )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
#endif
			this->glTexGenxOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLfixed *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenxOES");
#endif
			break;
			case OP_glTexGenxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTexGenxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glTexGenxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (const GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTexGenxvOES");
#endif
			break;
			case OP_glGetTexGenfvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexGenfvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexGenfvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfloat*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexGenfvOES");
#endif
			break;
			case OP_glGetTexGenivOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexGenivOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexGenivOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexGenivOES");
#endif
			break;
			case OP_glGetTexGenxvOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetTexGenxvOES(0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetTexGenxvOES(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLfixed*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetTexGenxvOES");
#endif
			break;
			case OP_glBindVertexArrayOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glBindVertexArrayOES(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glBindVertexArrayOES(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glBindVertexArrayOES");
#endif
			break;
			case OP_glDeleteVertexArraysOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteVertexArraysOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteVertexArraysOES(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteVertexArraysOES");
#endif
			break;
			case OP_glGenVertexArraysOES:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenVertexArraysOES(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenVertexArraysOES(*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenVertexArraysOES");
#endif
			break;
			case OP_glIsVertexArrayOES:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsVertexArrayOES(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsVertexArrayOES(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsVertexArrayOES");
#endif
			break;
			case OP_glDiscardFramebufferEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDiscardFramebufferEXT(0x%08x %d %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glDiscardFramebufferEXT(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (const GLenum*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDiscardFramebufferEXT");
#endif
			break;
			case OP_glMultiDrawArraysEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawArraysEXT(0x%08x %p(%u) %p(%u) %d )\n", stream,*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))));
#endif
			this->glMultiDrawArraysEXT(*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawArraysEXT");
#endif
			break;
			case OP_glMultiDrawElementsEXT:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawElementsEXT(0x%08x %p(%u) 0x%08x %p(%u) %d )\n", stream,*(GLenum *)(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
#endif
			this->glMultiDrawElementsEXT(*(GLenum *)(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawElementsEXT");
#endif
			break;
			case OP_glMultiDrawArraysSUN:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawArraysSUN(0x%08x %p(%u) %p(%u) %d )\n", stream,*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))));
#endif
			this->glMultiDrawArraysSUN(*(GLenum *)(ptr + 8), (GLint*)(ptr + 8 + 4 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4))));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawArraysSUN");
#endif
			break;
			case OP_glMultiDrawElementsSUN:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glMultiDrawElementsSUN(0x%08x %p(%u) 0x%08x %p(%u) %d )\n", stream,*(GLenum *)(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
#endif
			this->glMultiDrawElementsSUN(*(GLenum *)(ptr + 8), (const GLsizei*)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4)), (const GLvoid**)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4 + *(tsize_t *)(ptr +8 + 4) + 4)));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glMultiDrawElementsSUN");
#endif
			break;
			case OP_glRenderbufferStorageMultisampleIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glRenderbufferStorageMultisampleIMG(0x%08x %d 0x%08x %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glRenderbufferStorageMultisampleIMG(*(GLenum *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glRenderbufferStorageMultisampleIMG");
#endif
			break;
			case OP_glFramebufferTexture2DMultisampleIMG:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFramebufferTexture2DMultisampleIMG(0x%08x 0x%08x 0x%08x %u %d %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glFramebufferTexture2DMultisampleIMG(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLenum *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFramebufferTexture2DMultisampleIMG");
#endif
			break;
			case OP_glDeleteFencesNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDeleteFencesNV(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glDeleteFencesNV(*(GLsizei *)(ptr + 8), (const GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDeleteFencesNV");
#endif
			break;
			case OP_glGenFencesNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGenFencesNV(%d %p(%u) )\n", stream,*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glGenFencesNV(*(GLsizei *)(ptr + 8), (GLuint*)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGenFencesNV");
#endif
			break;
			case OP_glIsFenceNV:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glIsFenceNV(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glIsFenceNV(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glIsFenceNV");
#endif
			break;
			case OP_glTestFenceNV:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glTestFenceNV(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glTestFenceNV(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glTestFenceNV");
#endif
			break;
			case OP_glGetFenceivNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetFenceivNV(%u 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4));
#endif
			this->glGetFenceivNV(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetFenceivNV");
#endif
			break;
			case OP_glFinishFenceNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glFinishFenceNV(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glFinishFenceNV(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glFinishFenceNV");
#endif
			break;
			case OP_glSetFenceNV:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glSetFenceNV(%u 0x%08x )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
#endif
			this->glSetFenceNV(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glSetFenceNV");
#endif
			break;
			case OP_glGetDriverControlsQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetDriverControlsQCOM(%p(%u) %d %p(%u) )\n", stream,(GLint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLuint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glGetDriverControlsQCOM((GLint*)(ptr + 8 + 4), *(GLsizei *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLuint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetDriverControlsQCOM");
#endif
			break;
			case OP_glGetDriverControlStringQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glGetDriverControlStringQCOM(%u %d %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glGetDriverControlStringQCOM(*(GLuint *)(ptr + 8), *(GLsizei *)(ptr + 8 + 4), (GLsizei*)(ptr + 8 + 4 + 4 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glGetDriverControlStringQCOM");
#endif
			break;
			case OP_glEnableDriverControlQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEnableDriverControlQCOM(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glEnableDriverControlQCOM(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEnableDriverControlQCOM");
#endif
			break;
			case OP_glDisableDriverControlQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glDisableDriverControlQCOM(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			this->glDisableDriverControlQCOM(*(GLuint *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glDisableDriverControlQCOM");
#endif
			break;
			case OP_glExtGetTexturesQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexturesQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glExtGetTexturesQCOM((GLuint*)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexturesQCOM");
#endif
			break;
			case OP_glExtGetBuffersQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetBuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glExtGetBuffersQCOM((GLuint*)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetBuffersQCOM");
#endif
			break;
			case OP_glExtGetRenderbuffersQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetRenderbuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glExtGetRenderbuffersQCOM((GLuint*)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetRenderbuffersQCOM");
#endif
			break;
			case OP_glExtGetFramebuffersQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetFramebuffersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glExtGetFramebuffersQCOM((GLuint*)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetFramebuffersQCOM");
#endif
			break;
			case OP_glExtGetTexLevelParameterivQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexLevelParameterivQCOM(%u 0x%08x %d 0x%08x %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glExtGetTexLevelParameterivQCOM(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexLevelParameterivQCOM");
#endif
			break;
			case OP_glExtTexObjectStateOverrideiQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtTexObjectStateOverrideiQCOM(0x%08x 0x%08x %d )\n", stream,*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
#endif
			this->glExtTexObjectStateOverrideiQCOM(*(GLenum *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtTexObjectStateOverrideiQCOM");
#endif
			break;
			case OP_glExtGetTexSubImageQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetTexSubImageQCOM(0x%08x %d %d %d %d %d %d %d 0x%08x 0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
#endif
			this->glExtGetTexSubImageQCOM(*(GLenum *)(ptr + 8), *(GLint *)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4), *(GLint *)(ptr + 8 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4), *(GLsizei *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), *(GLenum *)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4), (GLvoid*)(ptr + 8 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetTexSubImageQCOM");
#endif
			break;
			case OP_glExtGetBufferPointervQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetBufferPointervQCOM(0x%08x %p(%u) )\n", stream,*(GLenum *)(ptr + 8), (GLvoid**)(ptr + 8 + 4 + 4), *(unsigned int *)(ptr + 8 + 4));
#endif
			this->glExtGetBufferPointervQCOM(*(GLenum *)(ptr + 8), (GLvoid**)(ptr + 8 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetBufferPointervQCOM");
#endif
			break;
			case OP_glExtGetShadersQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetShadersQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glExtGetShadersQCOM((GLuint*)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetShadersQCOM");
#endif
			break;
			case OP_glExtGetProgramsQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetProgramsQCOM(%p(%u) %d %p(%u) )\n", stream,(GLuint*)(ptr + 8 + 4), *(unsigned int *)(ptr + 8), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4));
#endif
			this->glExtGetProgramsQCOM((GLuint*)(ptr + 8 + 4), *(GLint *)(ptr + 8 + 4 + *(tsize_t *)(ptr +8)), (GLint*)(ptr + 8 + 4 + *(tsize_t *)(ptr +8) + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetProgramsQCOM");
#endif
			break;
			case OP_glExtIsProgramBinaryQCOM:
			{
			size_t totalTmpSize = sizeof(GLboolean);
			unsigned char *tmpBuf = stream->alloc(totalTmpSize);
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtIsProgramBinaryQCOM(%u )\n", stream,*(GLuint *)(ptr + 8));
#endif
			*(GLboolean *)(&tmpBuf[0]) = 			this->glExtIsProgramBinaryQCOM(*(GLuint *)(ptr + 8));
			stream->flush();
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtIsProgramBinaryQCOM");
#endif
			break;
			case OP_glExtGetProgramBinarySourceQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glExtGetProgramBinarySourceQCOM(%u 0x%08x %p(%u) %p(%u) )\n", stream,*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4), *(unsigned int *)(ptr + 8 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4), *(unsigned int *)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4)));
#endif
			this->glExtGetProgramBinarySourceQCOM(*(GLuint *)(ptr + 8), *(GLenum *)(ptr + 8 + 4), (GLchar*)(ptr + 8 + 4 + 4 + 4), (GLint*)(ptr + 8 + 4 + 4 + 4 + *(tsize_t *)(ptr +8 + 4 + 4) + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glExtGetProgramBinarySourceQCOM");
#endif
			break;
			case OP_glStartTilingQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glStartTilingQCOM(%u %u %u %u 0x%08x )\n", stream,*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLbitfield *)(ptr + 8 + 4 + 4 + 4 + 4));
#endif
			this->glStartTilingQCOM(*(GLuint *)(ptr + 8), *(GLuint *)(ptr + 8 + 4), *(GLuint *)(ptr + 8 + 4 + 4), *(GLuint *)(ptr + 8 + 4 + 4 + 4), *(GLbitfield *)(ptr + 8 + 4 + 4 + 4 + 4));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glStartTilingQCOM");
#endif
			break;
			case OP_glEndTilingQCOM:
			{
#ifdef DEBUG_PRINTOUT
			fprintf(stderr,"gles(%p): glEndTilingQCOM(0x%08x )\n", stream,*(GLbitfield *)(ptr + 8));
#endif
			this->glEndTilingQCOM(*(GLbitfield *)(ptr + 8));
			pos += *(int *)(ptr + 4);
			ptr += *(int *)(ptr + 4);
			}
#ifdef CHECK_GL_ERROR
			sprintf(lastCall, "glEndTilingQCOM");
#endif
			break;
			default:
				unknownOpcode = true;
		} //switch
#ifdef CHECK_GL_ERROR
	int err = lastCall[0] ? this->glGetError() : GL_NO_ERROR;
	if (err) fprintf(stderr, "gles Error: 0x%X in %s\n", err, lastCall);
#endif
	} // while
	return pos;
}
